
20887507_ED314_HAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009458  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  080095e0  080095e0  000195e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080098d8  080098d8  000198d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080098dc  080098dc  000198dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000244  20000000  080098e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020244  2**0
                  CONTENTS
  7 .bss          00000414  20000248  20000248  00020248  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000065c  2000065c  00020248  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002919f  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003926  00000000  00000000  00049413  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00011e8f  00000000  00000000  0004cd39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001630  00000000  00000000  0005ebc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001590  00000000  00000000  000601f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001ff91  00000000  00000000  00061788  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000f135  00000000  00000000  00081719  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000b066b  00000000  00000000  0009084e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00140eb9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004f98  00000000  00000000  00140f38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000248 	.word	0x20000248
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080095c8 	.word	0x080095c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000024c 	.word	0x2000024c
 80001c4:	080095c8 	.word	0x080095c8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b510      	push	{r4, lr}
 8000bda:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_InitTick+0x40>)
 8000bde:	7818      	ldrb	r0, [r3, #0]
 8000be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000be8:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <HAL_InitTick+0x44>)
 8000bea:	6810      	ldr	r0, [r2, #0]
 8000bec:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bf0:	f000 fda6 	bl	8001740 <HAL_SYSTICK_Config>
 8000bf4:	b968      	cbnz	r0, 8000c12 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf6:	2c0f      	cmp	r4, #15
 8000bf8:	d901      	bls.n	8000bfe <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000bfa:	2001      	movs	r0, #1
  }
   /* Return function status */
  return HAL_OK;
}
 8000bfc:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4621      	mov	r1, r4
 8000c02:	f04f 30ff 	mov.w	r0, #4294967295
 8000c06:	f000 fd5d 	bl	80016c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_InitTick+0x48>)
 8000c0c:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000c0e:	2000      	movs	r0, #0
 8000c10:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c12:	2001      	movs	r0, #1
 8000c14:	bd10      	pop	{r4, pc}
 8000c16:	bf00      	nop
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	2000006c 	.word	0x2000006c
 8000c20:	20000004 	.word	0x20000004

08000c24 <HAL_Init>:
{
 8000c24:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c26:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x20>)
 8000c28:	6813      	ldr	r3, [r2, #0]
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 fd35 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f7ff ffce 	bl	8000bd8 <HAL_InitTick>
  HAL_MspInit();
 8000c3c:	f005 fb1e 	bl	800627c <HAL_MspInit>
}
 8000c40:	2000      	movs	r0, #0
 8000c42:	bd08      	pop	{r3, pc}
 8000c44:	40022000 	.word	0x40022000

08000c48 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c48:	4a03      	ldr	r2, [pc, #12]	; (8000c58 <HAL_IncTick+0x10>)
 8000c4a:	6811      	ldr	r1, [r2, #0]
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_IncTick+0x14>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	440b      	add	r3, r1
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000384 	.word	0x20000384
 8000c5c:	20000000 	.word	0x20000000

08000c60 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000c60:	4b01      	ldr	r3, [pc, #4]	; (8000c68 <HAL_GetTick+0x8>)
 8000c62:	6818      	ldr	r0, [r3, #0]
}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000384 	.word	0x20000384

08000c6c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c70:	f7ff fff6 	bl	8000c60 <HAL_GetTick>
 8000c74:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c76:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000c7a:	d002      	beq.n	8000c82 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <HAL_Delay+0x24>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c82:	f7ff ffed 	bl	8000c60 <HAL_GetTick>
 8000c86:	1b40      	subs	r0, r0, r5
 8000c88:	4284      	cmp	r4, r0
 8000c8a:	d8fa      	bhi.n	8000c82 <HAL_Delay+0x16>
  {
  }
}
 8000c8c:	bd38      	pop	{r3, r4, r5, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000000 	.word	0x20000000

08000c94 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000c94:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000c96:	6802      	ldr	r2, [r0, #0]
 8000c98:	6893      	ldr	r3, [r2, #8]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d011      	beq.n	8000cc6 <ADC_Disable+0x32>
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d037      	beq.n	8000d18 <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000ca8:	6893      	ldr	r3, [r2, #8]
 8000caa:	f003 030d 	and.w	r3, r3, #13
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d011      	beq.n	8000cd6 <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cb2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000cb4:	f043 0310 	orr.w	r3, r3, #16
 8000cb8:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cba:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000cc6:	6813      	ldr	r3, [r2, #0]
 8000cc8:	f013 0f01 	tst.w	r3, #1
 8000ccc:	d101      	bne.n	8000cd2 <ADC_Disable+0x3e>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e7e8      	b.n	8000ca4 <ADC_Disable+0x10>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e7e6      	b.n	8000ca4 <ADC_Disable+0x10>
 8000cd6:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000cd8:	6893      	ldr	r3, [r2, #8]
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	6093      	str	r3, [r2, #8]
 8000ce0:	6803      	ldr	r3, [r0, #0]
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000ce6:	f7ff ffbb 	bl	8000c60 <HAL_GetTick>
 8000cea:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f013 0f01 	tst.w	r3, #1
 8000cf4:	d00e      	beq.n	8000d14 <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000cf6:	f7ff ffb3 	bl	8000c60 <HAL_GetTick>
 8000cfa:	1b40      	subs	r0, r0, r5
 8000cfc:	2802      	cmp	r0, #2
 8000cfe:	d9f5      	bls.n	8000cec <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d02:	f043 0310 	orr.w	r3, r3, #16
 8000d06:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8000d10:	2001      	movs	r0, #1
 8000d12:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d14:	2000      	movs	r0, #0
 8000d16:	bd38      	pop	{r3, r4, r5, pc}
 8000d18:	2000      	movs	r0, #0
}
 8000d1a:	bd38      	pop	{r3, r4, r5, pc}

08000d1c <ADC_Enable>:
{
 8000d1c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d1e:	6802      	ldr	r2, [r0, #0]
 8000d20:	6893      	ldr	r3, [r2, #8]
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d010      	beq.n	8000d4c <ADC_Enable+0x30>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d133      	bne.n	8000d98 <ADC_Enable+0x7c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000d30:	6891      	ldr	r1, [r2, #8]
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <ADC_Enable+0x80>)
 8000d34:	4219      	tst	r1, r3
 8000d36:	d011      	beq.n	8000d5c <ADC_Enable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d38:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d40:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d4c:	6813      	ldr	r3, [r2, #0]
 8000d4e:	f013 0f01 	tst.w	r3, #1
 8000d52:	d101      	bne.n	8000d58 <ADC_Enable+0x3c>
 8000d54:	2300      	movs	r3, #0
 8000d56:	e7e9      	b.n	8000d2c <ADC_Enable+0x10>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e7e7      	b.n	8000d2c <ADC_Enable+0x10>
 8000d5c:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8000d5e:	6893      	ldr	r3, [r2, #8]
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000d66:	f7ff ff7b 	bl	8000c60 <HAL_GetTick>
 8000d6a:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f013 0f01 	tst.w	r3, #1
 8000d74:	d10e      	bne.n	8000d94 <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000d76:	f7ff ff73 	bl	8000c60 <HAL_GetTick>
 8000d7a:	1b40      	subs	r0, r0, r5
 8000d7c:	2802      	cmp	r0, #2
 8000d7e:	d9f5      	bls.n	8000d6c <ADC_Enable+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000d90:	2001      	movs	r0, #1
 8000d92:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8000d94:	2000      	movs	r0, #0
 8000d96:	bd38      	pop	{r3, r4, r5, pc}
 8000d98:	2000      	movs	r0, #0
}
 8000d9a:	bd38      	pop	{r3, r4, r5, pc}
 8000d9c:	8000003f 	.word	0x8000003f

08000da0 <HAL_ADC_Init>:
{
 8000da0:	b530      	push	{r4, r5, lr}
 8000da2:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000da8:	2800      	cmp	r0, #0
 8000daa:	f000 80fb 	beq.w	8000fa4 <HAL_ADC_Init+0x204>
 8000dae:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000db0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000db2:	f013 0f10 	tst.w	r3, #16
 8000db6:	d151      	bne.n	8000e5c <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000db8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000dba:	b1ab      	cbz	r3, 8000de8 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dbc:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000dbe:	6823      	ldr	r3, [r4, #0]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000dc6:	d003      	beq.n	8000dd0 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000dc8:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000dca:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8000dce:	d046      	beq.n	8000e5e <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 8000dd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dd2:	f023 0312 	bic.w	r3, r3, #18
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ddc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000de4:	2001      	movs	r0, #1
 8000de6:	e03a      	b.n	8000e5e <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 8000de8:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000dea:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000dec:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000dee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000df2:	f005 fa69 	bl	80062c8 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000dfe:	d001      	beq.n	8000e04 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e00:	2000      	movs	r0, #0
 8000e02:	e7dc      	b.n	8000dbe <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8000e04:	4620      	mov	r0, r4
 8000e06:	f7ff ff45 	bl	8000c94 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e0c:	f013 0f10 	tst.w	r3, #16
 8000e10:	d1d5      	bne.n	8000dbe <HAL_ADC_Init+0x1e>
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d1d3      	bne.n	8000dbe <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8000e16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e1c:	f023 0302 	bic.w	r3, r3, #2
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e26:	6822      	ldr	r2, [r4, #0]
 8000e28:	6893      	ldr	r3, [r2, #8]
 8000e2a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000e2e:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e30:	6822      	ldr	r2, [r4, #0]
 8000e32:	6893      	ldr	r3, [r2, #8]
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e3a:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <HAL_ADC_Init+0x208>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a5b      	ldr	r2, [pc, #364]	; (8000fac <HAL_ADC_Init+0x20c>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	0c9b      	lsrs	r3, r3, #18
 8000e46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e4a:	005a      	lsls	r2, r3, #1
 8000e4c:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000e4e:	9b00      	ldr	r3, [sp, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0b4      	beq.n	8000dbe <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 8000e54:	9b00      	ldr	r3, [sp, #0]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	e7f8      	b.n	8000e4e <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e5c:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e60:	f013 0f10 	tst.w	r3, #16
 8000e64:	f040 8095 	bne.w	8000f92 <HAL_ADC_Init+0x1f2>
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	f040 8092 	bne.w	8000f92 <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e6e:	6822      	ldr	r2, [r4, #0]
 8000e70:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000e72:	f013 0304 	ands.w	r3, r3, #4
 8000e76:	f040 808c 	bne.w	8000f92 <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 8000e7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000e7c:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8000e80:	f041 0102 	orr.w	r1, r1, #2
 8000e84:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e86:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000e8a:	d055      	beq.n	8000f38 <HAL_ADC_Init+0x198>
 8000e8c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000e90:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e92:	6891      	ldr	r1, [r2, #8]
 8000e94:	f001 0103 	and.w	r1, r1, #3
 8000e98:	2901      	cmp	r1, #1
 8000e9a:	d050      	beq.n	8000f3e <HAL_ADC_Init+0x19e>
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	b972      	cbnz	r2, 8000ebe <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ea0:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ea2:	b12d      	cbz	r5, 8000eb0 <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ea4:	68a9      	ldr	r1, [r5, #8]
 8000ea6:	f001 0103 	and.w	r1, r1, #3
 8000eaa:	2901      	cmp	r1, #1
 8000eac:	d04f      	beq.n	8000f4e <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000eae:	b932      	cbnz	r2, 8000ebe <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000eb0:	493f      	ldr	r1, [pc, #252]	; (8000fb0 <HAL_ADC_Init+0x210>)
 8000eb2:	688a      	ldr	r2, [r1, #8]
 8000eb4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000eb8:	6865      	ldr	r5, [r4, #4]
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000ebe:	69e2      	ldr	r2, [r4, #28]
 8000ec0:	0351      	lsls	r1, r2, #13
 8000ec2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000ec4:	2d01      	cmp	r5, #1
 8000ec6:	d001      	beq.n	8000ecc <HAL_ADC_Init+0x12c>
 8000ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ecc:	430b      	orrs	r3, r1
 8000ece:	68e1      	ldr	r1, [r4, #12]
 8000ed0:	430b      	orrs	r3, r1
 8000ed2:	68a1      	ldr	r1, [r4, #8]
 8000ed4:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ed6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000ed8:	2901      	cmp	r1, #1
 8000eda:	d03e      	beq.n	8000f5a <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000edc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ede:	2a01      	cmp	r2, #1
 8000ee0:	d002      	beq.n	8000ee8 <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000ee2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ee8:	6822      	ldr	r2, [r4, #0]
 8000eea:	6891      	ldr	r1, [r2, #8]
 8000eec:	f011 0f0c 	tst.w	r1, #12
 8000ef0:	d10b      	bne.n	8000f0a <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ef2:	68d1      	ldr	r1, [r2, #12]
 8000ef4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000ef8:	f021 0102 	bic.w	r1, r1, #2
 8000efc:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000efe:	69a1      	ldr	r1, [r4, #24]
 8000f00:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000f02:	0052      	lsls	r2, r2, #1
 8000f04:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8000f08:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8000f0a:	6821      	ldr	r1, [r4, #0]
 8000f0c:	68cd      	ldr	r5, [r1, #12]
 8000f0e:	4a29      	ldr	r2, [pc, #164]	; (8000fb4 <HAL_ADC_Init+0x214>)
 8000f10:	402a      	ands	r2, r5
 8000f12:	4313      	orrs	r3, r2
 8000f14:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f16:	6923      	ldr	r3, [r4, #16]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d031      	beq.n	8000f80 <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f1c:	6822      	ldr	r2, [r4, #0]
 8000f1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f20:	f023 030f 	bic.w	r3, r3, #15
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000f26:	2300      	movs	r3, #0
 8000f28:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000f2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f2c:	f023 0303 	bic.w	r3, r3, #3
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6463      	str	r3, [r4, #68]	; 0x44
 8000f36:	e033      	b.n	8000fa0 <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f38:	491f      	ldr	r1, [pc, #124]	; (8000fb8 <HAL_ADC_Init+0x218>)
 8000f3a:	9101      	str	r1, [sp, #4]
 8000f3c:	e7a9      	b.n	8000e92 <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	f012 0f01 	tst.w	r2, #1
 8000f44:	d101      	bne.n	8000f4a <HAL_ADC_Init+0x1aa>
 8000f46:	2200      	movs	r2, #0
 8000f48:	e7a9      	b.n	8000e9e <HAL_ADC_Init+0xfe>
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	e7a7      	b.n	8000e9e <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f4e:	6829      	ldr	r1, [r5, #0]
 8000f50:	f011 0f01 	tst.w	r1, #1
 8000f54:	d0ab      	beq.n	8000eae <HAL_ADC_Init+0x10e>
 8000f56:	2201      	movs	r2, #1
 8000f58:	e7a9      	b.n	8000eae <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f5a:	b932      	cbnz	r2, 8000f6a <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f68:	e7b8      	b.n	8000edc <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 8000f6a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f6c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8000f70:	f042 0220 	orr.w	r2, r2, #32
 8000f74:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f76:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000f78:	f042 0201 	orr.w	r2, r2, #1
 8000f7c:	64a2      	str	r2, [r4, #72]	; 0x48
 8000f7e:	e7ad      	b.n	8000edc <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f80:	6821      	ldr	r1, [r4, #0]
 8000f82:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000f84:	f023 030f 	bic.w	r3, r3, #15
 8000f88:	6a22      	ldr	r2, [r4, #32]
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	630b      	str	r3, [r1, #48]	; 0x30
 8000f90:	e7c9      	b.n	8000f26 <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 8000f92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f94:	f023 0312 	bic.w	r3, r3, #18
 8000f98:	f043 0310 	orr.w	r3, r3, #16
 8000f9c:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 8000f9e:	2001      	movs	r0, #1
}
 8000fa0:	b017      	add	sp, #92	; 0x5c
 8000fa2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	e7fb      	b.n	8000fa0 <HAL_ADC_Init+0x200>
 8000fa8:	2000006c 	.word	0x2000006c
 8000fac:	431bde83 	.word	0x431bde83
 8000fb0:	50000300 	.word	0x50000300
 8000fb4:	fff0c007 	.word	0xfff0c007
 8000fb8:	50000100 	.word	0x50000100

08000fbc <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fbc:	6803      	ldr	r3, [r0, #0]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f013 0f04 	tst.w	r3, #4
 8000fc4:	d002      	beq.n	8000fcc <HAL_ADC_Start+0x10>
    tmp_hal_status = HAL_BUSY;
 8000fc6:	2302      	movs	r3, #2
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8000fcc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d101      	bne.n	8000fd8 <HAL_ADC_Start+0x1c>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e7f7      	b.n	8000fc8 <HAL_ADC_Start+0xc>
{
 8000fd8:	b510      	push	{r4, lr}
 8000fda:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 8000fe2:	f7ff fe9b 	bl	8000d1c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d160      	bne.n	80010ae <HAL_ADC_Start+0xf2>
      ADC_STATE_CLR_SET(hadc->State,
 8000fec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000fee:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000ff2:	f022 0201 	bic.w	r2, r2, #1
 8000ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ffa:	6462      	str	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ffc:	4a2e      	ldr	r2, [pc, #184]	; (80010b8 <HAL_ADC_Start+0xfc>)
 8000ffe:	6892      	ldr	r2, [r2, #8]
 8001000:	f012 0f1f 	tst.w	r2, #31
 8001004:	d033      	beq.n	800106e <HAL_ADC_Start+0xb2>
 8001006:	6821      	ldr	r1, [r4, #0]
 8001008:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800100c:	d02f      	beq.n	800106e <HAL_ADC_Start+0xb2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800100e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001010:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001014:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001016:	4a29      	ldr	r2, [pc, #164]	; (80010bc <HAL_ADC_Start+0x100>)
 8001018:	4291      	cmp	r1, r2
 800101a:	d038      	beq.n	800108e <HAL_ADC_Start+0xd2>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800101c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800101e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001022:	d041      	beq.n	80010a8 <HAL_ADC_Start+0xec>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001024:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001026:	f022 0206 	bic.w	r2, r2, #6
 800102a:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800102c:	2200      	movs	r2, #0
 800102e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001032:	6822      	ldr	r2, [r4, #0]
 8001034:	211c      	movs	r1, #28
 8001036:	6011      	str	r1, [r2, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001038:	4a1f      	ldr	r2, [pc, #124]	; (80010b8 <HAL_ADC_Start+0xfc>)
 800103a:	6892      	ldr	r2, [r2, #8]
 800103c:	f012 0f1f 	tst.w	r2, #31
 8001040:	d00f      	beq.n	8001062 <HAL_ADC_Start+0xa6>
 8001042:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <HAL_ADC_Start+0xfc>)
 8001044:	6892      	ldr	r2, [r2, #8]
 8001046:	f002 021f 	and.w	r2, r2, #31
 800104a:	2a05      	cmp	r2, #5
 800104c:	d009      	beq.n	8001062 <HAL_ADC_Start+0xa6>
 800104e:	4a1a      	ldr	r2, [pc, #104]	; (80010b8 <HAL_ADC_Start+0xfc>)
 8001050:	6892      	ldr	r2, [r2, #8]
 8001052:	f002 021f 	and.w	r2, r2, #31
 8001056:	2a09      	cmp	r2, #9
 8001058:	d003      	beq.n	8001062 <HAL_ADC_Start+0xa6>
 800105a:	6822      	ldr	r2, [r4, #0]
 800105c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001060:	d128      	bne.n	80010b4 <HAL_ADC_Start+0xf8>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001062:	6821      	ldr	r1, [r4, #0]
 8001064:	688a      	ldr	r2, [r1, #8]
 8001066:	f042 0204 	orr.w	r2, r2, #4
 800106a:	608a      	str	r2, [r1, #8]
 800106c:	e022      	b.n	80010b4 <HAL_ADC_Start+0xf8>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800106e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001070:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001074:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001076:	6822      	ldr	r2, [r4, #0]
 8001078:	68d2      	ldr	r2, [r2, #12]
 800107a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800107e:	d0cd      	beq.n	800101c <HAL_ADC_Start+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001080:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001082:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001086:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800108a:	6462      	str	r2, [r4, #68]	; 0x44
 800108c:	e7c6      	b.n	800101c <HAL_ADC_Start+0x60>
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800108e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001092:	68d2      	ldr	r2, [r2, #12]
 8001094:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001098:	d0c0      	beq.n	800101c <HAL_ADC_Start+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800109a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800109c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80010a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010a4:	6462      	str	r2, [r4, #68]	; 0x44
 80010a6:	e7b9      	b.n	800101c <HAL_ADC_Start+0x60>
        ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	2200      	movs	r2, #0
 80010aa:	64a2      	str	r2, [r4, #72]	; 0x48
 80010ac:	e7be      	b.n	800102c <HAL_ADC_Start+0x70>
      __HAL_UNLOCK(hadc);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	bd10      	pop	{r4, pc}
 80010b8:	50000300 	.word	0x50000300
 80010bc:	50000100 	.word	0x50000100

080010c0 <HAL_ADC_PollForConversion>:
{
 80010c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80010c4:	6946      	ldr	r6, [r0, #20]
 80010c6:	2e08      	cmp	r6, #8
 80010c8:	d00a      	beq.n	80010e0 <HAL_ADC_PollForConversion+0x20>
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80010ca:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <HAL_ADC_PollForConversion+0x114>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f013 0f1f 	tst.w	r3, #31
 80010d2:	d11c      	bne.n	800110e <HAL_ADC_PollForConversion+0x4e>
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80010d4:	6803      	ldr	r3, [r0, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f013 0f01 	tst.w	r3, #1
 80010dc:	d10d      	bne.n	80010fa <HAL_ADC_PollForConversion+0x3a>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80010de:	260c      	movs	r6, #12
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010e0:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <HAL_ADC_PollForConversion+0x114>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f013 0f1f 	tst.w	r3, #31
 80010e8:	d022      	beq.n	8001130 <HAL_ADC_PollForConversion+0x70>
 80010ea:	6803      	ldr	r3, [r0, #0]
 80010ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010f0:	d01e      	beq.n	8001130 <HAL_ADC_PollForConversion+0x70>
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80010f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010f6:	68df      	ldr	r7, [r3, #12]
 80010f8:	e01c      	b.n	8001134 <HAL_ADC_PollForConversion+0x74>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80010fc:	f043 0320 	orr.w	r3, r3, #32
 8001100:	6443      	str	r3, [r0, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001102:	2300      	movs	r3, #0
 8001104:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        return HAL_ERROR;
 8001108:	2001      	movs	r0, #1
 800110a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800110e:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <HAL_ADC_PollForConversion+0x114>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8001116:	d101      	bne.n	800111c <HAL_ADC_PollForConversion+0x5c>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001118:	260c      	movs	r6, #12
 800111a:	e7e1      	b.n	80010e0 <HAL_ADC_PollForConversion+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800111c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800111e:	f043 0320 	orr.w	r3, r3, #32
 8001122:	6443      	str	r3, [r0, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001124:	2300      	movs	r3, #0
 8001126:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        return HAL_ERROR;
 800112a:	2001      	movs	r0, #1
 800112c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001130:	6803      	ldr	r3, [r0, #0]
 8001132:	68df      	ldr	r7, [r3, #12]
 8001134:	460d      	mov	r5, r1
 8001136:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();  
 8001138:	f7ff fd92 	bl	8000c60 <HAL_GetTick>
 800113c:	4680      	mov	r8, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4216      	tst	r6, r2
 8001144:	d113      	bne.n	800116e <HAL_ADC_PollForConversion+0xae>
    if(Timeout != HAL_MAX_DELAY)
 8001146:	f1b5 3fff 	cmp.w	r5, #4294967295
 800114a:	d0f8      	beq.n	800113e <HAL_ADC_PollForConversion+0x7e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800114c:	b12d      	cbz	r5, 800115a <HAL_ADC_PollForConversion+0x9a>
 800114e:	f7ff fd87 	bl	8000c60 <HAL_GetTick>
 8001152:	eba0 0008 	sub.w	r0, r0, r8
 8001156:	4285      	cmp	r5, r0
 8001158:	d2f1      	bcs.n	800113e <HAL_ADC_PollForConversion+0x7e>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800115a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001162:	2300      	movs	r3, #0
 8001164:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001168:	2003      	movs	r0, #3
 800116a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800116e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001174:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800117c:	d11f      	bne.n	80011be <HAL_ADC_PollForConversion+0xfe>
 800117e:	f417 5f00 	tst.w	r7, #8192	; 0x2000
 8001182:	d11c      	bne.n	80011be <HAL_ADC_PollForConversion+0xfe>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	f012 0f08 	tst.w	r2, #8
 800118a:	d018      	beq.n	80011be <HAL_ADC_PollForConversion+0xfe>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	f012 0f04 	tst.w	r2, #4
 8001192:	d10c      	bne.n	80011ae <HAL_ADC_PollForConversion+0xee>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001194:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001196:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800119a:	6462      	str	r2, [r4, #68]	; 0x44
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800119c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800119e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80011a2:	d10c      	bne.n	80011be <HAL_ADC_PollForConversion+0xfe>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80011a6:	f042 0201 	orr.w	r2, r2, #1
 80011aa:	6462      	str	r2, [r4, #68]	; 0x44
 80011ac:	e007      	b.n	80011be <HAL_ADC_PollForConversion+0xfe>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80011b0:	f042 0220 	orr.w	r2, r2, #32
 80011b4:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80011b8:	f042 0201 	orr.w	r2, r2, #1
 80011bc:	64a2      	str	r2, [r4, #72]	; 0x48
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80011be:	f417 4f80 	tst.w	r7, #16384	; 0x4000
 80011c2:	d103      	bne.n	80011cc <HAL_ADC_PollForConversion+0x10c>
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80011c4:	601e      	str	r6, [r3, #0]
  return HAL_OK;
 80011c6:	2000      	movs	r0, #0
 80011c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011cc:	2000      	movs	r0, #0
}
 80011ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011d2:	bf00      	nop
 80011d4:	50000300 	.word	0x50000300

080011d8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80011d8:	6803      	ldr	r3, [r0, #0]
 80011da:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80011dc:	4770      	bx	lr
	...

080011e0 <HAL_ADC_ConfigChannel>:
{
 80011e0:	b470      	push	{r4, r5, r6}
 80011e2:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80011e4:	2200      	movs	r2, #0
 80011e6:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 80011e8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80011ec:	2a01      	cmp	r2, #1
 80011ee:	f000 81ad 	beq.w	800154c <HAL_ADC_ConfigChannel+0x36c>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2201      	movs	r2, #1
 80011f6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011fa:	6800      	ldr	r0, [r0, #0]
 80011fc:	6882      	ldr	r2, [r0, #8]
 80011fe:	f012 0f04 	tst.w	r2, #4
 8001202:	f040 8196 	bne.w	8001532 <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 8001206:	684a      	ldr	r2, [r1, #4]
 8001208:	2a04      	cmp	r2, #4
 800120a:	d831      	bhi.n	8001270 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 800120c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800120e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001212:	0055      	lsls	r5, r2, #1
 8001214:	221f      	movs	r2, #31
 8001216:	40aa      	lsls	r2, r5
 8001218:	ea24 0202 	bic.w	r2, r4, r2
 800121c:	680c      	ldr	r4, [r1, #0]
 800121e:	40ac      	lsls	r4, r5
 8001220:	4322      	orrs	r2, r4
 8001222:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	6882      	ldr	r2, [r0, #8]
 8001228:	f012 0f0c 	tst.w	r2, #12
 800122c:	d168      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800122e:	680a      	ldr	r2, [r1, #0]
 8001230:	2a09      	cmp	r2, #9
 8001232:	d94e      	bls.n	80012d2 <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001234:	6984      	ldr	r4, [r0, #24]
 8001236:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800123a:	3a1e      	subs	r2, #30
 800123c:	2507      	movs	r5, #7
 800123e:	4095      	lsls	r5, r2
 8001240:	ea24 0405 	bic.w	r4, r4, r5
 8001244:	688d      	ldr	r5, [r1, #8]
 8001246:	fa05 f202 	lsl.w	r2, r5, r2
 800124a:	4322      	orrs	r2, r4
 800124c:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800124e:	6948      	ldr	r0, [r1, #20]
 8001250:	681c      	ldr	r4, [r3, #0]
 8001252:	68e2      	ldr	r2, [r4, #12]
 8001254:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001258:	0052      	lsls	r2, r2, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 800125e:	6908      	ldr	r0, [r1, #16]
 8001260:	3801      	subs	r0, #1
 8001262:	2803      	cmp	r0, #3
 8001264:	f200 808f 	bhi.w	8001386 <HAL_ADC_ConfigChannel+0x1a6>
 8001268:	e8df f000 	tbb	[pc, r0]
 800126c:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 8001270:	2a09      	cmp	r2, #9
 8001272:	d80e      	bhi.n	8001292 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001274:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001276:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800127a:	0055      	lsls	r5, r2, #1
 800127c:	3d1e      	subs	r5, #30
 800127e:	221f      	movs	r2, #31
 8001280:	40aa      	lsls	r2, r5
 8001282:	ea24 0202 	bic.w	r2, r4, r2
 8001286:	680c      	ldr	r4, [r1, #0]
 8001288:	fa04 f505 	lsl.w	r5, r4, r5
 800128c:	432a      	orrs	r2, r5
 800128e:	6342      	str	r2, [r0, #52]	; 0x34
 8001290:	e7c8      	b.n	8001224 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8001292:	2a0e      	cmp	r2, #14
 8001294:	d80e      	bhi.n	80012b4 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001296:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001298:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800129c:	0055      	lsls	r5, r2, #1
 800129e:	3d3c      	subs	r5, #60	; 0x3c
 80012a0:	221f      	movs	r2, #31
 80012a2:	40aa      	lsls	r2, r5
 80012a4:	ea24 0202 	bic.w	r2, r4, r2
 80012a8:	680c      	ldr	r4, [r1, #0]
 80012aa:	fa04 f505 	lsl.w	r5, r4, r5
 80012ae:	432a      	orrs	r2, r5
 80012b0:	6382      	str	r2, [r0, #56]	; 0x38
 80012b2:	e7b7      	b.n	8001224 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80012b4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80012b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80012ba:	0055      	lsls	r5, r2, #1
 80012bc:	3d5a      	subs	r5, #90	; 0x5a
 80012be:	221f      	movs	r2, #31
 80012c0:	40aa      	lsls	r2, r5
 80012c2:	ea24 0202 	bic.w	r2, r4, r2
 80012c6:	680c      	ldr	r4, [r1, #0]
 80012c8:	fa04 f505 	lsl.w	r5, r4, r5
 80012cc:	432a      	orrs	r2, r5
 80012ce:	63c2      	str	r2, [r0, #60]	; 0x3c
 80012d0:	e7a8      	b.n	8001224 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012d2:	6944      	ldr	r4, [r0, #20]
 80012d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80012d8:	2507      	movs	r5, #7
 80012da:	4095      	lsls	r5, r2
 80012dc:	ea24 0405 	bic.w	r4, r4, r5
 80012e0:	688d      	ldr	r5, [r1, #8]
 80012e2:	fa05 f202 	lsl.w	r2, r5, r2
 80012e6:	4322      	orrs	r2, r4
 80012e8:	6142      	str	r2, [r0, #20]
 80012ea:	e7b0      	b.n	800124e <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80012ec:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80012ee:	4d98      	ldr	r5, [pc, #608]	; (8001550 <HAL_ADC_ConfigChannel+0x370>)
 80012f0:	4005      	ands	r5, r0
 80012f2:	6808      	ldr	r0, [r1, #0]
 80012f4:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80012f8:	4315      	orrs	r5, r2
 80012fa:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80012fe:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	6882      	ldr	r2, [r0, #8]
 8001304:	f002 0203 	and.w	r2, r2, #3
 8001308:	2a01      	cmp	r2, #1
 800130a:	d06f      	beq.n	80013ec <HAL_ADC_ConfigChannel+0x20c>
 800130c:	2200      	movs	r2, #0
 800130e:	2a00      	cmp	r2, #0
 8001310:	f040 811a 	bne.w	8001548 <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001314:	68cc      	ldr	r4, [r1, #12]
 8001316:	2c01      	cmp	r4, #1
 8001318:	d070      	beq.n	80013fc <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800131a:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 800131e:	680e      	ldr	r6, [r1, #0]
 8001320:	2501      	movs	r5, #1
 8001322:	40b5      	lsls	r5, r6
 8001324:	ea24 0405 	bic.w	r4, r4, r5
 8001328:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800132c:	6809      	ldr	r1, [r1, #0]
 800132e:	2910      	cmp	r1, #16
 8001330:	f000 808d 	beq.w	800144e <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001334:	2911      	cmp	r1, #17
 8001336:	f000 80af 	beq.w	8001498 <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800133a:	2912      	cmp	r1, #18
 800133c:	f000 80b2 	beq.w	80014a4 <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001340:	2000      	movs	r0, #0
 8001342:	e0fb      	b.n	800153c <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001344:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001346:	4d82      	ldr	r5, [pc, #520]	; (8001550 <HAL_ADC_ConfigChannel+0x370>)
 8001348:	4005      	ands	r5, r0
 800134a:	6808      	ldr	r0, [r1, #0]
 800134c:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001350:	4315      	orrs	r5, r2
 8001352:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001356:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 8001358:	e7d2      	b.n	8001300 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800135a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800135c:	4d7c      	ldr	r5, [pc, #496]	; (8001550 <HAL_ADC_ConfigChannel+0x370>)
 800135e:	4005      	ands	r5, r0
 8001360:	6808      	ldr	r0, [r1, #0]
 8001362:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001366:	4315      	orrs	r5, r2
 8001368:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800136c:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 800136e:	e7c7      	b.n	8001300 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001370:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001372:	4877      	ldr	r0, [pc, #476]	; (8001550 <HAL_ADC_ConfigChannel+0x370>)
 8001374:	4028      	ands	r0, r5
 8001376:	680d      	ldr	r5, [r1, #0]
 8001378:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 800137c:	4302      	orrs	r2, r0
 800137e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001382:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8001384:	e7bc      	b.n	8001300 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001386:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001388:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800138c:	6808      	ldr	r0, [r1, #0]
 800138e:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8001392:	d01c      	beq.n	80013ce <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001398:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800139c:	680c      	ldr	r4, [r1, #0]
 800139e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80013a2:	d019      	beq.n	80013d8 <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80013a8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80013ac:	680c      	ldr	r4, [r1, #0]
 80013ae:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80013b2:	d016      	beq.n	80013e2 <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80013b8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80013bc:	680c      	ldr	r4, [r1, #0]
 80013be:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80013c2:	d19d      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80013c4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80013c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013ca:	66c2      	str	r2, [r0, #108]	; 0x6c
 80013cc:	e798      	b.n	8001300 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80013ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80013d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013d4:	6622      	str	r2, [r4, #96]	; 0x60
 80013d6:	e7dd      	b.n	8001394 <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80013d8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80013da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013de:	6642      	str	r2, [r0, #100]	; 0x64
 80013e0:	e7e0      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80013e2:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80013e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013e8:	6682      	str	r2, [r0, #104]	; 0x68
 80013ea:	e7e3      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013ec:	6802      	ldr	r2, [r0, #0]
 80013ee:	f012 0f01 	tst.w	r2, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x218>
 80013f4:	2200      	movs	r2, #0
 80013f6:	e78a      	b.n	800130e <HAL_ADC_ConfigChannel+0x12e>
 80013f8:	2201      	movs	r2, #1
 80013fa:	e788      	b.n	800130e <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013fc:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8001400:	680e      	ldr	r6, [r1, #0]
 8001402:	2501      	movs	r5, #1
 8001404:	40b5      	lsls	r5, r6
 8001406:	432c      	orrs	r4, r5
 8001408:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800140c:	6808      	ldr	r0, [r1, #0]
 800140e:	2809      	cmp	r0, #9
 8001410:	d90e      	bls.n	8001430 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001412:	681e      	ldr	r6, [r3, #0]
 8001414:	69b4      	ldr	r4, [r6, #24]
 8001416:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800141a:	381b      	subs	r0, #27
 800141c:	2507      	movs	r5, #7
 800141e:	4085      	lsls	r5, r0
 8001420:	ea24 0405 	bic.w	r4, r4, r5
 8001424:	688d      	ldr	r5, [r1, #8]
 8001426:	fa05 f000 	lsl.w	r0, r5, r0
 800142a:	4320      	orrs	r0, r4
 800142c:	61b0      	str	r0, [r6, #24]
 800142e:	e77d      	b.n	800132c <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001430:	681e      	ldr	r6, [r3, #0]
 8001432:	6974      	ldr	r4, [r6, #20]
 8001434:	3001      	adds	r0, #1
 8001436:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800143a:	2507      	movs	r5, #7
 800143c:	4085      	lsls	r5, r0
 800143e:	ea24 0405 	bic.w	r4, r4, r5
 8001442:	688d      	ldr	r5, [r1, #8]
 8001444:	fa05 f000 	lsl.w	r0, r5, r0
 8001448:	4320      	orrs	r0, r4
 800144a:	6170      	str	r0, [r6, #20]
 800144c:	e76e      	b.n	800132c <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800144e:	4841      	ldr	r0, [pc, #260]	; (8001554 <HAL_ADC_ConfigChannel+0x374>)
 8001450:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001452:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8001456:	f47f af6d 	bne.w	8001334 <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800145a:	681c      	ldr	r4, [r3, #0]
 800145c:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001460:	d027      	beq.n	80014b2 <HAL_ADC_ConfigChannel+0x2d2>
 8001462:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001466:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001468:	68a0      	ldr	r0, [r4, #8]
 800146a:	f000 0003 	and.w	r0, r0, #3
 800146e:	2801      	cmp	r0, #1
 8001470:	d022      	beq.n	80014b8 <HAL_ADC_ConfigChannel+0x2d8>
 8001472:	2a00      	cmp	r2, #0
 8001474:	d157      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001476:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001478:	b135      	cbz	r5, 8001488 <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800147a:	68a8      	ldr	r0, [r5, #8]
 800147c:	f000 0003 	and.w	r0, r0, #3
 8001480:	2801      	cmp	r0, #1
 8001482:	d01f      	beq.n	80014c4 <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001484:	2a00      	cmp	r2, #0
 8001486:	d14e      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001488:	2910      	cmp	r1, #16
 800148a:	d021      	beq.n	80014d0 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800148c:	2911      	cmp	r1, #17
 800148e:	d039      	beq.n	8001504 <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001490:	2912      	cmp	r1, #18
 8001492:	d041      	beq.n	8001518 <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001494:	2000      	movs	r0, #0
 8001496:	e051      	b.n	800153c <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001498:	482e      	ldr	r0, [pc, #184]	; (8001554 <HAL_ADC_ConfigChannel+0x374>)
 800149a:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800149c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80014a0:	d0db      	beq.n	800145a <HAL_ADC_ConfigChannel+0x27a>
 80014a2:	e74a      	b.n	800133a <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80014a4:	482b      	ldr	r0, [pc, #172]	; (8001554 <HAL_ADC_ConfigChannel+0x374>)
 80014a6:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80014a8:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80014ac:	d0d5      	beq.n	800145a <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ae:	2000      	movs	r0, #0
 80014b0:	e044      	b.n	800153c <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014b2:	4829      	ldr	r0, [pc, #164]	; (8001558 <HAL_ADC_ConfigChannel+0x378>)
 80014b4:	9001      	str	r0, [sp, #4]
 80014b6:	e7d7      	b.n	8001468 <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014b8:	6820      	ldr	r0, [r4, #0]
 80014ba:	f010 0f01 	tst.w	r0, #1
 80014be:	d0d8      	beq.n	8001472 <HAL_ADC_ConfigChannel+0x292>
 80014c0:	2201      	movs	r2, #1
 80014c2:	e7d6      	b.n	8001472 <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014c4:	6828      	ldr	r0, [r5, #0]
 80014c6:	f010 0f01 	tst.w	r0, #1
 80014ca:	d0db      	beq.n	8001484 <HAL_ADC_ConfigChannel+0x2a4>
 80014cc:	2201      	movs	r2, #1
 80014ce:	e7d9      	b.n	8001484 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014d0:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80014d4:	d1da      	bne.n	800148c <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80014d6:	491f      	ldr	r1, [pc, #124]	; (8001554 <HAL_ADC_ConfigChannel+0x374>)
 80014d8:	688a      	ldr	r2, [r1, #8]
 80014da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014de:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014e0:	4a1e      	ldr	r2, [pc, #120]	; (800155c <HAL_ADC_ConfigChannel+0x37c>)
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	491e      	ldr	r1, [pc, #120]	; (8001560 <HAL_ADC_ConfigChannel+0x380>)
 80014e6:	fbb2 f1f1 	udiv	r1, r2, r1
 80014ea:	220a      	movs	r2, #10
 80014ec:	fb02 f201 	mul.w	r2, r2, r1
 80014f0:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80014f2:	e002      	b.n	80014fa <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 80014f4:	9a00      	ldr	r2, [sp, #0]
 80014f6:	3a01      	subs	r2, #1
 80014f8:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80014fa:	9a00      	ldr	r2, [sp, #0]
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	d1f9      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001500:	2000      	movs	r0, #0
 8001502:	e01b      	b.n	800153c <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001504:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001508:	d1c2      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800150a:	4912      	ldr	r1, [pc, #72]	; (8001554 <HAL_ADC_ConfigChannel+0x374>)
 800150c:	688a      	ldr	r2, [r1, #8]
 800150e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001512:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001514:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001516:	e011      	b.n	800153c <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001518:	490e      	ldr	r1, [pc, #56]	; (8001554 <HAL_ADC_ConfigChannel+0x374>)
 800151a:	688a      	ldr	r2, [r1, #8]
 800151c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001520:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001522:	2000      	movs	r0, #0
 8001524:	e00a      	b.n	800153c <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001526:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001528:	f042 0220 	orr.w	r2, r2, #32
 800152c:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 800152e:	2001      	movs	r0, #1
 8001530:	e004      	b.n	800153c <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001534:	f042 0220 	orr.w	r2, r2, #32
 8001538:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800153a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001542:	b017      	add	sp, #92	; 0x5c
 8001544:	bc70      	pop	{r4, r5, r6}
 8001546:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001548:	2000      	movs	r0, #0
 800154a:	e7f7      	b.n	800153c <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 800154c:	2002      	movs	r0, #2
 800154e:	e7f8      	b.n	8001542 <HAL_ADC_ConfigChannel+0x362>
 8001550:	83fff000 	.word	0x83fff000
 8001554:	50000300 	.word	0x50000300
 8001558:	50000100 	.word	0x50000100
 800155c:	2000006c 	.word	0x2000006c
 8001560:	000f4240 	.word	0x000f4240

08001564 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8001564:	b470      	push	{r4, r5, r6}
 8001566:	b097      	sub	sp, #92	; 0x5c
 8001568:	4603      	mov	r3, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800156a:	6802      	ldr	r2, [r0, #0]
 800156c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001570:	d040      	beq.n	80015f4 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8001572:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001576:	9001      	str	r0, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001578:	9801      	ldr	r0, [sp, #4]
 800157a:	2800      	cmp	r0, #0
 800157c:	f000 8088 	beq.w	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
  __HAL_LOCK(hadc);
 8001580:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
 8001584:	2c01      	cmp	r4, #1
 8001586:	f000 8085 	beq.w	8001694 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800158a:	2401      	movs	r4, #1
 800158c:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001590:	6892      	ldr	r2, [r2, #8]
 8001592:	f012 0f04 	tst.w	r2, #4
 8001596:	d168      	bne.n	800166a <HAL_ADCEx_MultiModeConfigChannel+0x106>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001598:	6882      	ldr	r2, [r0, #8]
 800159a:	f012 0f04 	tst.w	r2, #4
 800159e:	d164      	bne.n	800166a <HAL_ADCEx_MultiModeConfigChannel+0x106>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80015a0:	680a      	ldr	r2, [r1, #0]
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d037      	beq.n	8001616 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80015a6:	4d3c      	ldr	r5, [pc, #240]	; (8001698 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80015a8:	68aa      	ldr	r2, [r5, #8]
 80015aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015ae:	684c      	ldr	r4, [r1, #4]
 80015b0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80015b2:	ea44 3446 	orr.w	r4, r4, r6, lsl #13
 80015b6:	4322      	orrs	r2, r4
 80015b8:	60aa      	str	r2, [r5, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015ba:	681c      	ldr	r4, [r3, #0]
 80015bc:	68a2      	ldr	r2, [r4, #8]
 80015be:	f002 0203 	and.w	r2, r2, #3
 80015c2:	2a01      	cmp	r2, #1
 80015c4:	d019      	beq.n	80015fa <HAL_ADCEx_MultiModeConfigChannel+0x96>
 80015c6:	2200      	movs	r2, #0
 80015c8:	2a00      	cmp	r2, #0
 80015ca:	d159      	bne.n	8001680 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80015cc:	6884      	ldr	r4, [r0, #8]
 80015ce:	f004 0403 	and.w	r4, r4, #3
 80015d2:	2c01      	cmp	r4, #1
 80015d4:	d019      	beq.n	800160a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d154      	bne.n	8001684 <HAL_ADCEx_MultiModeConfigChannel+0x120>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80015da:	4c2f      	ldr	r4, [pc, #188]	; (8001698 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80015dc:	68a2      	ldr	r2, [r4, #8]
 80015de:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80015e2:	f022 020f 	bic.w	r2, r2, #15
 80015e6:	6808      	ldr	r0, [r1, #0]
 80015e8:	6889      	ldr	r1, [r1, #8]
 80015ea:	4301      	orrs	r1, r0
 80015ec:	430a      	orrs	r2, r1
 80015ee:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f0:	2000      	movs	r0, #0
 80015f2:	e03f      	b.n	8001674 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015f4:	4829      	ldr	r0, [pc, #164]	; (800169c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80015f6:	9001      	str	r0, [sp, #4]
 80015f8:	e7be      	b.n	8001578 <HAL_ADCEx_MultiModeConfigChannel+0x14>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015fa:	6822      	ldr	r2, [r4, #0]
 80015fc:	f012 0f01 	tst.w	r2, #1
 8001600:	d101      	bne.n	8001606 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8001602:	2200      	movs	r2, #0
 8001604:	e7e0      	b.n	80015c8 <HAL_ADCEx_MultiModeConfigChannel+0x64>
 8001606:	2201      	movs	r2, #1
 8001608:	e7de      	b.n	80015c8 <HAL_ADCEx_MultiModeConfigChannel+0x64>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800160a:	6800      	ldr	r0, [r0, #0]
 800160c:	f010 0f01 	tst.w	r0, #1
 8001610:	d0e1      	beq.n	80015d6 <HAL_ADCEx_MultiModeConfigChannel+0x72>
 8001612:	2201      	movs	r2, #1
 8001614:	e7df      	b.n	80015d6 <HAL_ADCEx_MultiModeConfigChannel+0x72>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001616:	4920      	ldr	r1, [pc, #128]	; (8001698 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8001618:	688a      	ldr	r2, [r1, #8]
 800161a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800161e:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001620:	6819      	ldr	r1, [r3, #0]
 8001622:	688a      	ldr	r2, [r1, #8]
 8001624:	f002 0203 	and.w	r2, r2, #3
 8001628:	2a01      	cmp	r2, #1
 800162a:	d010      	beq.n	800164e <HAL_ADCEx_MultiModeConfigChannel+0xea>
 800162c:	2200      	movs	r2, #0
 800162e:	bb5a      	cbnz	r2, 8001688 <HAL_ADCEx_MultiModeConfigChannel+0x124>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001630:	6881      	ldr	r1, [r0, #8]
 8001632:	f001 0103 	and.w	r1, r1, #3
 8001636:	2901      	cmp	r1, #1
 8001638:	d011      	beq.n	800165e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800163a:	bb3a      	cbnz	r2, 800168c <HAL_ADCEx_MultiModeConfigChannel+0x128>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800163c:	4916      	ldr	r1, [pc, #88]	; (8001698 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800163e:	688a      	ldr	r2, [r1, #8]
 8001640:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001644:	f022 020f 	bic.w	r2, r2, #15
 8001648:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800164a:	2000      	movs	r0, #0
 800164c:	e012      	b.n	8001674 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800164e:	680a      	ldr	r2, [r1, #0]
 8001650:	f012 0f01 	tst.w	r2, #1
 8001654:	d101      	bne.n	800165a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001656:	2200      	movs	r2, #0
 8001658:	e7e9      	b.n	800162e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800165a:	2201      	movs	r2, #1
 800165c:	e7e7      	b.n	800162e <HAL_ADCEx_MultiModeConfigChannel+0xca>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800165e:	6801      	ldr	r1, [r0, #0]
 8001660:	f011 0f01 	tst.w	r1, #1
 8001664:	d0e9      	beq.n	800163a <HAL_ADCEx_MultiModeConfigChannel+0xd6>
 8001666:	2201      	movs	r2, #1
 8001668:	e7e7      	b.n	800163a <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800166a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800166c:	f042 0220 	orr.w	r2, r2, #32
 8001670:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001672:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 800167a:	b017      	add	sp, #92	; 0x5c
 800167c:	bc70      	pop	{r4, r5, r6}
 800167e:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001680:	2000      	movs	r0, #0
 8001682:	e7f7      	b.n	8001674 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8001684:	2000      	movs	r0, #0
 8001686:	e7f5      	b.n	8001674 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8001688:	2000      	movs	r0, #0
 800168a:	e7f3      	b.n	8001674 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 800168c:	2000      	movs	r0, #0
 800168e:	e7f1      	b.n	8001674 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    return HAL_ERROR;
 8001690:	2001      	movs	r0, #1
 8001692:	e7f2      	b.n	800167a <HAL_ADCEx_MultiModeConfigChannel+0x116>
  __HAL_LOCK(hadc);
 8001694:	2002      	movs	r0, #2
 8001696:	e7f0      	b.n	800167a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001698:	50000300 	.word	0x50000300
 800169c:	50000100 	.word	0x50000100

080016a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016a8:	041b      	lsls	r3, r3, #16
 80016aa:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80016ac:	0200      	lsls	r0, r0, #8
 80016ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80016b4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80016b8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80016bc:	60d0      	str	r0, [r2, #12]
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_NVIC_SetPriority+0x5c>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ce:	f1c3 0407 	rsb	r4, r3, #7
 80016d2:	2c04      	cmp	r4, #4
 80016d4:	bf28      	it	cs
 80016d6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d8:	1d1d      	adds	r5, r3, #4
 80016da:	2d06      	cmp	r5, #6
 80016dc:	d917      	bls.n	800170e <HAL_NVIC_SetPriority+0x4a>
 80016de:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	2501      	movs	r5, #1
 80016e2:	fa05 f404 	lsl.w	r4, r5, r4
 80016e6:	3c01      	subs	r4, #1
 80016e8:	4021      	ands	r1, r4
 80016ea:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ec:	fa05 f303 	lsl.w	r3, r5, r3
 80016f0:	3b01      	subs	r3, #1
 80016f2:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80016f6:	2800      	cmp	r0, #0
 80016f8:	db0b      	blt.n	8001712 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	0109      	lsls	r1, r1, #4
 80016fc:	b2c9      	uxtb	r1, r1
 80016fe:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001702:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001706:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800170a:	bc30      	pop	{r4, r5}
 800170c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170e:	2300      	movs	r3, #0
 8001710:	e7e6      	b.n	80016e0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	f000 000f 	and.w	r0, r0, #15
 8001716:	0109      	lsls	r1, r1, #4
 8001718:	b2c9      	uxtb	r1, r1
 800171a:	4b02      	ldr	r3, [pc, #8]	; (8001724 <HAL_NVIC_SetPriority+0x60>)
 800171c:	5419      	strb	r1, [r3, r0]
 800171e:	e7f4      	b.n	800170a <HAL_NVIC_SetPriority+0x46>
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	e000ed14 	.word	0xe000ed14

08001728 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001728:	0942      	lsrs	r2, r0, #5
 800172a:	f000 001f 	and.w	r0, r0, #31
 800172e:	2301      	movs	r3, #1
 8001730:	fa03 f000 	lsl.w	r0, r3, r0
 8001734:	4b01      	ldr	r3, [pc, #4]	; (800173c <HAL_NVIC_EnableIRQ+0x14>)
 8001736:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100

08001740 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	3801      	subs	r0, #1
 8001742:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001746:	d20a      	bcs.n	800175e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_SYSTICK_Config+0x24>)
 800174a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	21f0      	movs	r1, #240	; 0xf0
 800174e:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_SYSTICK_Config+0x28>)
 8001750:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001754:	2000      	movs	r0, #0
 8001756:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800176c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800176e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001772:	2b02      	cmp	r3, #2
 8001774:	d003      	beq.n	800177e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001776:	2304      	movs	r3, #4
 8001778:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800177a:	2001      	movs	r0, #1
 800177c:	bd08      	pop	{r3, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800177e:	6802      	ldr	r2, [r0, #0]
 8001780:	6813      	ldr	r3, [r2, #0]
 8001782:	f023 030e 	bic.w	r3, r3, #14
 8001786:	6013      	str	r3, [r2, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001788:	6802      	ldr	r2, [r0, #0]
 800178a:	6813      	ldr	r3, [r2, #0]
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6013      	str	r3, [r2, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001792:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001794:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001796:	2201      	movs	r2, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	604b      	str	r3, [r1, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800179e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a2:	2300      	movs	r3, #0
 80017a4:	f880 3020 	strb.w	r3, [r0, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80017a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80017aa:	b113      	cbz	r3, 80017b2 <HAL_DMA_Abort_IT+0x46>
    {
      hdma->XferAbortCallback(hdma);
 80017ac:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80017ae:	2000      	movs	r0, #0
 80017b0:	bd08      	pop	{r3, pc}
 80017b2:	2000      	movs	r0, #0
    } 
  }
  return status;
}
 80017b4:	bd08      	pop	{r3, pc}
	...

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80017bc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80017be:	e088      	b.n	80018d2 <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017c0:	08de      	lsrs	r6, r3, #3
 80017c2:	3608      	adds	r6, #8
 80017c4:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017c8:	f003 0e07 	and.w	lr, r3, #7
 80017cc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80017d0:	270f      	movs	r7, #15
 80017d2:	fa07 f70e 	lsl.w	r7, r7, lr
 80017d6:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017da:	690f      	ldr	r7, [r1, #16]
 80017dc:	fa07 f70e 	lsl.w	r7, r7, lr
 80017e0:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 80017e2:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 80017e6:	e083      	b.n	80018f0 <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017ea:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ec:	68cf      	ldr	r7, [r1, #12]
 80017ee:	fa07 f70e 	lsl.w	r7, r7, lr
 80017f2:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80017f4:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f8:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017fc:	684e      	ldr	r6, [r1, #4]
 80017fe:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001802:	409e      	lsls	r6, r3
 8001804:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001806:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001808:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800180a:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800180c:	688d      	ldr	r5, [r1, #8]
 800180e:	fa05 f50e 	lsl.w	r5, r5, lr
 8001812:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001814:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001816:	684c      	ldr	r4, [r1, #4]
 8001818:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800181c:	d058      	beq.n	80018d0 <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	4c47      	ldr	r4, [pc, #284]	; (800193c <HAL_GPIO_Init+0x184>)
 8001820:	69a5      	ldr	r5, [r4, #24]
 8001822:	f045 0501 	orr.w	r5, r5, #1
 8001826:	61a5      	str	r5, [r4, #24]
 8001828:	69a4      	ldr	r4, [r4, #24]
 800182a:	f004 0401 	and.w	r4, r4, #1
 800182e:	9401      	str	r4, [sp, #4]
 8001830:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8001832:	089d      	lsrs	r5, r3, #2
 8001834:	1cae      	adds	r6, r5, #2
 8001836:	4c42      	ldr	r4, [pc, #264]	; (8001940 <HAL_GPIO_Init+0x188>)
 8001838:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800183c:	f003 0603 	and.w	r6, r3, #3
 8001840:	00b6      	lsls	r6, r6, #2
 8001842:	270f      	movs	r7, #15
 8001844:	40b7      	lsls	r7, r6
 8001846:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800184a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800184e:	d06c      	beq.n	800192a <HAL_GPIO_Init+0x172>
 8001850:	4f3c      	ldr	r7, [pc, #240]	; (8001944 <HAL_GPIO_Init+0x18c>)
 8001852:	42b8      	cmp	r0, r7
 8001854:	d06b      	beq.n	800192e <HAL_GPIO_Init+0x176>
 8001856:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800185a:	42b8      	cmp	r0, r7
 800185c:	d069      	beq.n	8001932 <HAL_GPIO_Init+0x17a>
 800185e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001862:	42b8      	cmp	r0, r7
 8001864:	d05f      	beq.n	8001926 <HAL_GPIO_Init+0x16e>
 8001866:	2705      	movs	r7, #5
 8001868:	fa07 f606 	lsl.w	r6, r7, r6
 800186c:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 800186e:	3502      	adds	r5, #2
 8001870:	4e33      	ldr	r6, [pc, #204]	; (8001940 <HAL_GPIO_Init+0x188>)
 8001872:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001876:	4c34      	ldr	r4, [pc, #208]	; (8001948 <HAL_GPIO_Init+0x190>)
 8001878:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800187a:	43d4      	mvns	r4, r2
 800187c:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001880:	684f      	ldr	r7, [r1, #4]
 8001882:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001886:	d001      	beq.n	800188c <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8001888:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 800188c:	4d2e      	ldr	r5, [pc, #184]	; (8001948 <HAL_GPIO_Init+0x190>)
 800188e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001890:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8001892:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001896:	684f      	ldr	r7, [r1, #4]
 8001898:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800189c:	d001      	beq.n	80018a2 <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 800189e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 80018a2:	4d29      	ldr	r5, [pc, #164]	; (8001948 <HAL_GPIO_Init+0x190>)
 80018a4:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a6:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 80018a8:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ac:	684f      	ldr	r7, [r1, #4]
 80018ae:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80018b2:	d001      	beq.n	80018b8 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 80018b4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 80018b8:	4d23      	ldr	r5, [pc, #140]	; (8001948 <HAL_GPIO_Init+0x190>)
 80018ba:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80018bc:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 80018be:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c0:	684e      	ldr	r6, [r1, #4]
 80018c2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80018c6:	d001      	beq.n	80018cc <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 80018c8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 80018cc:	4a1e      	ldr	r2, [pc, #120]	; (8001948 <HAL_GPIO_Init+0x190>)
 80018ce:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 80018d0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80018d2:	680a      	ldr	r2, [r1, #0]
 80018d4:	fa32 f403 	lsrs.w	r4, r2, r3
 80018d8:	d02d      	beq.n	8001936 <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80018da:	2501      	movs	r5, #1
 80018dc:	409d      	lsls	r5, r3
    if(iocurrent)
 80018de:	402a      	ands	r2, r5
 80018e0:	d0f6      	beq.n	80018d0 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e2:	684c      	ldr	r4, [r1, #4]
 80018e4:	2c02      	cmp	r4, #2
 80018e6:	f43f af6b 	beq.w	80017c0 <HAL_GPIO_Init+0x8>
 80018ea:	2c12      	cmp	r4, #18
 80018ec:	f43f af68 	beq.w	80017c0 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 80018f0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018f2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80018f6:	2403      	movs	r4, #3
 80018f8:	fa04 f40e 	lsl.w	r4, r4, lr
 80018fc:	43e4      	mvns	r4, r4
 80018fe:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001900:	684f      	ldr	r7, [r1, #4]
 8001902:	f007 0703 	and.w	r7, r7, #3
 8001906:	fa07 f70e 	lsl.w	r7, r7, lr
 800190a:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800190c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800190e:	684e      	ldr	r6, [r1, #4]
 8001910:	1e77      	subs	r7, r6, #1
 8001912:	2f01      	cmp	r7, #1
 8001914:	f67f af68 	bls.w	80017e8 <HAL_GPIO_Init+0x30>
 8001918:	2e11      	cmp	r6, #17
 800191a:	f43f af65 	beq.w	80017e8 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191e:	2e12      	cmp	r6, #18
 8001920:	f47f af72 	bne.w	8001808 <HAL_GPIO_Init+0x50>
 8001924:	e760      	b.n	80017e8 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001926:	2703      	movs	r7, #3
 8001928:	e79e      	b.n	8001868 <HAL_GPIO_Init+0xb0>
 800192a:	2700      	movs	r7, #0
 800192c:	e79c      	b.n	8001868 <HAL_GPIO_Init+0xb0>
 800192e:	2701      	movs	r7, #1
 8001930:	e79a      	b.n	8001868 <HAL_GPIO_Init+0xb0>
 8001932:	2702      	movs	r7, #2
 8001934:	e798      	b.n	8001868 <HAL_GPIO_Init+0xb0>
  }
}
 8001936:	b003      	add	sp, #12
 8001938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	40010000 	.word	0x40010000
 8001944:	48000400 	.word	0x48000400
 8001948:	40010400 	.word	0x40010400

0800194c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800194c:	b90a      	cbnz	r2, 8001952 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800194e:	6281      	str	r1, [r0, #40]	; 0x28
 8001950:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001952:	6181      	str	r1, [r0, #24]
 8001954:	4770      	bx	lr

08001956 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001956:	6803      	ldr	r3, [r0, #0]
 8001958:	699a      	ldr	r2, [r3, #24]
 800195a:	f012 0f02 	tst.w	r2, #2
 800195e:	d001      	beq.n	8001964 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001960:	2200      	movs	r2, #0
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001964:	6803      	ldr	r3, [r0, #0]
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	f012 0f01 	tst.w	r2, #1
 800196c:	d103      	bne.n	8001976 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800196e:	699a      	ldr	r2, [r3, #24]
 8001970:	f042 0201 	orr.w	r2, r2, #1
 8001974:	619a      	str	r2, [r3, #24]
 8001976:	4770      	bx	lr

08001978 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001978:	b470      	push	{r4, r5, r6}
 800197a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800197c:	6806      	ldr	r6, [r0, #0]
 800197e:	6870      	ldr	r0, [r6, #4]
 8001980:	0d6c      	lsrs	r4, r5, #21
 8001982:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001986:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800198a:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800198e:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001992:	f044 0403 	orr.w	r4, r4, #3
 8001996:	ea20 0004 	bic.w	r0, r0, r4
 800199a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800199e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80019a2:	4319      	orrs	r1, r3
 80019a4:	4329      	orrs	r1, r5
 80019a6:	4308      	orrs	r0, r1
 80019a8:	6070      	str	r0, [r6, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80019aa:	bc70      	pop	{r4, r5, r6}
 80019ac:	4770      	bx	lr

080019ae <I2C_IsAcknowledgeFailed>:
{
 80019ae:	b570      	push	{r4, r5, r6, lr}
 80019b0:	4604      	mov	r4, r0
 80019b2:	460d      	mov	r5, r1
 80019b4:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019b6:	6803      	ldr	r3, [r0, #0]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f013 0f10 	tst.w	r3, #16
 80019be:	d017      	beq.n	80019f0 <I2C_IsAcknowledgeFailed+0x42>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019c0:	6823      	ldr	r3, [r4, #0]
 80019c2:	699a      	ldr	r2, [r3, #24]
 80019c4:	f012 0f20 	tst.w	r2, #32
 80019c8:	d114      	bne.n	80019f4 <I2C_IsAcknowledgeFailed+0x46>
      if (Timeout != HAL_MAX_DELAY)
 80019ca:	f1b5 3fff 	cmp.w	r5, #4294967295
 80019ce:	d0f7      	beq.n	80019c0 <I2C_IsAcknowledgeFailed+0x12>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80019d0:	b125      	cbz	r5, 80019dc <I2C_IsAcknowledgeFailed+0x2e>
 80019d2:	f7ff f945 	bl	8000c60 <HAL_GetTick>
 80019d6:	1b80      	subs	r0, r0, r6
 80019d8:	4285      	cmp	r5, r0
 80019da:	d2f1      	bcs.n	80019c0 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->State = HAL_I2C_STATE_READY;
 80019dc:	2320      	movs	r3, #32
 80019de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80019e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 80019ec:	2003      	movs	r0, #3
 80019ee:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80019f0:	2000      	movs	r0, #0
 80019f2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f4:	2210      	movs	r2, #16
 80019f6:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	2520      	movs	r5, #32
 80019fc:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80019fe:	4620      	mov	r0, r4
 8001a00:	f7ff ffa9 	bl	8001956 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001a04:	6822      	ldr	r2, [r4, #0]
 8001a06:	6853      	ldr	r3, [r2, #4]
 8001a08:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001a0c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001a10:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a1e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001a28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001a2c:	2001      	movs	r0, #1
}
 8001a2e:	bd70      	pop	{r4, r5, r6, pc}

08001a30 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001a30:	b570      	push	{r4, r5, r6, lr}
 8001a32:	4604      	mov	r4, r0
 8001a34:	460d      	mov	r5, r1
 8001a36:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f013 0f02 	tst.w	r3, #2
 8001a40:	d11c      	bne.n	8001a7c <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a42:	4632      	mov	r2, r6
 8001a44:	4629      	mov	r1, r5
 8001a46:	4620      	mov	r0, r4
 8001a48:	f7ff ffb1 	bl	80019ae <I2C_IsAcknowledgeFailed>
 8001a4c:	b9c0      	cbnz	r0, 8001a80 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001a4e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001a52:	d0f1      	beq.n	8001a38 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a54:	b125      	cbz	r5, 8001a60 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8001a56:	f7ff f903 	bl	8000c60 <HAL_GetTick>
 8001a5a:	1b80      	subs	r0, r0, r6
 8001a5c:	4285      	cmp	r5, r0
 8001a5e:	d2eb      	bcs.n	8001a38 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a62:	f043 0320 	orr.w	r3, r3, #32
 8001a66:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a68:	2320      	movs	r3, #32
 8001a6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001a74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001a78:	2003      	movs	r0, #3
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001a80:	2001      	movs	r0, #1
}
 8001a82:	bd70      	pop	{r4, r5, r6, pc}

08001a84 <I2C_WaitOnFlagUntilTimeout>:
{
 8001a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a86:	4605      	mov	r5, r0
 8001a88:	460f      	mov	r7, r1
 8001a8a:	4616      	mov	r6, r2
 8001a8c:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a8e:	682b      	ldr	r3, [r5, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	ea37 0303 	bics.w	r3, r7, r3
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	42b3      	cmp	r3, r6
 8001a9e:	d113      	bne.n	8001ac8 <I2C_WaitOnFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8001aa0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001aa4:	d0f3      	beq.n	8001a8e <I2C_WaitOnFlagUntilTimeout+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001aa6:	b12c      	cbz	r4, 8001ab4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001aa8:	f7ff f8da 	bl	8000c60 <HAL_GetTick>
 8001aac:	9b06      	ldr	r3, [sp, #24]
 8001aae:	1ac0      	subs	r0, r0, r3
 8001ab0:	4284      	cmp	r4, r0
 8001ab2:	d2ec      	bcs.n	8001a8e <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->State = HAL_I2C_STATE_READY;
 8001ab4:	2320      	movs	r3, #32
 8001ab6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001ac0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8001ac8:	2000      	movs	r0, #0
}
 8001aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001acc <I2C_RequestMemoryWrite>:
{
 8001acc:	b570      	push	{r4, r5, r6, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	4604      	mov	r4, r0
 8001ad2:	4616      	mov	r6, r2
 8001ad4:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <I2C_RequestMemoryWrite+0x84>)
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ade:	b2ea      	uxtb	r2, r5
 8001ae0:	f7ff ff4a 	bl	8001978 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae4:	9a07      	ldr	r2, [sp, #28]
 8001ae6:	9906      	ldr	r1, [sp, #24]
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f7ff ffa1 	bl	8001a30 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aee:	b140      	cbz	r0, 8001b02 <I2C_RequestMemoryWrite+0x36>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001af0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d003      	beq.n	8001afe <I2C_RequestMemoryWrite+0x32>
      return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	b002      	add	sp, #8
 8001afc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e7fa      	b.n	8001af8 <I2C_RequestMemoryWrite+0x2c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b02:	2d01      	cmp	r5, #1
 8001b04:	d00d      	beq.n	8001b22 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	0a32      	lsrs	r2, r6, #8
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b0c:	9a07      	ldr	r2, [sp, #28]
 8001b0e:	9906      	ldr	r1, [sp, #24]
 8001b10:	4620      	mov	r0, r4
 8001b12:	f7ff ff8d 	bl	8001a30 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b16:	b1b0      	cbz	r0, 8001b46 <I2C_RequestMemoryWrite+0x7a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d011      	beq.n	8001b42 <I2C_RequestMemoryWrite+0x76>
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e7ea      	b.n	8001af8 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	b2f6      	uxtb	r6, r6
 8001b26:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001b28:	9b07      	ldr	r3, [sp, #28]
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	9b06      	ldr	r3, [sp, #24]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7ff ffa6 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	d0dc      	beq.n	8001af8 <I2C_RequestMemoryWrite+0x2c>
    return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e7da      	b.n	8001af8 <I2C_RequestMemoryWrite+0x2c>
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e7d8      	b.n	8001af8 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	b2f6      	uxtb	r6, r6
 8001b4a:	629e      	str	r6, [r3, #40]	; 0x28
 8001b4c:	e7ec      	b.n	8001b28 <I2C_RequestMemoryWrite+0x5c>
 8001b4e:	bf00      	nop
 8001b50:	80002000 	.word	0x80002000

08001b54 <I2C_RequestMemoryRead>:
{
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	4604      	mov	r4, r0
 8001b5a:	4616      	mov	r6, r2
 8001b5c:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <I2C_RequestMemoryRead+0x80>)
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2300      	movs	r3, #0
 8001b64:	b2ea      	uxtb	r2, r5
 8001b66:	f7ff ff07 	bl	8001978 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b6a:	9a07      	ldr	r2, [sp, #28]
 8001b6c:	9906      	ldr	r1, [sp, #24]
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f7ff ff5e 	bl	8001a30 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b74:	b140      	cbz	r0, 8001b88 <I2C_RequestMemoryRead+0x34>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d003      	beq.n	8001b84 <I2C_RequestMemoryRead+0x30>
      return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	b002      	add	sp, #8
 8001b82:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e7fa      	b.n	8001b7e <I2C_RequestMemoryRead+0x2a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b88:	2d01      	cmp	r5, #1
 8001b8a:	d00d      	beq.n	8001ba8 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	0a32      	lsrs	r2, r6, #8
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b92:	9a07      	ldr	r2, [sp, #28]
 8001b94:	9906      	ldr	r1, [sp, #24]
 8001b96:	4620      	mov	r0, r4
 8001b98:	f7ff ff4a 	bl	8001a30 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b9c:	b1b0      	cbz	r0, 8001bcc <I2C_RequestMemoryRead+0x78>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d011      	beq.n	8001bc8 <I2C_RequestMemoryRead+0x74>
        return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e7ea      	b.n	8001b7e <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	b2f6      	uxtb	r6, r6
 8001bac:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001bae:	9b07      	ldr	r3, [sp, #28]
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	9b06      	ldr	r3, [sp, #24]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2140      	movs	r1, #64	; 0x40
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f7ff ff63 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2800      	cmp	r0, #0
 8001bc2:	d0dc      	beq.n	8001b7e <I2C_RequestMemoryRead+0x2a>
    return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e7da      	b.n	8001b7e <I2C_RequestMemoryRead+0x2a>
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e7d8      	b.n	8001b7e <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	b2f6      	uxtb	r6, r6
 8001bd0:	629e      	str	r6, [r3, #40]	; 0x28
 8001bd2:	e7ec      	b.n	8001bae <I2C_RequestMemoryRead+0x5a>
 8001bd4:	80002000 	.word	0x80002000

08001bd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001bd8:	b570      	push	{r4, r5, r6, lr}
 8001bda:	4605      	mov	r5, r0
 8001bdc:	460c      	mov	r4, r1
 8001bde:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be0:	682b      	ldr	r3, [r5, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f013 0f20 	tst.w	r3, #32
 8001be8:	d119      	bne.n	8001c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bea:	4632      	mov	r2, r6
 8001bec:	4621      	mov	r1, r4
 8001bee:	4628      	mov	r0, r5
 8001bf0:	f7ff fedd 	bl	80019ae <I2C_IsAcknowledgeFailed>
 8001bf4:	b9a8      	cbnz	r0, 8001c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bf6:	b124      	cbz	r4, 8001c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 8001bf8:	f7ff f832 	bl	8000c60 <HAL_GetTick>
 8001bfc:	1b80      	subs	r0, r0, r6
 8001bfe:	4284      	cmp	r4, r0
 8001c00:	d2ee      	bcs.n	8001be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c02:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001c04:	f043 0320 	orr.w	r3, r3, #32
 8001c08:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001c16:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_TIMEOUT;
 8001c1a:	2003      	movs	r0, #3
 8001c1c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001c1e:	2000      	movs	r0, #0
 8001c20:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001c22:	2001      	movs	r0, #1
}
 8001c24:	bd70      	pop	{r4, r5, r6, pc}

08001c26 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001c26:	b570      	push	{r4, r5, r6, lr}
 8001c28:	4604      	mov	r4, r0
 8001c2a:	460d      	mov	r5, r1
 8001c2c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f013 0f04 	tst.w	r3, #4
 8001c36:	d13d      	bne.n	8001cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c38:	4632      	mov	r2, r6
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f7ff feb6 	bl	80019ae <I2C_IsAcknowledgeFailed>
 8001c42:	4601      	mov	r1, r0
 8001c44:	2800      	cmp	r0, #0
 8001c46:	d137      	bne.n	8001cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x92>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	699a      	ldr	r2, [r3, #24]
 8001c4c:	f012 0f20 	tst.w	r2, #32
 8001c50:	d112      	bne.n	8001c78 <I2C_WaitOnRXNEFlagUntilTimeout+0x52>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c52:	b125      	cbz	r5, 8001c5e <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
 8001c54:	f7ff f804 	bl	8000c60 <HAL_GetTick>
 8001c58:	1b80      	subs	r0, r0, r6
 8001c5a:	4285      	cmp	r5, r0
 8001c5c:	d2e7      	bcs.n	8001c2e <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c60:	f043 0320 	orr.w	r3, r3, #32
 8001c64:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c66:	2320      	movs	r3, #32
 8001c68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 8001c72:	2103      	movs	r1, #3
}
 8001c74:	4608      	mov	r0, r1
 8001c76:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	f012 0f04 	tst.w	r2, #4
 8001c7e:	d002      	beq.n	8001c86 <I2C_WaitOnRXNEFlagUntilTimeout+0x60>
 8001c80:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001c82:	2a00      	cmp	r2, #0
 8001c84:	d1f6      	bne.n	8001c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c86:	2220      	movs	r2, #32
 8001c88:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001c8a:	6821      	ldr	r1, [r4, #0]
 8001c8c:	684b      	ldr	r3, [r1, #4]
 8001c8e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001c92:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001c96:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ca4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001cac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	e7df      	b.n	8001c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	e7dd      	b.n	8001c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      return HAL_ERROR;
 8001cb8:	2101      	movs	r1, #1
 8001cba:	e7db      	b.n	8001c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>

08001cbc <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001cbc:	2800      	cmp	r0, #0
 8001cbe:	d059      	beq.n	8001d74 <HAL_I2C_Init+0xb8>
{
 8001cc0:	b510      	push	{r4, lr}
 8001cc2:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cc4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d043      	beq.n	8001d54 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ccc:	2324      	movs	r3, #36	; 0x24
 8001cce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001cd2:	6822      	ldr	r2, [r4, #0]
 8001cd4:	6813      	ldr	r3, [r2, #0]
 8001cd6:	f023 0301 	bic.w	r3, r3, #1
 8001cda:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cdc:	6822      	ldr	r2, [r4, #0]
 8001cde:	6863      	ldr	r3, [r4, #4]
 8001ce0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001ce4:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ce6:	6822      	ldr	r2, [r4, #0]
 8001ce8:	6893      	ldr	r3, [r2, #8]
 8001cea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001cee:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cf0:	68e3      	ldr	r3, [r4, #12]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d033      	beq.n	8001d5e <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cf6:	6822      	ldr	r2, [r4, #0]
 8001cf8:	68a3      	ldr	r3, [r4, #8]
 8001cfa:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001cfe:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d00:	68e3      	ldr	r3, [r4, #12]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d031      	beq.n	8001d6a <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d06:	6822      	ldr	r2, [r4, #0]
 8001d08:	6853      	ldr	r3, [r2, #4]
 8001d0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d12:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d14:	6822      	ldr	r2, [r4, #0]
 8001d16:	68d3      	ldr	r3, [r2, #12]
 8001d18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d1c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d1e:	6822      	ldr	r2, [r4, #0]
 8001d20:	6923      	ldr	r3, [r4, #16]
 8001d22:	6961      	ldr	r1, [r4, #20]
 8001d24:	430b      	orrs	r3, r1
 8001d26:	69a1      	ldr	r1, [r4, #24]
 8001d28:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d2c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d2e:	6822      	ldr	r2, [r4, #0]
 8001d30:	69e3      	ldr	r3, [r4, #28]
 8001d32:	6a21      	ldr	r1, [r4, #32]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001d38:	6822      	ldr	r2, [r4, #0]
 8001d3a:	6813      	ldr	r3, [r2, #0]
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d42:	2000      	movs	r0, #0
 8001d44:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d46:	2320      	movs	r3, #32
 8001d48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d4c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001d52:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001d54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001d58:	f004 fae4 	bl	8006324 <HAL_I2C_MspInit>
 8001d5c:	e7b6      	b.n	8001ccc <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d5e:	6822      	ldr	r2, [r4, #0]
 8001d60:	68a3      	ldr	r3, [r4, #8]
 8001d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d66:	6093      	str	r3, [r2, #8]
 8001d68:	e7ca      	b.n	8001d00 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	e7c8      	b.n	8001d06 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001d74:	2001      	movs	r0, #1
 8001d76:	4770      	bx	lr

08001d78 <HAL_I2C_Master_Transmit>:
{
 8001d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d7c:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d7e:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8001d82:	b2ed      	uxtb	r5, r5
 8001d84:	2d20      	cmp	r5, #32
 8001d86:	d004      	beq.n	8001d92 <HAL_I2C_Master_Transmit+0x1a>
    return HAL_BUSY;
 8001d88:	2302      	movs	r3, #2
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	b003      	add	sp, #12
 8001d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8001d92:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001d96:	2c01      	cmp	r4, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_I2C_Master_Transmit+0x26>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e7f5      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x12>
 8001d9e:	4698      	mov	r8, r3
 8001da0:	4617      	mov	r7, r2
 8001da2:	460d      	mov	r5, r1
 8001da4:	4604      	mov	r4, r0
 8001da6:	f04f 0901 	mov.w	r9, #1
 8001daa:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001dae:	f7fe ff57 	bl	8000c60 <HAL_GetTick>
 8001db2:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001db4:	9000      	str	r0, [sp, #0]
 8001db6:	2319      	movs	r3, #25
 8001db8:	464a      	mov	r2, r9
 8001dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	f7ff fe60 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 8001dc4:	b108      	cbz	r0, 8001dca <HAL_I2C_Master_Transmit+0x52>
      return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e7df      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x12>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dca:	2321      	movs	r3, #33	; 0x21
 8001dcc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dd0:	2310      	movs	r3, #16
 8001dd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001dda:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ddc:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001de0:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001de2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2bff      	cmp	r3, #255	; 0xff
 8001de8:	d90a      	bls.n	8001e00 <HAL_I2C_Master_Transmit+0x88>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dea:	22ff      	movs	r2, #255	; 0xff
 8001dec:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001dee:	4b43      	ldr	r3, [pc, #268]	; (8001efc <HAL_I2C_Master_Transmit+0x184>)
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df6:	4629      	mov	r1, r5
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f7ff fdbd 	bl	8001978 <I2C_TransferConfig>
 8001dfe:	e01f      	b.n	8001e40 <HAL_I2C_Master_Transmit+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 8001e00:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e02:	b292      	uxth	r2, r2
 8001e04:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001e06:	4b3d      	ldr	r3, [pc, #244]	; (8001efc <HAL_I2C_Master_Transmit+0x184>)
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	4629      	mov	r1, r5
 8001e12:	4620      	mov	r0, r4
 8001e14:	f7ff fdb0 	bl	8001978 <I2C_TransferConfig>
 8001e18:	e012      	b.n	8001e40 <HAL_I2C_Master_Transmit+0xc8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d001      	beq.n	8001e24 <HAL_I2C_Master_Transmit+0xac>
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e7b2      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x12>
          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e7b0      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x12>
          hi2c->XferSize = hi2c->XferCount;
 8001e28:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e2a:	b292      	uxth	r2, r2
 8001e2c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	4629      	mov	r1, r5
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f7ff fd9c 	bl	8001978 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d032      	beq.n	8001eae <HAL_I2C_Master_Transmit+0x136>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e48:	4632      	mov	r2, r6
 8001e4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7ff fdef 	bl	8001a30 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e52:	2800      	cmp	r0, #0
 8001e54:	d1e1      	bne.n	8001e1a <HAL_I2C_Master_Transmit+0xa2>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001e56:	6822      	ldr	r2, [r4, #0]
 8001e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e5a:	1c59      	adds	r1, r3, #1
 8001e5c:	6261      	str	r1, [r4, #36]	; 0x24
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001e62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001e6c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1e3      	bne.n	8001e40 <HAL_I2C_Master_Transmit+0xc8>
 8001e78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0df      	beq.n	8001e40 <HAL_I2C_Master_Transmit+0xc8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e80:	9600      	str	r6, [sp, #0]
 8001e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e84:	2200      	movs	r2, #0
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7ff fdfb 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 8001e8e:	bb90      	cbnz	r0, 8001ef6 <HAL_I2C_Master_Transmit+0x17e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2bff      	cmp	r3, #255	; 0xff
 8001e96:	d9c7      	bls.n	8001e28 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e98:	22ff      	movs	r2, #255	; 0xff
 8001e9a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f7ff fd66 	bl	8001978 <I2C_TransferConfig>
 8001eac:	e7c8      	b.n	8001e40 <HAL_I2C_Master_Transmit+0xc8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eae:	4632      	mov	r2, r6
 8001eb0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f7ff fe90 	bl	8001bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	b130      	cbz	r0, 8001eca <HAL_I2C_Master_Transmit+0x152>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ebc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d001      	beq.n	8001ec6 <HAL_I2C_Master_Transmit+0x14e>
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e761      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x12>
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e75f      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x12>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eca:	6822      	ldr	r2, [r4, #0]
 8001ecc:	2120      	movs	r1, #32
 8001ece:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8001ed0:	6820      	ldr	r0, [r4, #0]
 8001ed2:	6842      	ldr	r2, [r0, #4]
 8001ed4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001ed8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001edc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001ee0:	f022 0201 	bic.w	r2, r2, #1
 8001ee4:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ee6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001eea:	2200      	movs	r2, #0
 8001eec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001ef0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8001ef4:	e749      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x12>
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e747      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x12>
 8001efa:	bf00      	nop
 8001efc:	80002000 	.word	0x80002000

08001f00 <HAL_I2C_Master_Receive>:
{
 8001f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f04:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f06:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8001f0a:	b2ed      	uxtb	r5, r5
 8001f0c:	2d20      	cmp	r5, #32
 8001f0e:	d004      	beq.n	8001f1a <HAL_I2C_Master_Receive+0x1a>
    return HAL_BUSY;
 8001f10:	2302      	movs	r3, #2
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	b003      	add	sp, #12
 8001f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8001f1a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001f1e:	2c01      	cmp	r4, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_I2C_Master_Receive+0x26>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e7f5      	b.n	8001f12 <HAL_I2C_Master_Receive+0x12>
 8001f26:	4698      	mov	r8, r3
 8001f28:	4617      	mov	r7, r2
 8001f2a:	460d      	mov	r5, r1
 8001f2c:	4604      	mov	r4, r0
 8001f2e:	f04f 0901 	mov.w	r9, #1
 8001f32:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001f36:	f7fe fe93 	bl	8000c60 <HAL_GetTick>
 8001f3a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f3c:	9000      	str	r0, [sp, #0]
 8001f3e:	2319      	movs	r3, #25
 8001f40:	464a      	mov	r2, r9
 8001f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f46:	4620      	mov	r0, r4
 8001f48:	f7ff fd9c 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 8001f4c:	b108      	cbz	r0, 8001f52 <HAL_I2C_Master_Receive+0x52>
      return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e7df      	b.n	8001f12 <HAL_I2C_Master_Receive+0x12>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f52:	2322      	movs	r3, #34	; 0x22
 8001f54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f58:	2310      	movs	r3, #16
 8001f5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001f62:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f64:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f68:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2bff      	cmp	r3, #255	; 0xff
 8001f70:	d90a      	bls.n	8001f88 <HAL_I2C_Master_Receive+0x88>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f72:	22ff      	movs	r2, #255	; 0xff
 8001f74:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001f76:	4b42      	ldr	r3, [pc, #264]	; (8002080 <HAL_I2C_Master_Receive+0x180>)
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f7e:	4629      	mov	r1, r5
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7ff fcf9 	bl	8001978 <I2C_TransferConfig>
 8001f86:	e01f      	b.n	8001fc8 <HAL_I2C_Master_Receive+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 8001f88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f8a:	b292      	uxth	r2, r2
 8001f8c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <HAL_I2C_Master_Receive+0x180>)
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	4629      	mov	r1, r5
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f7ff fcec 	bl	8001978 <I2C_TransferConfig>
 8001fa0:	e012      	b.n	8001fc8 <HAL_I2C_Master_Receive+0xc8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d001      	beq.n	8001fac <HAL_I2C_Master_Receive+0xac>
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e7b2      	b.n	8001f12 <HAL_I2C_Master_Receive+0x12>
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e7b0      	b.n	8001f12 <HAL_I2C_Master_Receive+0x12>
          hi2c->XferSize = hi2c->XferCount;
 8001fb0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001fb2:	b292      	uxth	r2, r2
 8001fb4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f7ff fcd8 	bl	8001978 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001fc8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d031      	beq.n	8002034 <HAL_I2C_Master_Receive+0x134>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd0:	4632      	mov	r2, r6
 8001fd2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7ff fe26 	bl	8001c26 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	d1e1      	bne.n	8001fa2 <HAL_I2C_Master_Receive+0xa2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	6262      	str	r2, [r4, #36]	; 0x24
 8001fe4:	6822      	ldr	r2, [r4, #0]
 8001fe6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fe8:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001fea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001fec:	3a01      	subs	r2, #1
 8001fee:	b292      	uxth	r2, r2
 8001ff0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001ff2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	d1e3      	bne.n	8001fc8 <HAL_I2C_Master_Receive+0xc8>
 8002000:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002002:	b29b      	uxth	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0df      	beq.n	8001fc8 <HAL_I2C_Master_Receive+0xc8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002008:	9600      	str	r6, [sp, #0]
 800200a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800200c:	2180      	movs	r1, #128	; 0x80
 800200e:	4620      	mov	r0, r4
 8002010:	f7ff fd38 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 8002014:	bb90      	cbnz	r0, 800207c <HAL_I2C_Master_Receive+0x17c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002016:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002018:	b29b      	uxth	r3, r3
 800201a:	2bff      	cmp	r3, #255	; 0xff
 800201c:	d9c8      	bls.n	8001fb0 <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800201e:	22ff      	movs	r2, #255	; 0xff
 8002020:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002022:	2300      	movs	r3, #0
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800202a:	4629      	mov	r1, r5
 800202c:	4620      	mov	r0, r4
 800202e:	f7ff fca3 	bl	8001978 <I2C_TransferConfig>
 8002032:	e7c9      	b.n	8001fc8 <HAL_I2C_Master_Receive+0xc8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002034:	4632      	mov	r2, r6
 8002036:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002038:	4620      	mov	r0, r4
 800203a:	f7ff fdcd 	bl	8001bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	b130      	cbz	r0, 8002050 <HAL_I2C_Master_Receive+0x150>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002042:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002044:	2b04      	cmp	r3, #4
 8002046:	d001      	beq.n	800204c <HAL_I2C_Master_Receive+0x14c>
        return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e762      	b.n	8001f12 <HAL_I2C_Master_Receive+0x12>
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e760      	b.n	8001f12 <HAL_I2C_Master_Receive+0x12>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002050:	6822      	ldr	r2, [r4, #0]
 8002052:	2120      	movs	r1, #32
 8002054:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002056:	6820      	ldr	r0, [r4, #0]
 8002058:	6842      	ldr	r2, [r0, #4]
 800205a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800205e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002062:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800206c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002070:	2200      	movs	r2, #0
 8002072:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002076:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 800207a:	e74a      	b.n	8001f12 <HAL_I2C_Master_Receive+0x12>
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e748      	b.n	8001f12 <HAL_I2C_Master_Receive+0x12>
 8002080:	80002400 	.word	0x80002400

08002084 <HAL_I2C_Mem_Write>:
{
 8002084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 800208e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002092:	b2e4      	uxtb	r4, r4
 8002094:	2c20      	cmp	r4, #32
 8002096:	d004      	beq.n	80020a2 <HAL_I2C_Mem_Write+0x1e>
    return HAL_BUSY;
 8002098:	2302      	movs	r3, #2
}
 800209a:	4618      	mov	r0, r3
 800209c:	b002      	add	sp, #8
 800209e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 80020a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80020a4:	2c00      	cmp	r4, #0
 80020a6:	f000 80cd 	beq.w	8002244 <HAL_I2C_Mem_Write+0x1c0>
 80020aa:	2d00      	cmp	r5, #0
 80020ac:	f000 80cc 	beq.w	8002248 <HAL_I2C_Mem_Write+0x1c4>
    __HAL_LOCK(hi2c);
 80020b0:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80020b4:	2c01      	cmp	r4, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2C_Mem_Write+0x38>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e7ee      	b.n	800209a <HAL_I2C_Mem_Write+0x16>
 80020bc:	4698      	mov	r8, r3
 80020be:	4691      	mov	r9, r2
 80020c0:	460e      	mov	r6, r1
 80020c2:	4604      	mov	r4, r0
 80020c4:	f04f 0a01 	mov.w	sl, #1
 80020c8:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80020cc:	f7fe fdc8 	bl	8000c60 <HAL_GetTick>
 80020d0:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020d2:	9000      	str	r0, [sp, #0]
 80020d4:	2319      	movs	r3, #25
 80020d6:	4652      	mov	r2, sl
 80020d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020dc:	4620      	mov	r0, r4
 80020de:	f7ff fcd1 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 80020e2:	b108      	cbz	r0, 80020e8 <HAL_I2C_Mem_Write+0x64>
      return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e7d8      	b.n	800209a <HAL_I2C_Mem_Write+0x16>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020e8:	2321      	movs	r3, #33	; 0x21
 80020ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020ee:	2340      	movs	r3, #64	; 0x40
 80020f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80020f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80020fa:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80020fc:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020fe:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002100:	9701      	str	r7, [sp, #4]
 8002102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	4643      	mov	r3, r8
 8002108:	464a      	mov	r2, r9
 800210a:	4631      	mov	r1, r6
 800210c:	4620      	mov	r0, r4
 800210e:	f7ff fcdd 	bl	8001acc <I2C_RequestMemoryWrite>
 8002112:	b160      	cbz	r0, 800212e <HAL_I2C_Mem_Write+0xaa>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002114:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002116:	2b04      	cmp	r3, #4
 8002118:	d004      	beq.n	8002124 <HAL_I2C_Mem_Write+0xa0>
        __HAL_UNLOCK(hi2c);
 800211a:	2300      	movs	r3, #0
 800211c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e7ba      	b.n	800209a <HAL_I2C_Mem_Write+0x16>
        __HAL_UNLOCK(hi2c);
 8002124:	2300      	movs	r3, #0
 8002126:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800212a:	4653      	mov	r3, sl
 800212c:	e7b5      	b.n	800209a <HAL_I2C_Mem_Write+0x16>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800212e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002130:	b29b      	uxth	r3, r3
 8002132:	2bff      	cmp	r3, #255	; 0xff
 8002134:	d90a      	bls.n	800214c <HAL_I2C_Mem_Write+0xc8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002136:	22ff      	movs	r2, #255	; 0xff
 8002138:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800213a:	2300      	movs	r3, #0
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002142:	4631      	mov	r1, r6
 8002144:	4620      	mov	r0, r4
 8002146:	f7ff fc17 	bl	8001978 <I2C_TransferConfig>
 800214a:	e023      	b.n	8002194 <HAL_I2C_Mem_Write+0x110>
      hi2c->XferSize = hi2c->XferCount;
 800214c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800214e:	b292      	uxth	r2, r2
 8002150:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002152:	2300      	movs	r3, #0
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	4631      	mov	r1, r6
 800215e:	4620      	mov	r0, r4
 8002160:	f7ff fc0a 	bl	8001978 <I2C_TransferConfig>
 8002164:	e016      	b.n	8002194 <HAL_I2C_Mem_Write+0x110>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002166:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002168:	2b04      	cmp	r3, #4
 800216a:	d001      	beq.n	8002170 <HAL_I2C_Mem_Write+0xec>
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e794      	b.n	800209a <HAL_I2C_Mem_Write+0x16>
          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e792      	b.n	800209a <HAL_I2C_Mem_Write+0x16>
          hi2c->XferSize = hi2c->XferCount;
 8002174:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002176:	b292      	uxth	r2, r2
 8002178:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800217a:	2300      	movs	r3, #0
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	4631      	mov	r1, r6
 8002186:	4620      	mov	r0, r4
 8002188:	f7ff fbf6 	bl	8001978 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800218c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d033      	beq.n	80021fc <HAL_I2C_Mem_Write+0x178>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002194:	463a      	mov	r2, r7
 8002196:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002198:	4620      	mov	r0, r4
 800219a:	f7ff fc49 	bl	8001a30 <I2C_WaitOnTXISFlagUntilTimeout>
 800219e:	2800      	cmp	r0, #0
 80021a0:	d1e1      	bne.n	8002166 <HAL_I2C_Mem_Write+0xe2>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80021a2:	6822      	ldr	r2, [r4, #0]
 80021a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021a6:	1c59      	adds	r1, r3, #1
 80021a8:	6261      	str	r1, [r4, #36]	; 0x24
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80021ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80021b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29b      	uxth	r3, r3
 80021be:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1e3      	bne.n	800218c <HAL_I2C_Mem_Write+0x108>
 80021c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0df      	beq.n	800218c <HAL_I2C_Mem_Write+0x108>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021cc:	9700      	str	r7, [sp, #0]
 80021ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80021d0:	2200      	movs	r2, #0
 80021d2:	2180      	movs	r1, #128	; 0x80
 80021d4:	4620      	mov	r0, r4
 80021d6:	f7ff fc55 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 80021da:	2800      	cmp	r0, #0
 80021dc:	d136      	bne.n	800224c <HAL_I2C_Mem_Write+0x1c8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2bff      	cmp	r3, #255	; 0xff
 80021e4:	d9c6      	bls.n	8002174 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021e6:	22ff      	movs	r2, #255	; 0xff
 80021e8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021ea:	2300      	movs	r3, #0
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021f2:	4631      	mov	r1, r6
 80021f4:	4620      	mov	r0, r4
 80021f6:	f7ff fbbf 	bl	8001978 <I2C_TransferConfig>
 80021fa:	e7c7      	b.n	800218c <HAL_I2C_Mem_Write+0x108>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fc:	463a      	mov	r2, r7
 80021fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002200:	4620      	mov	r0, r4
 8002202:	f7ff fce9 	bl	8001bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	b130      	cbz	r0, 8002218 <HAL_I2C_Mem_Write+0x194>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800220c:	2b04      	cmp	r3, #4
 800220e:	d001      	beq.n	8002214 <HAL_I2C_Mem_Write+0x190>
        return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e742      	b.n	800209a <HAL_I2C_Mem_Write+0x16>
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e740      	b.n	800209a <HAL_I2C_Mem_Write+0x16>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002218:	6822      	ldr	r2, [r4, #0]
 800221a:	2120      	movs	r1, #32
 800221c:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 800221e:	6820      	ldr	r0, [r4, #0]
 8002220:	6842      	ldr	r2, [r0, #4]
 8002222:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002226:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800222a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002234:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002238:	2200      	movs	r2, #0
 800223a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800223e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002242:	e72a      	b.n	800209a <HAL_I2C_Mem_Write+0x16>
      return  HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e728      	b.n	800209a <HAL_I2C_Mem_Write+0x16>
 8002248:	2301      	movs	r3, #1
 800224a:	e726      	b.n	800209a <HAL_I2C_Mem_Write+0x16>
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e724      	b.n	800209a <HAL_I2C_Mem_Write+0x16>

08002250 <HAL_I2C_Mem_Read>:
{
 8002250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 800225a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800225e:	b2e4      	uxtb	r4, r4
 8002260:	2c20      	cmp	r4, #32
 8002262:	d004      	beq.n	800226e <HAL_I2C_Mem_Read+0x1e>
    return HAL_BUSY;
 8002264:	2302      	movs	r3, #2
}
 8002266:	4618      	mov	r0, r3
 8002268:	b002      	add	sp, #8
 800226a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 800226e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002270:	2c00      	cmp	r4, #0
 8002272:	f000 80c7 	beq.w	8002404 <HAL_I2C_Mem_Read+0x1b4>
 8002276:	2d00      	cmp	r5, #0
 8002278:	f000 80c6 	beq.w	8002408 <HAL_I2C_Mem_Read+0x1b8>
    __HAL_LOCK(hi2c);
 800227c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002280:	2c01      	cmp	r4, #1
 8002282:	d101      	bne.n	8002288 <HAL_I2C_Mem_Read+0x38>
 8002284:	2302      	movs	r3, #2
 8002286:	e7ee      	b.n	8002266 <HAL_I2C_Mem_Read+0x16>
 8002288:	4698      	mov	r8, r3
 800228a:	4691      	mov	r9, r2
 800228c:	460e      	mov	r6, r1
 800228e:	4604      	mov	r4, r0
 8002290:	f04f 0a01 	mov.w	sl, #1
 8002294:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002298:	f7fe fce2 	bl	8000c60 <HAL_GetTick>
 800229c:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800229e:	9000      	str	r0, [sp, #0]
 80022a0:	2319      	movs	r3, #25
 80022a2:	4652      	mov	r2, sl
 80022a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022a8:	4620      	mov	r0, r4
 80022aa:	f7ff fbeb 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 80022ae:	b108      	cbz	r0, 80022b4 <HAL_I2C_Mem_Read+0x64>
      return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e7d8      	b.n	8002266 <HAL_I2C_Mem_Read+0x16>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022b4:	2322      	movs	r3, #34	; 0x22
 80022b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022ba:	2340      	movs	r3, #64	; 0x40
 80022bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80022c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80022c6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80022c8:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022ca:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022cc:	9701      	str	r7, [sp, #4]
 80022ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	4643      	mov	r3, r8
 80022d4:	464a      	mov	r2, r9
 80022d6:	4631      	mov	r1, r6
 80022d8:	4620      	mov	r0, r4
 80022da:	f7ff fc3b 	bl	8001b54 <I2C_RequestMemoryRead>
 80022de:	b160      	cbz	r0, 80022fa <HAL_I2C_Mem_Read+0xaa>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d004      	beq.n	80022f0 <HAL_I2C_Mem_Read+0xa0>
        __HAL_UNLOCK(hi2c);
 80022e6:	2300      	movs	r3, #0
 80022e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e7ba      	b.n	8002266 <HAL_I2C_Mem_Read+0x16>
        __HAL_UNLOCK(hi2c);
 80022f0:	2300      	movs	r3, #0
 80022f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80022f6:	4653      	mov	r3, sl
 80022f8:	e7b5      	b.n	8002266 <HAL_I2C_Mem_Read+0x16>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2bff      	cmp	r3, #255	; 0xff
 8002300:	d90a      	bls.n	8002318 <HAL_I2C_Mem_Read+0xc8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002302:	22ff      	movs	r2, #255	; 0xff
 8002304:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002306:	4b43      	ldr	r3, [pc, #268]	; (8002414 <HAL_I2C_Mem_Read+0x1c4>)
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800230e:	4631      	mov	r1, r6
 8002310:	4620      	mov	r0, r4
 8002312:	f7ff fb31 	bl	8001978 <I2C_TransferConfig>
 8002316:	e01c      	b.n	8002352 <HAL_I2C_Mem_Read+0x102>
      hi2c->XferSize = hi2c->XferCount;
 8002318:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800231a:	b292      	uxth	r2, r2
 800231c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <HAL_I2C_Mem_Read+0x1c4>)
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	4631      	mov	r1, r6
 800232a:	4620      	mov	r0, r4
 800232c:	f7ff fb24 	bl	8001978 <I2C_TransferConfig>
 8002330:	e00f      	b.n	8002352 <HAL_I2C_Mem_Read+0x102>
          hi2c->XferSize = hi2c->XferCount;
 8002332:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002334:	b292      	uxth	r2, r2
 8002336:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002338:	2300      	movs	r3, #0
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	4631      	mov	r1, r6
 8002344:	4620      	mov	r0, r4
 8002346:	f7ff fb17 	bl	8001978 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800234a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d034      	beq.n	80023bc <HAL_I2C_Mem_Read+0x16c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002352:	9700      	str	r7, [sp, #0]
 8002354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002356:	2200      	movs	r2, #0
 8002358:	2104      	movs	r1, #4
 800235a:	4620      	mov	r0, r4
 800235c:	f7ff fb92 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 8002360:	2800      	cmp	r0, #0
 8002362:	d153      	bne.n	800240c <HAL_I2C_Mem_Read+0x1bc>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002364:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	6262      	str	r2, [r4, #36]	; 0x24
 800236a:	6822      	ldr	r2, [r4, #0]
 800236c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800236e:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8002370:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002372:	3a01      	subs	r2, #1
 8002374:	b292      	uxth	r2, r2
 8002376:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002378:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29b      	uxth	r3, r3
 8002380:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002382:	2a00      	cmp	r2, #0
 8002384:	d1e1      	bne.n	800234a <HAL_I2C_Mem_Read+0xfa>
 8002386:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0dd      	beq.n	800234a <HAL_I2C_Mem_Read+0xfa>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800238e:	9700      	str	r7, [sp, #0]
 8002390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff fb75 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 800239a:	2800      	cmp	r0, #0
 800239c:	d138      	bne.n	8002410 <HAL_I2C_Mem_Read+0x1c0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800239e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2bff      	cmp	r3, #255	; 0xff
 80023a4:	d9c5      	bls.n	8002332 <HAL_I2C_Mem_Read+0xe2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a6:	22ff      	movs	r2, #255	; 0xff
 80023a8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023aa:	2300      	movs	r3, #0
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023b2:	4631      	mov	r1, r6
 80023b4:	4620      	mov	r0, r4
 80023b6:	f7ff fadf 	bl	8001978 <I2C_TransferConfig>
 80023ba:	e7c6      	b.n	800234a <HAL_I2C_Mem_Read+0xfa>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023bc:	463a      	mov	r2, r7
 80023be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7ff fc09 	bl	8001bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	b130      	cbz	r0, 80023d8 <HAL_I2C_Mem_Read+0x188>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Mem_Read+0x184>
        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e748      	b.n	8002266 <HAL_I2C_Mem_Read+0x16>
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e746      	b.n	8002266 <HAL_I2C_Mem_Read+0x16>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d8:	6822      	ldr	r2, [r4, #0]
 80023da:	2120      	movs	r1, #32
 80023dc:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 80023de:	6820      	ldr	r0, [r4, #0]
 80023e0:	6842      	ldr	r2, [r0, #4]
 80023e2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80023e6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80023ea:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80023f4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023f8:	2200      	movs	r2, #0
 80023fa:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80023fe:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002402:	e730      	b.n	8002266 <HAL_I2C_Mem_Read+0x16>
      return  HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e72e      	b.n	8002266 <HAL_I2C_Mem_Read+0x16>
 8002408:	2301      	movs	r3, #1
 800240a:	e72c      	b.n	8002266 <HAL_I2C_Mem_Read+0x16>
        return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e72a      	b.n	8002266 <HAL_I2C_Mem_Read+0x16>
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e728      	b.n	8002266 <HAL_I2C_Mem_Read+0x16>
 8002414:	80002400 	.word	0x80002400

08002418 <HAL_I2C_IsDeviceReady>:
{
 8002418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800241c:	b084      	sub	sp, #16
  __IO uint32_t I2C_Trials = 0U;
 800241e:	2400      	movs	r4, #0
 8002420:	9403      	str	r4, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002422:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002426:	b2e4      	uxtb	r4, r4
 8002428:	2c20      	cmp	r4, #32
 800242a:	d004      	beq.n	8002436 <HAL_I2C_IsDeviceReady+0x1e>
    return HAL_BUSY;
 800242c:	2302      	movs	r3, #2
}
 800242e:	4618      	mov	r0, r3
 8002430:	b004      	add	sp, #16
 8002432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002436:	6804      	ldr	r4, [r0, #0]
 8002438:	69a4      	ldr	r4, [r4, #24]
 800243a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800243e:	d001      	beq.n	8002444 <HAL_I2C_IsDeviceReady+0x2c>
      return HAL_BUSY;
 8002440:	2302      	movs	r3, #2
 8002442:	e7f4      	b.n	800242e <HAL_I2C_IsDeviceReady+0x16>
    __HAL_LOCK(hi2c);
 8002444:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002448:	2c01      	cmp	r4, #1
 800244a:	f000 808b 	beq.w	8002564 <HAL_I2C_IsDeviceReady+0x14c>
 800244e:	461f      	mov	r7, r3
 8002450:	4690      	mov	r8, r2
 8002452:	4689      	mov	r9, r1
 8002454:	4606      	mov	r6, r0
 8002456:	2301      	movs	r3, #1
 8002458:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800245c:	2324      	movs	r3, #36	; 0x24
 800245e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002462:	2300      	movs	r3, #0
 8002464:	6443      	str	r3, [r0, #68]	; 0x44
 8002466:	e022      	b.n	80024ae <HAL_I2C_IsDeviceReady+0x96>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002468:	f3c9 0309 	ubfx	r3, r9, #0, #10
 800246c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002470:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002474:	e023      	b.n	80024be <HAL_I2C_IsDeviceReady+0xa6>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002476:	69ab      	ldr	r3, [r5, #24]
 8002478:	f013 0f10 	tst.w	r3, #16
 800247c:	d043      	beq.n	8002506 <HAL_I2C_IsDeviceReady+0xee>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800247e:	f8cd a000 	str.w	sl, [sp]
 8002482:	463b      	mov	r3, r7
 8002484:	2200      	movs	r2, #0
 8002486:	2120      	movs	r1, #32
 8002488:	4630      	mov	r0, r6
 800248a:	f7ff fafb 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 800248e:	2800      	cmp	r0, #0
 8002490:	d16a      	bne.n	8002568 <HAL_I2C_IsDeviceReady+0x150>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002492:	6833      	ldr	r3, [r6, #0]
 8002494:	2210      	movs	r2, #16
 8002496:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002498:	6833      	ldr	r3, [r6, #0]
 800249a:	2220      	movs	r2, #32
 800249c:	61da      	str	r2, [r3, #28]
      if (I2C_Trials++ == Trials)
 800249e:	9b03      	ldr	r3, [sp, #12]
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	9203      	str	r2, [sp, #12]
 80024a4:	4543      	cmp	r3, r8
 80024a6:	d043      	beq.n	8002530 <HAL_I2C_IsDeviceReady+0x118>
    while (I2C_Trials < Trials);
 80024a8:	9b03      	ldr	r3, [sp, #12]
 80024aa:	4598      	cmp	r8, r3
 80024ac:	d952      	bls.n	8002554 <HAL_I2C_IsDeviceReady+0x13c>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80024ae:	6832      	ldr	r2, [r6, #0]
 80024b0:	68f3      	ldr	r3, [r6, #12]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d0d8      	beq.n	8002468 <HAL_I2C_IsDeviceReady+0x50>
 80024b6:	f3c9 0309 	ubfx	r3, r9, #0, #10
 80024ba:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80024be:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 80024c0:	f7fe fbce 	bl	8000c60 <HAL_GetTick>
 80024c4:	4682      	mov	sl, r0
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 80024c6:	6835      	ldr	r5, [r6, #0]
 80024c8:	69ab      	ldr	r3, [r5, #24]
 80024ca:	f013 0f20 	tst.w	r3, #32
 80024ce:	d1d2      	bne.n	8002476 <HAL_I2C_IsDeviceReady+0x5e>
 80024d0:	69ab      	ldr	r3, [r5, #24]
 80024d2:	f013 0f10 	tst.w	r3, #16
 80024d6:	d1ce      	bne.n	8002476 <HAL_I2C_IsDeviceReady+0x5e>
 80024d8:	f896 4041 	ldrb.w	r4, [r6, #65]	; 0x41
 80024dc:	b2e4      	uxtb	r4, r4
 80024de:	2ca0      	cmp	r4, #160	; 0xa0
 80024e0:	d0c9      	beq.n	8002476 <HAL_I2C_IsDeviceReady+0x5e>
        if (Timeout != HAL_MAX_DELAY)
 80024e2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80024e6:	d0ee      	beq.n	80024c6 <HAL_I2C_IsDeviceReady+0xae>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024e8:	b12f      	cbz	r7, 80024f6 <HAL_I2C_IsDeviceReady+0xde>
 80024ea:	f7fe fbb9 	bl	8000c60 <HAL_GetTick>
 80024ee:	eba0 000a 	sub.w	r0, r0, sl
 80024f2:	4287      	cmp	r7, r0
 80024f4:	d2e7      	bcs.n	80024c6 <HAL_I2C_IsDeviceReady+0xae>
            hi2c->State = HAL_I2C_STATE_READY;
 80024f6:	2320      	movs	r3, #32
 80024f8:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
            __HAL_UNLOCK(hi2c);
 80024fc:	2300      	movs	r3, #0
 80024fe:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e793      	b.n	800242e <HAL_I2C_IsDeviceReady+0x16>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002506:	f8cd a000 	str.w	sl, [sp]
 800250a:	463b      	mov	r3, r7
 800250c:	2200      	movs	r2, #0
 800250e:	2120      	movs	r1, #32
 8002510:	4630      	mov	r0, r6
 8002512:	f7ff fab7 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	b108      	cbz	r0, 800251e <HAL_I2C_IsDeviceReady+0x106>
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e787      	b.n	800242e <HAL_I2C_IsDeviceReady+0x16>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800251e:	6831      	ldr	r1, [r6, #0]
 8002520:	2220      	movs	r2, #32
 8002522:	61ca      	str	r2, [r1, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8002524:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8002528:	2200      	movs	r2, #0
 800252a:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
        return HAL_OK;
 800252e:	e77e      	b.n	800242e <HAL_I2C_IsDeviceReady+0x16>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002530:	6832      	ldr	r2, [r6, #0]
 8002532:	6853      	ldr	r3, [r2, #4]
 8002534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002538:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800253a:	f8cd a000 	str.w	sl, [sp]
 800253e:	463b      	mov	r3, r7
 8002540:	2200      	movs	r2, #0
 8002542:	2120      	movs	r1, #32
 8002544:	4630      	mov	r0, r6
 8002546:	f7ff fa9d 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 800254a:	b978      	cbnz	r0, 800256c <HAL_I2C_IsDeviceReady+0x154>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800254c:	6833      	ldr	r3, [r6, #0]
 800254e:	2220      	movs	r2, #32
 8002550:	61da      	str	r2, [r3, #28]
 8002552:	e7a9      	b.n	80024a8 <HAL_I2C_IsDeviceReady+0x90>
    hi2c->State = HAL_I2C_STATE_READY;
 8002554:	2320      	movs	r3, #32
 8002556:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800255a:	2300      	movs	r3, #0
 800255c:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
    return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e764      	b.n	800242e <HAL_I2C_IsDeviceReady+0x16>
    __HAL_LOCK(hi2c);
 8002564:	2302      	movs	r3, #2
 8002566:	e762      	b.n	800242e <HAL_I2C_IsDeviceReady+0x16>
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e760      	b.n	800242e <HAL_I2C_IsDeviceReady+0x16>
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e75e      	b.n	800242e <HAL_I2C_IsDeviceReady+0x16>

08002570 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002570:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b20      	cmp	r3, #32
 8002578:	d001      	beq.n	800257e <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800257a:	2002      	movs	r0, #2
 800257c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800257e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002582:	2b01      	cmp	r3, #1
 8002584:	d020      	beq.n	80025c8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002586:	2301      	movs	r3, #1
 8002588:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800258c:	2324      	movs	r3, #36	; 0x24
 800258e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002592:	6802      	ldr	r2, [r0, #0]
 8002594:	6813      	ldr	r3, [r2, #0]
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800259c:	6802      	ldr	r2, [r0, #0]
 800259e:	6813      	ldr	r3, [r2, #0]
 80025a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025a4:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80025a6:	6802      	ldr	r2, [r0, #0]
 80025a8:	6813      	ldr	r3, [r2, #0]
 80025aa:	4319      	orrs	r1, r3
 80025ac:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80025ae:	6802      	ldr	r2, [r0, #0]
 80025b0:	6813      	ldr	r3, [r2, #0]
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80025b8:	2320      	movs	r3, #32
 80025ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80025be:	2300      	movs	r3, #0
 80025c0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 80025c4:	4618      	mov	r0, r3
 80025c6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80025c8:	2002      	movs	r0, #2
  }
}
 80025ca:	4770      	bx	lr

080025cc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025cc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d001      	beq.n	80025da <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80025d6:	2002      	movs	r0, #2
 80025d8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80025da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d01e      	beq.n	8002620 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80025e2:	2301      	movs	r3, #1
 80025e4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80025e8:	2324      	movs	r3, #36	; 0x24
 80025ea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80025ee:	6802      	ldr	r2, [r0, #0]
 80025f0:	6813      	ldr	r3, [r2, #0]
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80025f8:	6802      	ldr	r2, [r0, #0]
 80025fa:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80025fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8002600:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8002604:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002606:	6802      	ldr	r2, [r0, #0]
 8002608:	6813      	ldr	r3, [r2, #0]
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002610:	2320      	movs	r3, #32
 8002612:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002616:	2300      	movs	r3, #0
 8002618:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 800261c:	4618      	mov	r0, r3
 800261e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002620:	2002      	movs	r0, #2
  }
}
 8002622:	4770      	bx	lr

08002624 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002624:	2800      	cmp	r0, #0
 8002626:	f000 82f3 	beq.w	8002c10 <HAL_RCC_OscConfig+0x5ec>
{
 800262a:	b570      	push	{r4, r5, r6, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002630:	6803      	ldr	r3, [r0, #0]
 8002632:	f013 0f01 	tst.w	r3, #1
 8002636:	d063      	beq.n	8002700 <HAL_RCC_OscConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002638:	4bb4      	ldr	r3, [pc, #720]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b04      	cmp	r3, #4
 8002642:	d046      	beq.n	80026d2 <HAL_RCC_OscConfig+0xae>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002644:	4bb1      	ldr	r3, [pc, #708]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	d03b      	beq.n	80026c8 <HAL_RCC_OscConfig+0xa4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002650:	6863      	ldr	r3, [r4, #4]
 8002652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002656:	f000 808e 	beq.w	8002776 <HAL_RCC_OscConfig+0x152>
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 8091 	bne.w	8002782 <HAL_RCC_OscConfig+0x15e>
 8002660:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002664:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002676:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002678:	4aa4      	ldr	r2, [pc, #656]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 800267a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800267c:	f023 030f 	bic.w	r3, r3, #15
 8002680:	68a1      	ldr	r1, [r4, #8]
 8002682:	430b      	orrs	r3, r1
 8002684:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002686:	6863      	ldr	r3, [r4, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 8094 	beq.w	80027b6 <HAL_RCC_OscConfig+0x192>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7fe fae7 	bl	8000c60 <HAL_GetTick>
 8002692:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002698:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269c:	4b9b      	ldr	r3, [pc, #620]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2201      	movs	r2, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	4219      	tst	r1, r3
 80026b8:	d122      	bne.n	8002700 <HAL_RCC_OscConfig+0xdc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ba:	f7fe fad1 	bl	8000c60 <HAL_GetTick>
 80026be:	1b40      	subs	r0, r0, r5
 80026c0:	2864      	cmp	r0, #100	; 0x64
 80026c2:	d9e7      	bls.n	8002694 <HAL_RCC_OscConfig+0x70>
          {
            return HAL_TIMEOUT;
 80026c4:	2003      	movs	r0, #3
 80026c6:	e2b2      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026c8:	4b90      	ldr	r3, [pc, #576]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80026d0:	d0be      	beq.n	8002650 <HAL_RCC_OscConfig+0x2c>
 80026d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d6:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026da:	4b8c      	ldr	r3, [pc, #560]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 80026dc:	6819      	ldr	r1, [r3, #0]
 80026de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	2201      	movs	r2, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	4219      	tst	r1, r3
 80026f6:	d003      	beq.n	8002700 <HAL_RCC_OscConfig+0xdc>
 80026f8:	6863      	ldr	r3, [r4, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 828a 	beq.w	8002c14 <HAL_RCC_OscConfig+0x5f0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	f013 0f02 	tst.w	r3, #2
 8002706:	f000 809c 	beq.w	8002842 <HAL_RCC_OscConfig+0x21e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800270a:	4b80      	ldr	r3, [pc, #512]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f013 0f0c 	tst.w	r3, #12
 8002712:	d072      	beq.n	80027fa <HAL_RCC_OscConfig+0x1d6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002714:	4b7d      	ldr	r3, [pc, #500]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 030c 	and.w	r3, r3, #12
 800271c:	2b08      	cmp	r3, #8
 800271e:	d067      	beq.n	80027f0 <HAL_RCC_OscConfig+0x1cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002720:	6923      	ldr	r3, [r4, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80cb 	beq.w	80028be <HAL_RCC_OscConfig+0x29a>
 8002728:	2201      	movs	r2, #1
 800272a:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002736:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe fa8f 	bl	8000c60 <HAL_GetTick>
 8002742:	4605      	mov	r5, r0
 8002744:	2302      	movs	r3, #2
 8002746:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	4b70      	ldr	r3, [pc, #448]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	2302      	movs	r3, #2
 8002750:	fa93 f3a3 	rbit	r3, r3
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	2201      	movs	r2, #1
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	4219      	tst	r1, r3
 8002764:	f040 809c 	bne.w	80028a0 <HAL_RCC_OscConfig+0x27c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002768:	f7fe fa7a 	bl	8000c60 <HAL_GetTick>
 800276c:	1b40      	subs	r0, r0, r5
 800276e:	2802      	cmp	r0, #2
 8002770:	d9e8      	bls.n	8002744 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002772:	2003      	movs	r0, #3
 8002774:	e25b      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002776:	4a65      	ldr	r2, [pc, #404]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 8002778:	6813      	ldr	r3, [r2, #0]
 800277a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	e77a      	b.n	8002678 <HAL_RCC_OscConfig+0x54>
 8002782:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002786:	d009      	beq.n	800279c <HAL_RCC_OscConfig+0x178>
 8002788:	4b60      	ldr	r3, [pc, #384]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e76d      	b.n	8002678 <HAL_RCC_OscConfig+0x54>
 800279c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027a0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	e760      	b.n	8002678 <HAL_RCC_OscConfig+0x54>
        tickstart = HAL_GetTick();
 80027b6:	f7fe fa53 	bl	8000c60 <HAL_GetTick>
 80027ba:	4605      	mov	r5, r0
 80027bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c0:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c4:	4b51      	ldr	r3, [pc, #324]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 80027c6:	6819      	ldr	r1, [r3, #0]
 80027c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2201      	movs	r2, #1
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	4219      	tst	r1, r3
 80027e0:	d08e      	beq.n	8002700 <HAL_RCC_OscConfig+0xdc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e2:	f7fe fa3d 	bl	8000c60 <HAL_GetTick>
 80027e6:	1b40      	subs	r0, r0, r5
 80027e8:	2864      	cmp	r0, #100	; 0x64
 80027ea:	d9e7      	bls.n	80027bc <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 80027ec:	2003      	movs	r0, #3
 80027ee:	e21e      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027f0:	4b46      	ldr	r3, [pc, #280]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80027f8:	d192      	bne.n	8002720 <HAL_RCC_OscConfig+0xfc>
 80027fa:	2302      	movs	r3, #2
 80027fc:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002800:	4b42      	ldr	r3, [pc, #264]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 8002802:	6819      	ldr	r1, [r3, #0]
 8002804:	2302      	movs	r3, #2
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2201      	movs	r2, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	4219      	tst	r1, r3
 800281a:	d004      	beq.n	8002826 <HAL_RCC_OscConfig+0x202>
 800281c:	6923      	ldr	r3, [r4, #16]
 800281e:	4293      	cmp	r3, r2
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x202>
        return HAL_ERROR;
 8002822:	2001      	movs	r0, #1
 8002824:	e203      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002826:	4839      	ldr	r0, [pc, #228]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 8002828:	6803      	ldr	r3, [r0, #0]
 800282a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800282e:	6961      	ldr	r1, [r4, #20]
 8002830:	22f8      	movs	r2, #248	; 0xf8
 8002832:	fa92 f2a2 	rbit	r2, r2
 8002836:	fab2 f282 	clz	r2, r2
 800283a:	fa01 f202 	lsl.w	r2, r1, r2
 800283e:	4313      	orrs	r3, r2
 8002840:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	f013 0f08 	tst.w	r3, #8
 8002848:	f000 808c 	beq.w	8002964 <HAL_RCC_OscConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800284c:	69a3      	ldr	r3, [r4, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d060      	beq.n	8002914 <HAL_RCC_OscConfig+0x2f0>
 8002852:	2101      	movs	r1, #1
 8002854:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002858:	fab2 f282 	clz	r2, r2
 800285c:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <HAL_RCC_OscConfig+0x2ec>)
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002864:	f7fe f9fc 	bl	8000c60 <HAL_GetTick>
 8002868:	4605      	mov	r5, r0
 800286a:	2302      	movs	r3, #2
 800286c:	fa93 f2a3 	rbit	r2, r3
 8002870:	fa93 f2a3 	rbit	r2, r3
 8002874:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002878:	4a24      	ldr	r2, [pc, #144]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 800287a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	2201      	movs	r2, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	4219      	tst	r1, r3
 8002890:	d168      	bne.n	8002964 <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002892:	f7fe f9e5 	bl	8000c60 <HAL_GetTick>
 8002896:	1b40      	subs	r0, r0, r5
 8002898:	2802      	cmp	r0, #2
 800289a:	d9e6      	bls.n	800286a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800289c:	2003      	movs	r0, #3
 800289e:	e1c6      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a0:	481a      	ldr	r0, [pc, #104]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 80028a2:	6803      	ldr	r3, [r0, #0]
 80028a4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80028a8:	6961      	ldr	r1, [r4, #20]
 80028aa:	22f8      	movs	r2, #248	; 0xf8
 80028ac:	fa92 f2a2 	rbit	r2, r2
 80028b0:	fab2 f282 	clz	r2, r2
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	4313      	orrs	r3, r2
 80028ba:	6003      	str	r3, [r0, #0]
 80028bc:	e7c1      	b.n	8002842 <HAL_RCC_OscConfig+0x21e>
 80028be:	2301      	movs	r3, #1
 80028c0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028d6:	f7fe f9c3 	bl	8000c60 <HAL_GetTick>
 80028da:	4605      	mov	r5, r0
 80028dc:	2302      	movs	r3, #2
 80028de:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <HAL_RCC_OscConfig+0x2e8>)
 80028e4:	6819      	ldr	r1, [r3, #0]
 80028e6:	2302      	movs	r3, #2
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	2201      	movs	r2, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	4219      	tst	r1, r3
 80028fc:	d0a1      	beq.n	8002842 <HAL_RCC_OscConfig+0x21e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fe:	f7fe f9af 	bl	8000c60 <HAL_GetTick>
 8002902:	1b40      	subs	r0, r0, r5
 8002904:	2802      	cmp	r0, #2
 8002906:	d9e9      	bls.n	80028dc <HAL_RCC_OscConfig+0x2b8>
            return HAL_TIMEOUT;
 8002908:	2003      	movs	r0, #3
 800290a:	e190      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
 800290c:	40021000 	.word	0x40021000
 8002910:	10908120 	.word	0x10908120
 8002914:	2201      	movs	r2, #1
 8002916:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800291a:	fab2 f282 	clz	r2, r2
 800291e:	4bc0      	ldr	r3, [pc, #768]	; (8002c20 <HAL_RCC_OscConfig+0x5fc>)
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002928:	f7fe f99a 	bl	8000c60 <HAL_GetTick>
 800292c:	4605      	mov	r5, r0
 800292e:	2302      	movs	r3, #2
 8002930:	fa93 f2a3 	rbit	r2, r3
 8002934:	fa93 f2a3 	rbit	r2, r3
 8002938:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293c:	4ab9      	ldr	r2, [pc, #740]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 800293e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	2201      	movs	r2, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	4219      	tst	r1, r3
 8002954:	d006      	beq.n	8002964 <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002956:	f7fe f983 	bl	8000c60 <HAL_GetTick>
 800295a:	1b40      	subs	r0, r0, r5
 800295c:	2802      	cmp	r0, #2
 800295e:	d9e6      	bls.n	800292e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002960:	2003      	movs	r0, #3
 8002962:	e164      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	f013 0f04 	tst.w	r3, #4
 800296a:	f000 80b3 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x4b0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296e:	4bad      	ldr	r3, [pc, #692]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002976:	d126      	bne.n	80029c6 <HAL_RCC_OscConfig+0x3a2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4baa      	ldr	r3, [pc, #680]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 800297a:	69da      	ldr	r2, [r3, #28]
 800297c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002980:	61da      	str	r2, [r3, #28]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800298c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298e:	4ba6      	ldr	r3, [pc, #664]	; (8002c28 <HAL_RCC_OscConfig+0x604>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002996:	d018      	beq.n	80029ca <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002998:	68e3      	ldr	r3, [r4, #12]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d029      	beq.n	80029f2 <HAL_RCC_OscConfig+0x3ce>
 800299e:	bb73      	cbnz	r3, 80029fe <HAL_RCC_OscConfig+0x3da>
 80029a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029a4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80029a8:	6a1a      	ldr	r2, [r3, #32]
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	621a      	str	r2, [r3, #32]
 80029b0:	6a1a      	ldr	r2, [r3, #32]
 80029b2:	f022 0204 	bic.w	r2, r2, #4
 80029b6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b8:	68e3      	ldr	r3, [r4, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d05d      	beq.n	8002a7a <HAL_RCC_OscConfig+0x456>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7fe f94f 	bl	8000c60 <HAL_GetTick>
 80029c2:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c4:	e047      	b.n	8002a56 <HAL_RCC_OscConfig+0x432>
    FlagStatus       pwrclkchanged = RESET;
 80029c6:	2500      	movs	r5, #0
 80029c8:	e7e1      	b.n	800298e <HAL_RCC_OscConfig+0x36a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ca:	4a97      	ldr	r2, [pc, #604]	; (8002c28 <HAL_RCC_OscConfig+0x604>)
 80029cc:	6813      	ldr	r3, [r2, #0]
 80029ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80029d4:	f7fe f944 	bl	8000c60 <HAL_GetTick>
 80029d8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029da:	4b93      	ldr	r3, [pc, #588]	; (8002c28 <HAL_RCC_OscConfig+0x604>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f413 7f80 	tst.w	r3, #256	; 0x100
 80029e2:	d1d9      	bne.n	8002998 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e4:	f7fe f93c 	bl	8000c60 <HAL_GetTick>
 80029e8:	1b80      	subs	r0, r0, r6
 80029ea:	2864      	cmp	r0, #100	; 0x64
 80029ec:	d9f5      	bls.n	80029da <HAL_RCC_OscConfig+0x3b6>
          return HAL_TIMEOUT;
 80029ee:	2003      	movs	r0, #3
 80029f0:	e11d      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f2:	4a8c      	ldr	r2, [pc, #560]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 80029f4:	6a13      	ldr	r3, [r2, #32]
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6213      	str	r3, [r2, #32]
 80029fc:	e7dc      	b.n	80029b8 <HAL_RCC_OscConfig+0x394>
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d009      	beq.n	8002a16 <HAL_RCC_OscConfig+0x3f2>
 8002a02:	4b88      	ldr	r3, [pc, #544]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 8002a04:	6a1a      	ldr	r2, [r3, #32]
 8002a06:	f022 0201 	bic.w	r2, r2, #1
 8002a0a:	621a      	str	r2, [r3, #32]
 8002a0c:	6a1a      	ldr	r2, [r3, #32]
 8002a0e:	f022 0204 	bic.w	r2, r2, #4
 8002a12:	621a      	str	r2, [r3, #32]
 8002a14:	e7d0      	b.n	80029b8 <HAL_RCC_OscConfig+0x394>
 8002a16:	4b83      	ldr	r3, [pc, #524]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 8002a18:	6a1a      	ldr	r2, [r3, #32]
 8002a1a:	f042 0204 	orr.w	r2, r2, #4
 8002a1e:	621a      	str	r2, [r3, #32]
 8002a20:	6a1a      	ldr	r2, [r3, #32]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	621a      	str	r2, [r3, #32]
 8002a28:	e7c6      	b.n	80029b8 <HAL_RCC_OscConfig+0x394>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2a:	4b7e      	ldr	r3, [pc, #504]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 8002a2c:	6a19      	ldr	r1, [r3, #32]
 8002a2e:	2302      	movs	r3, #2
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	4219      	tst	r1, r3
 8002a44:	d145      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe f90b 	bl	8000c60 <HAL_GetTick>
 8002a4a:	1b80      	subs	r0, r0, r6
 8002a4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a50:	4298      	cmp	r0, r3
 8002a52:	f200 80e1 	bhi.w	8002c18 <HAL_RCC_OscConfig+0x5f4>
 8002a56:	2302      	movs	r3, #2
 8002a58:	fa93 f2a3 	rbit	r2, r3
 8002a5c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	f043 0302 	orr.w	r3, r3, #2
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d0dd      	beq.n	8002a2a <HAL_RCC_OscConfig+0x406>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	4b6b      	ldr	r3, [pc, #428]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 8002a76:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a78:	e7d9      	b.n	8002a2e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe f8f1 	bl	8000c60 <HAL_GetTick>
 8002a7e:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a80:	e015      	b.n	8002aae <HAL_RCC_OscConfig+0x48a>
 8002a82:	4b68      	ldr	r3, [pc, #416]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 8002a84:	6a19      	ldr	r1, [r3, #32]
 8002a86:	2302      	movs	r3, #2
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	2201      	movs	r2, #1
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	4219      	tst	r1, r3
 8002a9c:	d019      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7fe f8df 	bl	8000c60 <HAL_GetTick>
 8002aa2:	1b80      	subs	r0, r0, r6
 8002aa4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002aa8:	4298      	cmp	r0, r3
 8002aaa:	f200 80b7 	bhi.w	8002c1c <HAL_RCC_OscConfig+0x5f8>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	fa93 f2a3 	rbit	r2, r3
 8002ab4:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	f043 0302 	orr.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d0dd      	beq.n	8002a82 <HAL_RCC_OscConfig+0x45e>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	4b55      	ldr	r3, [pc, #340]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 8002ace:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ad0:	e7d9      	b.n	8002a86 <HAL_RCC_OscConfig+0x462>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ad2:	bbb5      	cbnz	r5, 8002b42 <HAL_RCC_OscConfig+0x51e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad4:	69e3      	ldr	r3, [r4, #28]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80a8 	beq.w	8002c2c <HAL_RCC_OscConfig+0x608>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002adc:	4a51      	ldr	r2, [pc, #324]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 8002ade:	6852      	ldr	r2, [r2, #4]
 8002ae0:	f002 020c 	and.w	r2, r2, #12
 8002ae4:	2a08      	cmp	r2, #8
 8002ae6:	f000 80a4 	beq.w	8002c32 <HAL_RCC_OscConfig+0x60e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d02f      	beq.n	8002b4e <HAL_RCC_OscConfig+0x52a>
 8002aee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af2:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002afe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe f8aa 	bl	8000c60 <HAL_GetTick>
 8002b0c:	4604      	mov	r4, r0
 8002b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b12:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b16:	4b43      	ldr	r3, [pc, #268]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 8002b18:	6819      	ldr	r1, [r3, #0]
 8002b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	4219      	tst	r1, r3
 8002b32:	d06b      	beq.n	8002c0c <HAL_RCC_OscConfig+0x5e8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe f894 	bl	8000c60 <HAL_GetTick>
 8002b38:	1b00      	subs	r0, r0, r4
 8002b3a:	2802      	cmp	r0, #2
 8002b3c:	d9e7      	bls.n	8002b0e <HAL_RCC_OscConfig+0x4ea>
          {
            return HAL_TIMEOUT;
 8002b3e:	2003      	movs	r0, #3
 8002b40:	e075      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b42:	4a38      	ldr	r2, [pc, #224]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 8002b44:	69d3      	ldr	r3, [r2, #28]
 8002b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	61d3      	str	r3, [r2, #28]
 8002b4c:	e7c2      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4b0>
 8002b4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b52:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b68:	f7fe f87a 	bl	8000c60 <HAL_GetTick>
 8002b6c:	4605      	mov	r5, r0
 8002b6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b72:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b76:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 8002b78:	6819      	ldr	r1, [r3, #0]
 8002b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	4219      	tst	r1, r3
 8002b92:	d006      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x57e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe f864 	bl	8000c60 <HAL_GetTick>
 8002b98:	1b40      	subs	r0, r0, r5
 8002b9a:	2802      	cmp	r0, #2
 8002b9c:	d9e7      	bls.n	8002b6e <HAL_RCC_OscConfig+0x54a>
            return HAL_TIMEOUT;
 8002b9e:	2003      	movs	r0, #3
 8002ba0:	e045      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba2:	4920      	ldr	r1, [pc, #128]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 8002ba4:	684b      	ldr	r3, [r1, #4]
 8002ba6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002baa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002bac:	6a20      	ldr	r0, [r4, #32]
 8002bae:	4302      	orrs	r2, r0
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]
 8002bb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bb8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	2201      	movs	r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bce:	f7fe f847 	bl	8000c60 <HAL_GetTick>
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bd8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_RCC_OscConfig+0x600>)
 8002bde:	6819      	ldr	r1, [r3, #0]
 8002be0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	4219      	tst	r1, r3
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5e4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe f831 	bl	8000c60 <HAL_GetTick>
 8002bfe:	1b00      	subs	r0, r0, r4
 8002c00:	2802      	cmp	r0, #2
 8002c02:	d9e7      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x5b0>
            return HAL_TIMEOUT;
 8002c04:	2003      	movs	r0, #3
 8002c06:	e012      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002c08:	2000      	movs	r0, #0
 8002c0a:	e010      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	e00e      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
    return HAL_ERROR;
 8002c10:	2001      	movs	r0, #1
 8002c12:	4770      	bx	lr
        return HAL_ERROR;
 8002c14:	2001      	movs	r0, #1
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
          return HAL_TIMEOUT;
 8002c18:	2003      	movs	r0, #3
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
          return HAL_TIMEOUT;
 8002c1c:	2003      	movs	r0, #3
 8002c1e:	e006      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
 8002c20:	10908120 	.word	0x10908120
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40007000 	.word	0x40007000
  return HAL_OK;
 8002c2c:	2000      	movs	r0, #0
}
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002c32:	2001      	movs	r0, #1
 8002c34:	e7fb      	b.n	8002c2e <HAL_RCC_OscConfig+0x60a>
 8002c36:	bf00      	nop

08002c38 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002c38:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c3c:	f003 020c 	and.w	r2, r3, #12
 8002c40:	2a08      	cmp	r2, #8
 8002c42:	d124      	bne.n	8002c8e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c44:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8002c48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c4c:	fa92 f2a2 	rbit	r2, r2
 8002c50:	fab2 f282 	clz	r2, r2
 8002c54:	fa21 f202 	lsr.w	r2, r1, r2
 8002c58:	490f      	ldr	r1, [pc, #60]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x60>)
 8002c5a:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002c5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c60:	f002 020f 	and.w	r2, r2, #15
 8002c64:	210f      	movs	r1, #15
 8002c66:	fa91 f1a1 	rbit	r1, r1
 8002c6a:	fab1 f181 	clz	r1, r1
 8002c6e:	40ca      	lsrs	r2, r1
 8002c70:	490a      	ldr	r1, [pc, #40]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x64>)
 8002c72:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c74:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002c78:	d103      	bne.n	8002c82 <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x68>)
 8002c7c:	fb03 f000 	mul.w	r0, r3, r0
 8002c80:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c88:	fb03 f000 	mul.w	r0, r3, r0
 8002c8c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002c8e:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	080095e0 	.word	0x080095e0
 8002c9c:	080095f0 	.word	0x080095f0
 8002ca0:	003d0900 	.word	0x003d0900
 8002ca4:	007a1200 	.word	0x007a1200

08002ca8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	f000 80c0 	beq.w	8002e2e <HAL_RCC_ClockConfig+0x186>
{
 8002cae:	b570      	push	{r4, r5, r6, lr}
 8002cb0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb2:	4b61      	ldr	r3, [pc, #388]	; (8002e38 <HAL_RCC_ClockConfig+0x190>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	428b      	cmp	r3, r1
 8002cbc:	d20c      	bcs.n	8002cd8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4a5e      	ldr	r2, [pc, #376]	; (8002e38 <HAL_RCC_ClockConfig+0x190>)
 8002cc0:	6813      	ldr	r3, [r2, #0]
 8002cc2:	f023 0307 	bic.w	r3, r3, #7
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	6813      	ldr	r3, [r2, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	4299      	cmp	r1, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd8:	6823      	ldr	r3, [r4, #0]
 8002cda:	f013 0f02 	tst.w	r3, #2
 8002cde:	d006      	beq.n	8002cee <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce0:	4a56      	ldr	r2, [pc, #344]	; (8002e3c <HAL_RCC_ClockConfig+0x194>)
 8002ce2:	6853      	ldr	r3, [r2, #4]
 8002ce4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce8:	68a0      	ldr	r0, [r4, #8]
 8002cea:	4303      	orrs	r3, r0
 8002cec:	6053      	str	r3, [r2, #4]
 8002cee:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	f013 0f01 	tst.w	r3, #1
 8002cf6:	d05a      	beq.n	8002dae <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf8:	6863      	ldr	r3, [r4, #4]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d02d      	beq.n	8002d5a <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d040      	beq.n	8002d84 <HAL_RCC_ClockConfig+0xdc>
 8002d02:	2202      	movs	r2, #2
 8002d04:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d08:	4a4c      	ldr	r2, [pc, #304]	; (8002e3c <HAL_RCC_ClockConfig+0x194>)
 8002d0a:	6810      	ldr	r0, [r2, #0]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	fa92 f2a2 	rbit	r2, r2
 8002d12:	fab2 f282 	clz	r2, r2
 8002d16:	f002 021f 	and.w	r2, r2, #31
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d20:	4210      	tst	r0, r2
 8002d22:	f000 8086 	beq.w	8002e32 <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d26:	4945      	ldr	r1, [pc, #276]	; (8002e3c <HAL_RCC_ClockConfig+0x194>)
 8002d28:	684a      	ldr	r2, [r1, #4]
 8002d2a:	f022 0203 	bic.w	r2, r2, #3
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002d32:	f7fd ff95 	bl	8000c60 <HAL_GetTick>
 8002d36:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d38:	4b40      	ldr	r3, [pc, #256]	; (8002e3c <HAL_RCC_ClockConfig+0x194>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	6862      	ldr	r2, [r4, #4]
 8002d42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d46:	d032      	beq.n	8002dae <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d48:	f7fd ff8a 	bl	8000c60 <HAL_GetTick>
 8002d4c:	1b80      	subs	r0, r0, r6
 8002d4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d52:	4298      	cmp	r0, r3
 8002d54:	d9f0      	bls.n	8002d38 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8002d56:	2003      	movs	r0, #3
 8002d58:	bd70      	pop	{r4, r5, r6, pc}
 8002d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d5e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	4a36      	ldr	r2, [pc, #216]	; (8002e3c <HAL_RCC_ClockConfig+0x194>)
 8002d64:	6810      	ldr	r0, [r2, #0]
 8002d66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d6a:	fa92 f2a2 	rbit	r2, r2
 8002d6e:	fab2 f282 	clz	r2, r2
 8002d72:	f002 021f 	and.w	r2, r2, #31
 8002d76:	2101      	movs	r1, #1
 8002d78:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7c:	4210      	tst	r0, r2
 8002d7e:	d1d2      	bne.n	8002d26 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8002d80:	2001      	movs	r0, #1
 8002d82:	bd70      	pop	{r4, r5, r6, pc}
 8002d84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d88:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8c:	4a2b      	ldr	r2, [pc, #172]	; (8002e3c <HAL_RCC_ClockConfig+0x194>)
 8002d8e:	6810      	ldr	r0, [r2, #0]
 8002d90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d94:	fa92 f2a2 	rbit	r2, r2
 8002d98:	fab2 f282 	clz	r2, r2
 8002d9c:	f002 021f 	and.w	r2, r2, #31
 8002da0:	2101      	movs	r1, #1
 8002da2:	fa01 f202 	lsl.w	r2, r1, r2
 8002da6:	4210      	tst	r0, r2
 8002da8:	d1bd      	bne.n	8002d26 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8002daa:	2001      	movs	r0, #1
 8002dac:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dae:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <HAL_RCC_ClockConfig+0x190>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	429d      	cmp	r5, r3
 8002db8:	d20c      	bcs.n	8002dd4 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4a1f      	ldr	r2, [pc, #124]	; (8002e38 <HAL_RCC_ClockConfig+0x190>)
 8002dbc:	6813      	ldr	r3, [r2, #0]
 8002dbe:	f023 0307 	bic.w	r3, r3, #7
 8002dc2:	432b      	orrs	r3, r5
 8002dc4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	6813      	ldr	r3, [r2, #0]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	429d      	cmp	r5, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 8002dd0:	2001      	movs	r0, #1
}
 8002dd2:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	f013 0f04 	tst.w	r3, #4
 8002dda:	d006      	beq.n	8002dea <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ddc:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <HAL_RCC_ClockConfig+0x194>)
 8002dde:	6853      	ldr	r3, [r2, #4]
 8002de0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002de4:	68e1      	ldr	r1, [r4, #12]
 8002de6:	430b      	orrs	r3, r1
 8002de8:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	f013 0f08 	tst.w	r3, #8
 8002df0:	d007      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df2:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <HAL_RCC_ClockConfig+0x194>)
 8002df4:	6853      	ldr	r3, [r2, #4]
 8002df6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002dfa:	6921      	ldr	r1, [r4, #16]
 8002dfc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e00:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e02:	f7ff ff19 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8002e06:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <HAL_RCC_ClockConfig+0x194>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e0e:	22f0      	movs	r2, #240	; 0xf0
 8002e10:	fa92 f2a2 	rbit	r2, r2
 8002e14:	fab2 f282 	clz	r2, r2
 8002e18:	40d3      	lsrs	r3, r2
 8002e1a:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <HAL_RCC_ClockConfig+0x198>)
 8002e1c:	5cd3      	ldrb	r3, [r2, r3]
 8002e1e:	40d8      	lsrs	r0, r3
 8002e20:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_RCC_ClockConfig+0x19c>)
 8002e22:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e24:	2000      	movs	r0, #0
 8002e26:	f7fd fed7 	bl	8000bd8 <HAL_InitTick>
  return HAL_OK;
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002e2e:	2001      	movs	r0, #1
 8002e30:	4770      	bx	lr
        return HAL_ERROR;
 8002e32:	2001      	movs	r0, #1
 8002e34:	bd70      	pop	{r4, r5, r6, pc}
 8002e36:	bf00      	nop
 8002e38:	40022000 	.word	0x40022000
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	08009608 	.word	0x08009608
 8002e44:	2000006c 	.word	0x2000006c

08002e48 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002e48:	4b01      	ldr	r3, [pc, #4]	; (8002e50 <HAL_RCC_GetHCLKFreq+0x8>)
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	2000006c 	.word	0x2000006c

08002e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e54:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e56:	f7ff fff7 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e5a:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e66:	fa92 f2a2 	rbit	r2, r2
 8002e6a:	fab2 f282 	clz	r2, r2
 8002e6e:	40d3      	lsrs	r3, r2
 8002e70:	4a02      	ldr	r2, [pc, #8]	; (8002e7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
}    
 8002e74:	40d8      	lsrs	r0, r3
 8002e76:	bd08      	pop	{r3, pc}
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	08009618 	.word	0x08009618

08002e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e80:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e82:	f7ff ffe1 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e86:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002e8e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002e92:	fa92 f2a2 	rbit	r2, r2
 8002e96:	fab2 f282 	clz	r2, r2
 8002e9a:	40d3      	lsrs	r3, r2
 8002e9c:	4a02      	ldr	r2, [pc, #8]	; (8002ea8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e9e:	5cd3      	ldrb	r3, [r2, r3]
} 
 8002ea0:	40d8      	lsrs	r0, r3
 8002ea2:	bd08      	pop	{r3, pc}
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	08009618 	.word	0x08009618

08002eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eb2:	6803      	ldr	r3, [r0, #0]
 8002eb4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002eb8:	d044      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eba:	4b64      	ldr	r3, [pc, #400]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002ec2:	d179      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec4:	4b61      	ldr	r3, [pc, #388]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ecc:	61da      	str	r2, [r3, #28]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ed8:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	4b5d      	ldr	r3, [pc, #372]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ee2:	d06b      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ee4:	4b59      	ldr	r3, [pc, #356]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ee8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002eec:	d021      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8002eee:	6862      	ldr	r2, [r4, #4]
 8002ef0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d01c      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ef8:	4854      	ldr	r0, [pc, #336]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002efa:	6a01      	ldr	r1, [r0, #32]
 8002efc:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8002f00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f04:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f08:	fab2 f282 	clz	r2, r2
 8002f0c:	4f51      	ldr	r7, [pc, #324]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002f0e:	443a      	add	r2, r7
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	f04f 0e01 	mov.w	lr, #1
 8002f16:	f8c2 e000 	str.w	lr, [r2]
 8002f1a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	443b      	add	r3, r7
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f2a:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f2c:	f011 0f01 	tst.w	r1, #1
 8002f30:	d158      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f32:	4a46      	ldr	r2, [pc, #280]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002f34:	6a13      	ldr	r3, [r2, #32]
 8002f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f3a:	6861      	ldr	r1, [r4, #4]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f40:	2d00      	cmp	r5, #0
 8002f42:	d17a      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	f013 0f01 	tst.w	r3, #1
 8002f4a:	d006      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f4c:	4a3f      	ldr	r2, [pc, #252]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002f4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002f50:	f023 0303 	bic.w	r3, r3, #3
 8002f54:	68a1      	ldr	r1, [r4, #8]
 8002f56:	430b      	orrs	r3, r1
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	f013 0f20 	tst.w	r3, #32
 8002f60:	d006      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f62:	4a3a      	ldr	r2, [pc, #232]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002f64:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002f66:	f023 0310 	bic.w	r3, r3, #16
 8002f6a:	68e1      	ldr	r1, [r4, #12]
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f76:	d006      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f78:	4a34      	ldr	r2, [pc, #208]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002f7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f7c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002f80:	6921      	ldr	r1, [r4, #16]
 8002f82:	430b      	orrs	r3, r1
 8002f84:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002f8c:	d006      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f8e:	4a2f      	ldr	r2, [pc, #188]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002f90:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f96:	6961      	ldr	r1, [r4, #20]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002f9c:	6823      	ldr	r3, [r4, #0]
 8002f9e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002fa2:	d051      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002fa4:	4a29      	ldr	r2, [pc, #164]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002fa6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fac:	69a1      	ldr	r1, [r4, #24]
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fb2:	2000      	movs	r0, #0
}
 8002fb4:	b003      	add	sp, #12
 8002fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002fb8:	2500      	movs	r5, #0
 8002fba:	e78e      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fbc:	4a24      	ldr	r2, [pc, #144]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fbe:	6813      	ldr	r3, [r2, #0]
 8002fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002fc6:	f7fd fe4b 	bl	8000c60 <HAL_GetTick>
 8002fca:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002fd4:	d186      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd6:	f7fd fe43 	bl	8000c60 <HAL_GetTick>
 8002fda:	1b80      	subs	r0, r0, r6
 8002fdc:	2864      	cmp	r0, #100	; 0x64
 8002fde:	d9f5      	bls.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8002fe0:	2003      	movs	r0, #3
 8002fe2:	e7e7      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8002fe4:	f7fd fe3c 	bl	8000c60 <HAL_GetTick>
 8002fe8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fea:	e014      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002fec:	4b17      	ldr	r3, [pc, #92]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002fee:	6a19      	ldr	r1, [r3, #32]
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	2201      	movs	r2, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	4219      	tst	r1, r3
 8003006:	d194      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fd fe2a 	bl	8000c60 <HAL_GetTick>
 800300c:	1b80      	subs	r0, r0, r6
 800300e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003012:	4298      	cmp	r0, r3
 8003014:	d816      	bhi.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003016:	2302      	movs	r3, #2
 8003018:	fa93 f2a3 	rbit	r2, r3
 800301c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	f043 0302 	orr.w	r3, r3, #2
 800302a:	2b02      	cmp	r3, #2
 800302c:	d0de      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x140>
 800302e:	2302      	movs	r3, #2
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8003036:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003038:	e7da      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 800303a:	69d3      	ldr	r3, [r2, #28]
 800303c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003040:	61d3      	str	r3, [r2, #28]
 8003042:	e77f      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8003044:	2003      	movs	r0, #3
 8003046:	e7b5      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 8003048:	2000      	movs	r0, #0
 800304a:	e7b3      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800304c:	40021000 	.word	0x40021000
 8003050:	40007000 	.word	0x40007000
 8003054:	10908100 	.word	0x10908100

08003058 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003058:	6802      	ldr	r2, [r0, #0]
 800305a:	68d3      	ldr	r3, [r2, #12]
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	60d3      	str	r3, [r2, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003062:	6802      	ldr	r2, [r0, #0]
 8003064:	6813      	ldr	r3, [r2, #0]
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 800306c:	2000      	movs	r0, #0
 800306e:	4770      	bx	lr

08003070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003070:	4770      	bx	lr

08003072 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003072:	4770      	bx	lr

08003074 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003074:	4770      	bx	lr

08003076 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003076:	4770      	bx	lr

08003078 <HAL_TIM_IRQHandler>:
{
 8003078:	b510      	push	{r4, lr}
 800307a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800307c:	6803      	ldr	r3, [r0, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	f012 0f02 	tst.w	r2, #2
 8003084:	d011      	beq.n	80030aa <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	f012 0f02 	tst.w	r2, #2
 800308c:	d00d      	beq.n	80030aa <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800308e:	f06f 0202 	mvn.w	r2, #2
 8003092:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003094:	2301      	movs	r3, #1
 8003096:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003098:	6803      	ldr	r3, [r0, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f013 0f03 	tst.w	r3, #3
 80030a0:	d079      	beq.n	8003196 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	f7ff ffe6 	bl	8003072 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a6:	2300      	movs	r3, #0
 80030a8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	f012 0f04 	tst.w	r2, #4
 80030b2:	d012      	beq.n	80030da <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	f012 0f04 	tst.w	r2, #4
 80030ba:	d00e      	beq.n	80030da <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030bc:	f06f 0204 	mvn.w	r2, #4
 80030c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030c2:	2302      	movs	r3, #2
 80030c4:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f413 7f40 	tst.w	r3, #768	; 0x300
 80030ce:	d068      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80030d0:	4620      	mov	r0, r4
 80030d2:	f7ff ffce 	bl	8003072 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d6:	2300      	movs	r3, #0
 80030d8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	f012 0f08 	tst.w	r2, #8
 80030e2:	d012      	beq.n	800310a <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	f012 0f08 	tst.w	r2, #8
 80030ea:	d00e      	beq.n	800310a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030ec:	f06f 0208 	mvn.w	r2, #8
 80030f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f2:	2304      	movs	r3, #4
 80030f4:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f013 0f03 	tst.w	r3, #3
 80030fe:	d057      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003100:	4620      	mov	r0, r4
 8003102:	f7ff ffb6 	bl	8003072 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	2300      	movs	r3, #0
 8003108:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	f012 0f10 	tst.w	r2, #16
 8003112:	d012      	beq.n	800313a <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	f012 0f10 	tst.w	r2, #16
 800311a:	d00e      	beq.n	800313a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800311c:	f06f 0210 	mvn.w	r2, #16
 8003120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003122:	2308      	movs	r3, #8
 8003124:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800312e:	d046      	beq.n	80031be <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003130:	4620      	mov	r0, r4
 8003132:	f7ff ff9e 	bl	8003072 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003136:	2300      	movs	r3, #0
 8003138:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	f012 0f01 	tst.w	r2, #1
 8003142:	d003      	beq.n	800314c <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	f012 0f01 	tst.w	r2, #1
 800314a:	d13f      	bne.n	80031cc <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003154:	d003      	beq.n	800315e <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	f012 0f80 	tst.w	r2, #128	; 0x80
 800315c:	d13d      	bne.n	80031da <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003166:	d003      	beq.n	8003170 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800316e:	d13b      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003178:	d003      	beq.n	8003182 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003180:	d139      	bne.n	80031f6 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	f012 0f20 	tst.w	r2, #32
 800318a:	d003      	beq.n	8003194 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	f012 0f20 	tst.w	r2, #32
 8003192:	d137      	bne.n	8003204 <HAL_TIM_IRQHandler+0x18c>
 8003194:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003196:	f7ff ff6b 	bl	8003070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800319a:	4620      	mov	r0, r4
 800319c:	f7ff ff6a 	bl	8003074 <HAL_TIM_PWM_PulseFinishedCallback>
 80031a0:	e781      	b.n	80030a6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	4620      	mov	r0, r4
 80031a4:	f7ff ff64 	bl	8003070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	4620      	mov	r0, r4
 80031aa:	f7ff ff63 	bl	8003074 <HAL_TIM_PWM_PulseFinishedCallback>
 80031ae:	e792      	b.n	80030d6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b0:	4620      	mov	r0, r4
 80031b2:	f7ff ff5d 	bl	8003070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80031b6:	4620      	mov	r0, r4
 80031b8:	f7ff ff5c 	bl	8003074 <HAL_TIM_PWM_PulseFinishedCallback>
 80031bc:	e7a3      	b.n	8003106 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031be:	4620      	mov	r0, r4
 80031c0:	f7ff ff56 	bl	8003070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c4:	4620      	mov	r0, r4
 80031c6:	f7ff ff55 	bl	8003074 <HAL_TIM_PWM_PulseFinishedCallback>
 80031ca:	e7b4      	b.n	8003136 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031cc:	f06f 0201 	mvn.w	r2, #1
 80031d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80031d2:	4620      	mov	r0, r4
 80031d4:	f001 fd44 	bl	8004c60 <HAL_TIM_PeriodElapsedCallback>
 80031d8:	e7b8      	b.n	800314c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80031e0:	4620      	mov	r0, r4
 80031e2:	f000 f8a4 	bl	800332e <HAL_TIMEx_BreakCallback>
 80031e6:	e7ba      	b.n	800315e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80031ee:	4620      	mov	r0, r4
 80031f0:	f000 f89e 	bl	8003330 <HAL_TIMEx_Break2Callback>
 80031f4:	e7bc      	b.n	8003170 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80031fc:	4620      	mov	r0, r4
 80031fe:	f7ff ff3a 	bl	8003076 <HAL_TIM_TriggerCallback>
 8003202:	e7be      	b.n	8003182 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003204:	f06f 0220 	mvn.w	r2, #32
 8003208:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800320a:	4620      	mov	r0, r4
 800320c:	f000 f88e 	bl	800332c <HAL_TIMEx_CommutationCallback>
}
 8003210:	e7c0      	b.n	8003194 <HAL_TIM_IRQHandler+0x11c>
	...

08003214 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8003214:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003216:	4a23      	ldr	r2, [pc, #140]	; (80032a4 <TIM_Base_SetConfig+0x90>)
 8003218:	4290      	cmp	r0, r2
 800321a:	d03d      	beq.n	8003298 <TIM_Base_SetConfig+0x84>
 800321c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003220:	d03a      	beq.n	8003298 <TIM_Base_SetConfig+0x84>
 8003222:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003226:	4290      	cmp	r0, r2
 8003228:	d036      	beq.n	8003298 <TIM_Base_SetConfig+0x84>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800322a:	4a1e      	ldr	r2, [pc, #120]	; (80032a4 <TIM_Base_SetConfig+0x90>)
 800322c:	4290      	cmp	r0, r2
 800322e:	d012      	beq.n	8003256 <TIM_Base_SetConfig+0x42>
 8003230:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003234:	d00f      	beq.n	8003256 <TIM_Base_SetConfig+0x42>
 8003236:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800323a:	4290      	cmp	r0, r2
 800323c:	d00b      	beq.n	8003256 <TIM_Base_SetConfig+0x42>
 800323e:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8003242:	4290      	cmp	r0, r2
 8003244:	d007      	beq.n	8003256 <TIM_Base_SetConfig+0x42>
 8003246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800324a:	4290      	cmp	r0, r2
 800324c:	d003      	beq.n	8003256 <TIM_Base_SetConfig+0x42>
 800324e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003252:	4290      	cmp	r0, r2
 8003254:	d103      	bne.n	800325e <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800325a:	68ca      	ldr	r2, [r1, #12]
 800325c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800325e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003262:	694a      	ldr	r2, [r1, #20]
 8003264:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003266:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003268:	688b      	ldr	r3, [r1, #8]
 800326a:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800326c:	680b      	ldr	r3, [r1, #0]
 800326e:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <TIM_Base_SetConfig+0x90>)
 8003272:	4298      	cmp	r0, r3
 8003274:	d00b      	beq.n	800328e <TIM_Base_SetConfig+0x7a>
 8003276:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800327a:	4298      	cmp	r0, r3
 800327c:	d007      	beq.n	800328e <TIM_Base_SetConfig+0x7a>
 800327e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003282:	4298      	cmp	r0, r3
 8003284:	d003      	beq.n	800328e <TIM_Base_SetConfig+0x7a>
 8003286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800328a:	4298      	cmp	r0, r3
 800328c:	d101      	bne.n	8003292 <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800328e:	690b      	ldr	r3, [r1, #16]
 8003290:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003292:	2301      	movs	r3, #1
 8003294:	6143      	str	r3, [r0, #20]
 8003296:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800329c:	684a      	ldr	r2, [r1, #4]
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7c3      	b.n	800322a <TIM_Base_SetConfig+0x16>
 80032a2:	bf00      	nop
 80032a4:	40012c00 	.word	0x40012c00

080032a8 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80032a8:	b1a8      	cbz	r0, 80032d6 <HAL_TIM_Base_Init+0x2e>
{ 
 80032aa:	b510      	push	{r4, lr}
 80032ac:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80032ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80032b2:	b15b      	cbz	r3, 80032cc <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80032b4:	2302      	movs	r3, #2
 80032b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80032ba:	1d21      	adds	r1, r4, #4
 80032bc:	6820      	ldr	r0, [r4, #0]
 80032be:	f7ff ffa9 	bl	8003214 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80032c8:	2000      	movs	r0, #0
 80032ca:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80032cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80032d0:	f003 f85e 	bl	8006390 <HAL_TIM_Base_MspInit>
 80032d4:	e7ee      	b.n	80032b4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80032d6:	2001      	movs	r0, #1
 80032d8:	4770      	bx	lr
	...

080032dc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80032dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d01f      	beq.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0x48>
{
 80032e4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80032e6:	2301      	movs	r3, #1
 80032e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032ec:	6804      	ldr	r4, [r0, #0]
 80032ee:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032f0:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032f2:	4d0d      	ldr	r5, [pc, #52]	; (8003328 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 80032f4:	42ac      	cmp	r4, r5
 80032f6:	d010      	beq.n	800331a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032fc:	680d      	ldr	r5, [r1, #0]
 80032fe:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003304:	6889      	ldr	r1, [r1, #8]
 8003306:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003308:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800330a:	6803      	ldr	r3, [r0, #0]
 800330c:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800330e:	2300      	movs	r3, #0
 8003310:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8003314:	4618      	mov	r0, r3
} 
 8003316:	bc30      	pop	{r4, r5}
 8003318:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 800331a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800331e:	684d      	ldr	r5, [r1, #4]
 8003320:	432b      	orrs	r3, r5
 8003322:	e7e9      	b.n	80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
  __HAL_LOCK(htim);
 8003324:	2002      	movs	r0, #2
 8003326:	4770      	bx	lr
 8003328:	40012c00 	.word	0x40012c00

0800332c <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800332c:	4770      	bx	lr

0800332e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800332e:	4770      	bx	lr

08003330 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003330:	4770      	bx	lr

08003332 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003332:	6802      	ldr	r2, [r0, #0]
 8003334:	6813      	ldr	r3, [r2, #0]
 8003336:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800333a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333c:	6802      	ldr	r2, [r0, #0]
 800333e:	6893      	ldr	r3, [r2, #8]
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003346:	2320      	movs	r3, #32
 8003348:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 800334c:	4770      	bx	lr

0800334e <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 800334e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b20      	cmp	r3, #32
 8003356:	d001      	beq.n	800335c <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8003358:	2002      	movs	r0, #2
 800335a:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 800335c:	2900      	cmp	r1, #0
 800335e:	d047      	beq.n	80033f0 <HAL_UART_Receive_IT+0xa2>
 8003360:	2a00      	cmp	r2, #0
 8003362:	d047      	beq.n	80033f4 <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 8003364:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003368:	2b01      	cmp	r3, #1
 800336a:	d045      	beq.n	80033f8 <HAL_UART_Receive_IT+0xaa>
 800336c:	2301      	movs	r3, #1
 800336e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 8003372:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8003374:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8003378:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800337c:	6883      	ldr	r3, [r0, #8]
 800337e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003382:	d006      	beq.n	8003392 <HAL_UART_Receive_IT+0x44>
 8003384:	b9a3      	cbnz	r3, 80033b0 <HAL_UART_Receive_IT+0x62>
 8003386:	6903      	ldr	r3, [r0, #16]
 8003388:	b973      	cbnz	r3, 80033a8 <HAL_UART_Receive_IT+0x5a>
 800338a:	23ff      	movs	r3, #255	; 0xff
 800338c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003390:	e011      	b.n	80033b6 <HAL_UART_Receive_IT+0x68>
 8003392:	6903      	ldr	r3, [r0, #16]
 8003394:	b923      	cbnz	r3, 80033a0 <HAL_UART_Receive_IT+0x52>
 8003396:	f240 13ff 	movw	r3, #511	; 0x1ff
 800339a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800339e:	e00a      	b.n	80033b6 <HAL_UART_Receive_IT+0x68>
 80033a0:	23ff      	movs	r3, #255	; 0xff
 80033a2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80033a6:	e006      	b.n	80033b6 <HAL_UART_Receive_IT+0x68>
 80033a8:	237f      	movs	r3, #127	; 0x7f
 80033aa:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80033ae:	e002      	b.n	80033b6 <HAL_UART_Receive_IT+0x68>
 80033b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033b4:	d012      	beq.n	80033dc <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033ba:	2222      	movs	r2, #34	; 0x22
 80033bc:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 80033c0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c4:	6801      	ldr	r1, [r0, #0]
 80033c6:	688a      	ldr	r2, [r1, #8]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80033ce:	6801      	ldr	r1, [r0, #0]
 80033d0:	680a      	ldr	r2, [r1, #0]
 80033d2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80033d6:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80033d8:	4618      	mov	r0, r3
 80033da:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80033dc:	6903      	ldr	r3, [r0, #16]
 80033de:	b91b      	cbnz	r3, 80033e8 <HAL_UART_Receive_IT+0x9a>
 80033e0:	237f      	movs	r3, #127	; 0x7f
 80033e2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80033e6:	e7e6      	b.n	80033b6 <HAL_UART_Receive_IT+0x68>
 80033e8:	233f      	movs	r3, #63	; 0x3f
 80033ea:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80033ee:	e7e2      	b.n	80033b6 <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 80033f0:	2001      	movs	r0, #1
 80033f2:	4770      	bx	lr
 80033f4:	2001      	movs	r0, #1
 80033f6:	4770      	bx	lr
    __HAL_LOCK(huart);
 80033f8:	2002      	movs	r0, #2
}
 80033fa:	4770      	bx	lr

080033fc <HAL_UART_TxCpltCallback>:
{
 80033fc:	4770      	bx	lr

080033fe <HAL_UART_ErrorCallback>:
{
 80033fe:	4770      	bx	lr

08003400 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003400:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003402:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800340a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 800340e:	f7ff fff6 	bl	80033fe <HAL_UART_ErrorCallback>
 8003412:	bd08      	pop	{r3, pc}

08003414 <UART_SetConfig>:
{
 8003414:	b538      	push	{r3, r4, r5, lr}
 8003416:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003418:	6883      	ldr	r3, [r0, #8]
 800341a:	6902      	ldr	r2, [r0, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	6942      	ldr	r2, [r0, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	69c2      	ldr	r2, [r0, #28]
 8003424:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003426:	6801      	ldr	r1, [r0, #0]
 8003428:	6808      	ldr	r0, [r1, #0]
 800342a:	4a64      	ldr	r2, [pc, #400]	; (80035bc <UART_SetConfig+0x1a8>)
 800342c:	4002      	ands	r2, r0
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003432:	6822      	ldr	r2, [r4, #0]
 8003434:	6853      	ldr	r3, [r2, #4]
 8003436:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800343a:	68e1      	ldr	r1, [r4, #12]
 800343c:	430b      	orrs	r3, r1
 800343e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003440:	69a3      	ldr	r3, [r4, #24]
 8003442:	6a22      	ldr	r2, [r4, #32]
 8003444:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003446:	6821      	ldr	r1, [r4, #0]
 8003448:	688a      	ldr	r2, [r1, #8]
 800344a:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003452:	6825      	ldr	r5, [r4, #0]
 8003454:	4b5a      	ldr	r3, [pc, #360]	; (80035c0 <UART_SetConfig+0x1ac>)
 8003456:	429d      	cmp	r5, r3
 8003458:	d015      	beq.n	8003486 <UART_SetConfig+0x72>
 800345a:	4b5a      	ldr	r3, [pc, #360]	; (80035c4 <UART_SetConfig+0x1b0>)
 800345c:	429d      	cmp	r5, r3
 800345e:	d029      	beq.n	80034b4 <UART_SetConfig+0xa0>
 8003460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003464:	429d      	cmp	r5, r3
 8003466:	d021      	beq.n	80034ac <UART_SetConfig+0x98>
 8003468:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800346a:	69e2      	ldr	r2, [r4, #28]
 800346c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003470:	d022      	beq.n	80034b8 <UART_SetConfig+0xa4>
    switch (clocksource)
 8003472:	2b08      	cmp	r3, #8
 8003474:	f200 809f 	bhi.w	80035b6 <UART_SetConfig+0x1a2>
 8003478:	e8df f003 	tbb	[pc, r3]
 800347c:	9d7c7166 	.word	0x9d7c7166
 8003480:	9d9d9d88 	.word	0x9d9d9d88
 8003484:	93          	.byte	0x93
 8003485:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003486:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	2b03      	cmp	r3, #3
 8003492:	d809      	bhi.n	80034a8 <UART_SetConfig+0x94>
 8003494:	e8df f003 	tbb	[pc, r3]
 8003498:	0c060402 	.word	0x0c060402
 800349c:	2300      	movs	r3, #0
 800349e:	e7e4      	b.n	800346a <UART_SetConfig+0x56>
 80034a0:	2304      	movs	r3, #4
 80034a2:	e7e2      	b.n	800346a <UART_SetConfig+0x56>
 80034a4:	2308      	movs	r3, #8
 80034a6:	e7e0      	b.n	800346a <UART_SetConfig+0x56>
 80034a8:	2310      	movs	r3, #16
 80034aa:	e7de      	b.n	800346a <UART_SetConfig+0x56>
 80034ac:	2300      	movs	r3, #0
 80034ae:	e7dc      	b.n	800346a <UART_SetConfig+0x56>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e7da      	b.n	800346a <UART_SetConfig+0x56>
 80034b4:	2300      	movs	r3, #0
 80034b6:	e7d8      	b.n	800346a <UART_SetConfig+0x56>
    switch (clocksource)
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d842      	bhi.n	8003542 <UART_SetConfig+0x12e>
 80034bc:	e8df f003 	tbb	[pc, r3]
 80034c0:	41221705 	.word	0x41221705
 80034c4:	4141412d 	.word	0x4141412d
 80034c8:	38          	.byte	0x38
 80034c9:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80034ca:	f7ff fcc3 	bl	8002e54 <HAL_RCC_GetPCLK1Freq>
 80034ce:	6862      	ldr	r2, [r4, #4]
 80034d0:	0853      	lsrs	r3, r2, #1
 80034d2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80034d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80034da:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80034dc:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80034de:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034e2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80034e6:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 80034e8:	6822      	ldr	r2, [r4, #0]
 80034ea:	60d3      	str	r3, [r2, #12]
 80034ec:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80034ee:	f7ff fcc7 	bl	8002e80 <HAL_RCC_GetPCLK2Freq>
 80034f2:	6862      	ldr	r2, [r4, #4]
 80034f4:	0853      	lsrs	r3, r2, #1
 80034f6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80034fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80034fe:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003500:	2000      	movs	r0, #0
        break;
 8003502:	e7ec      	b.n	80034de <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003504:	6862      	ldr	r2, [r4, #4]
 8003506:	0853      	lsrs	r3, r2, #1
 8003508:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800350c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003510:	fbb3 f3f2 	udiv	r3, r3, r2
 8003514:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003516:	2000      	movs	r0, #0
        break;
 8003518:	e7e1      	b.n	80034de <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800351a:	f7ff fb8d 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 800351e:	6862      	ldr	r2, [r4, #4]
 8003520:	0853      	lsrs	r3, r2, #1
 8003522:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003526:	fbb3 f3f2 	udiv	r3, r3, r2
 800352a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800352c:	2000      	movs	r0, #0
        break;
 800352e:	e7d6      	b.n	80034de <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003530:	6862      	ldr	r2, [r4, #4]
 8003532:	0853      	lsrs	r3, r2, #1
 8003534:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003538:	fbb3 f3f2 	udiv	r3, r3, r2
 800353c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800353e:	2000      	movs	r0, #0
        break;
 8003540:	e7cd      	b.n	80034de <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8003542:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003544:	2300      	movs	r3, #0
 8003546:	e7ca      	b.n	80034de <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003548:	f7ff fc84 	bl	8002e54 <HAL_RCC_GetPCLK1Freq>
 800354c:	6863      	ldr	r3, [r4, #4]
 800354e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003552:	fbb0 f0f3 	udiv	r0, r0, r3
 8003556:	b280      	uxth	r0, r0
 8003558:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800355a:	2000      	movs	r0, #0
        break;
 800355c:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800355e:	f7ff fc8f 	bl	8002e80 <HAL_RCC_GetPCLK2Freq>
 8003562:	6863      	ldr	r3, [r4, #4]
 8003564:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003568:	fbb0 f0f3 	udiv	r0, r0, r3
 800356c:	b280      	uxth	r0, r0
 800356e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003570:	2000      	movs	r0, #0
        break;
 8003572:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003574:	6862      	ldr	r2, [r4, #4]
 8003576:	0853      	lsrs	r3, r2, #1
 8003578:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800357c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003580:	fbb3 f3f2 	udiv	r3, r3, r2
 8003584:	b29b      	uxth	r3, r3
 8003586:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003588:	2000      	movs	r0, #0
        break;
 800358a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800358c:	f7ff fb54 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8003590:	6863      	ldr	r3, [r4, #4]
 8003592:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003596:	fbb0 f0f3 	udiv	r0, r0, r3
 800359a:	b280      	uxth	r0, r0
 800359c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800359e:	2000      	movs	r0, #0
        break;
 80035a0:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80035a2:	6862      	ldr	r2, [r4, #4]
 80035a4:	0853      	lsrs	r3, r2, #1
 80035a6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80035aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80035b2:	2000      	movs	r0, #0
        break;
 80035b4:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 80035b6:	2001      	movs	r0, #1
}
 80035b8:	bd38      	pop	{r3, r4, r5, pc}
 80035ba:	bf00      	nop
 80035bc:	efff69f3 	.word	0xefff69f3
 80035c0:	40013800 	.word	0x40013800
 80035c4:	40004400 	.word	0x40004400

080035c8 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035ca:	f013 0f01 	tst.w	r3, #1
 80035ce:	d006      	beq.n	80035de <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035d0:	6802      	ldr	r2, [r0, #0]
 80035d2:	6853      	ldr	r3, [r2, #4]
 80035d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80035d8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80035da:	430b      	orrs	r3, r1
 80035dc:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035e0:	f013 0f02 	tst.w	r3, #2
 80035e4:	d006      	beq.n	80035f4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035e6:	6802      	ldr	r2, [r0, #0]
 80035e8:	6853      	ldr	r3, [r2, #4]
 80035ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ee:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035f6:	f013 0f04 	tst.w	r3, #4
 80035fa:	d006      	beq.n	800360a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035fc:	6802      	ldr	r2, [r0, #0]
 80035fe:	6853      	ldr	r3, [r2, #4]
 8003600:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003604:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003606:	430b      	orrs	r3, r1
 8003608:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800360a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800360c:	f013 0f08 	tst.w	r3, #8
 8003610:	d006      	beq.n	8003620 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003612:	6802      	ldr	r2, [r0, #0]
 8003614:	6853      	ldr	r3, [r2, #4]
 8003616:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800361a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800361c:	430b      	orrs	r3, r1
 800361e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003620:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003622:	f013 0f10 	tst.w	r3, #16
 8003626:	d006      	beq.n	8003636 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003628:	6802      	ldr	r2, [r0, #0]
 800362a:	6893      	ldr	r3, [r2, #8]
 800362c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003630:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003632:	430b      	orrs	r3, r1
 8003634:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003636:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003638:	f013 0f20 	tst.w	r3, #32
 800363c:	d006      	beq.n	800364c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800363e:	6802      	ldr	r2, [r0, #0]
 8003640:	6893      	ldr	r3, [r2, #8]
 8003642:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003646:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003648:	430b      	orrs	r3, r1
 800364a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800364c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800364e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003652:	d00a      	beq.n	800366a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003654:	6802      	ldr	r2, [r0, #0]
 8003656:	6853      	ldr	r3, [r2, #4]
 8003658:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800365c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800365e:	430b      	orrs	r3, r1
 8003660:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003662:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003668:	d00b      	beq.n	8003682 <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800366a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800366c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003670:	d006      	beq.n	8003680 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003672:	6802      	ldr	r2, [r0, #0]
 8003674:	6853      	ldr	r3, [r2, #4]
 8003676:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800367a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800367c:	430b      	orrs	r3, r1
 800367e:	6053      	str	r3, [r2, #4]
 8003680:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003682:	6802      	ldr	r2, [r0, #0]
 8003684:	6853      	ldr	r3, [r2, #4]
 8003686:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800368a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800368c:	430b      	orrs	r3, r1
 800368e:	6053      	str	r3, [r2, #4]
 8003690:	e7eb      	b.n	800366a <UART_AdvFeatureConfig+0xa2>

08003692 <UART_WaitOnFlagUntilTimeout>:
{
 8003692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003696:	4605      	mov	r5, r0
 8003698:	460f      	mov	r7, r1
 800369a:	4616      	mov	r6, r2
 800369c:	4698      	mov	r8, r3
 800369e:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	ea37 0303 	bics.w	r3, r7, r3
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	42b3      	cmp	r3, r6
 80036b0:	d11e      	bne.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80036b2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80036b6:	d0f3      	beq.n	80036a0 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80036b8:	b12c      	cbz	r4, 80036c6 <UART_WaitOnFlagUntilTimeout+0x34>
 80036ba:	f7fd fad1 	bl	8000c60 <HAL_GetTick>
 80036be:	eba0 0008 	sub.w	r0, r0, r8
 80036c2:	4284      	cmp	r4, r0
 80036c4:	d2ec      	bcs.n	80036a0 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036c6:	682a      	ldr	r2, [r5, #0]
 80036c8:	6813      	ldr	r3, [r2, #0]
 80036ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036ce:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d0:	682a      	ldr	r2, [r5, #0]
 80036d2:	6893      	ldr	r3, [r2, #8]
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80036da:	2320      	movs	r3, #32
 80036dc:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80036e0:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80036e4:	2300      	movs	r3, #0
 80036e6:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 80036ea:	2003      	movs	r0, #3
 80036ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80036f0:	2000      	movs	r0, #0
}
 80036f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080036f6 <HAL_UART_Transmit>:
{
 80036f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80036fe:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b20      	cmp	r3, #32
 8003706:	d004      	beq.n	8003712 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
}
 800370a:	4618      	mov	r0, r3
 800370c:	b002      	add	sp, #8
 800370e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003712:	4604      	mov	r4, r0
 8003714:	460d      	mov	r5, r1
 8003716:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8003718:	2900      	cmp	r1, #0
 800371a:	d04e      	beq.n	80037ba <HAL_UART_Transmit+0xc4>
 800371c:	2a00      	cmp	r2, #0
 800371e:	d04e      	beq.n	80037be <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8003720:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_UART_Transmit+0x36>
 8003728:	2302      	movs	r3, #2
 800372a:	e7ee      	b.n	800370a <HAL_UART_Transmit+0x14>
 800372c:	2301      	movs	r3, #1
 800372e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003732:	2300      	movs	r3, #0
 8003734:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003736:	2321      	movs	r3, #33	; 0x21
 8003738:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 800373c:	f7fd fa90 	bl	8000c60 <HAL_GetTick>
 8003740:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003742:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8003746:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800374a:	e003      	b.n	8003754 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	782a      	ldrb	r2, [r5, #0]
 8003750:	851a      	strh	r2, [r3, #40]	; 0x28
 8003752:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 8003754:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003758:	b29b      	uxth	r3, r3
 800375a:	b1e3      	cbz	r3, 8003796 <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 800375c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29b      	uxth	r3, r3
 8003766:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800376a:	9600      	str	r6, [sp, #0]
 800376c:	463b      	mov	r3, r7
 800376e:	2200      	movs	r2, #0
 8003770:	2180      	movs	r1, #128	; 0x80
 8003772:	4620      	mov	r0, r4
 8003774:	f7ff ff8d 	bl	8003692 <UART_WaitOnFlagUntilTimeout>
 8003778:	bb18      	cbnz	r0, 80037c2 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800377a:	68a3      	ldr	r3, [r4, #8]
 800377c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003780:	d1e4      	bne.n	800374c <HAL_UART_Transmit+0x56>
 8003782:	6923      	ldr	r3, [r4, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e1      	bne.n	800374c <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003788:	6822      	ldr	r2, [r4, #0]
 800378a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800378e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003792:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8003794:	e7de      	b.n	8003754 <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003796:	9600      	str	r6, [sp, #0]
 8003798:	463b      	mov	r3, r7
 800379a:	2200      	movs	r2, #0
 800379c:	2140      	movs	r1, #64	; 0x40
 800379e:	4620      	mov	r0, r4
 80037a0:	f7ff ff77 	bl	8003692 <UART_WaitOnFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	b108      	cbz	r0, 80037ac <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e7ae      	b.n	800370a <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 80037ac:	2220      	movs	r2, #32
 80037ae:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80037b2:	2200      	movs	r2, #0
 80037b4:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 80037b8:	e7a7      	b.n	800370a <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e7a5      	b.n	800370a <HAL_UART_Transmit+0x14>
 80037be:	2301      	movs	r3, #1
 80037c0:	e7a3      	b.n	800370a <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e7a1      	b.n	800370a <HAL_UART_Transmit+0x14>

080037c6 <UART_CheckIdleState>:
{
 80037c6:	b530      	push	{r4, r5, lr}
 80037c8:	b083      	sub	sp, #12
 80037ca:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80037d0:	f7fd fa46 	bl	8000c60 <HAL_GetTick>
 80037d4:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f013 0f08 	tst.w	r3, #8
 80037de:	d10e      	bne.n	80037fe <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f013 0f04 	tst.w	r3, #4
 80037e8:	d117      	bne.n	800381a <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 80037ea:	2320      	movs	r3, #32
 80037ec:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80037f0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 80037f4:	2000      	movs	r0, #0
 80037f6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 80037fa:	b003      	add	sp, #12
 80037fc:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	4603      	mov	r3, r0
 8003806:	2200      	movs	r2, #0
 8003808:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800380c:	4620      	mov	r0, r4
 800380e:	f7ff ff40 	bl	8003692 <UART_WaitOnFlagUntilTimeout>
 8003812:	2800      	cmp	r0, #0
 8003814:	d0e4      	beq.n	80037e0 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003816:	2003      	movs	r0, #3
 8003818:	e7ef      	b.n	80037fa <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800381a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	462b      	mov	r3, r5
 8003822:	2200      	movs	r2, #0
 8003824:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003828:	4620      	mov	r0, r4
 800382a:	f7ff ff32 	bl	8003692 <UART_WaitOnFlagUntilTimeout>
 800382e:	2800      	cmp	r0, #0
 8003830:	d0db      	beq.n	80037ea <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8003832:	2003      	movs	r0, #3
 8003834:	e7e1      	b.n	80037fa <UART_CheckIdleState+0x34>

08003836 <HAL_UART_Init>:
  if(huart == NULL)
 8003836:	b378      	cbz	r0, 8003898 <HAL_UART_Init+0x62>
{
 8003838:	b510      	push	{r4, lr}
 800383a:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 800383c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003840:	b30b      	cbz	r3, 8003886 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003842:	2324      	movs	r3, #36	; 0x24
 8003844:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003848:	6822      	ldr	r2, [r4, #0]
 800384a:	6813      	ldr	r3, [r2, #0]
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003852:	4620      	mov	r0, r4
 8003854:	f7ff fdde 	bl	8003414 <UART_SetConfig>
 8003858:	2801      	cmp	r0, #1
 800385a:	d01f      	beq.n	800389c <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800385c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800385e:	b9bb      	cbnz	r3, 8003890 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003860:	6822      	ldr	r2, [r4, #0]
 8003862:	6853      	ldr	r3, [r2, #4]
 8003864:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003868:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800386a:	6822      	ldr	r2, [r4, #0]
 800386c:	6893      	ldr	r3, [r2, #8]
 800386e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003872:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	6813      	ldr	r3, [r2, #0]
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800387e:	4620      	mov	r0, r4
 8003880:	f7ff ffa1 	bl	80037c6 <UART_CheckIdleState>
 8003884:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003886:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800388a:	f002 fda1 	bl	80063d0 <HAL_UART_MspInit>
 800388e:	e7d8      	b.n	8003842 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8003890:	4620      	mov	r0, r4
 8003892:	f7ff fe99 	bl	80035c8 <UART_AdvFeatureConfig>
 8003896:	e7e3      	b.n	8003860 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8003898:	2001      	movs	r0, #1
 800389a:	4770      	bx	lr
}
 800389c:	bd10      	pop	{r4, pc}

0800389e <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800389e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b21      	cmp	r3, #33	; 0x21
 80038a6:	d001      	beq.n	80038ac <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80038a8:	2002      	movs	r0, #2
  }
}
 80038aa:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 80038ac:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	b193      	cbz	r3, 80038da <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b4:	6883      	ldr	r3, [r0, #8]
 80038b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ba:	d01a      	beq.n	80038f2 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80038bc:	6802      	ldr	r2, [r0, #0]
 80038be:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80038c0:	1c59      	adds	r1, r3, #1
 80038c2:	64c1      	str	r1, [r0, #76]	; 0x4c
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80038c8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 80038d6:	2000      	movs	r0, #0
 80038d8:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80038da:	6802      	ldr	r2, [r0, #0]
 80038dc:	6813      	ldr	r3, [r2, #0]
 80038de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038e2:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038e4:	6802      	ldr	r2, [r0, #0]
 80038e6:	6813      	ldr	r3, [r2, #0]
 80038e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ec:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 80038ee:	2000      	movs	r0, #0
 80038f0:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f2:	6903      	ldr	r3, [r0, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e1      	bne.n	80038bc <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80038f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80038fa:	6802      	ldr	r2, [r0, #0]
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003902:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003904:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003906:	3302      	adds	r3, #2
 8003908:	64c3      	str	r3, [r0, #76]	; 0x4c
 800390a:	e7dd      	b.n	80038c8 <UART_Transmit_IT+0x2a>

0800390c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800390c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800390e:	6801      	ldr	r1, [r0, #0]
 8003910:	680b      	ldr	r3, [r1, #0]
 8003912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003916:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003918:	2320      	movs	r3, #32
 800391a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800391e:	f7ff fd6d 	bl	80033fc <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8003922:	2000      	movs	r0, #0
 8003924:	bd08      	pop	{r3, pc}

08003926 <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8003926:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800392a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b22      	cmp	r3, #34	; 0x22
 8003932:	d006      	beq.n	8003942 <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003934:	6802      	ldr	r2, [r0, #0]
 8003936:	6993      	ldr	r3, [r2, #24]
 8003938:	f043 0308 	orr.w	r3, r3, #8
 800393c:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 800393e:	2002      	movs	r0, #2
 8003940:	4770      	bx	lr
{
 8003942:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003944:	6803      	ldr	r3, [r0, #0]
 8003946:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003948:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800394a:	6881      	ldr	r1, [r0, #8]
 800394c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003950:	d00f      	beq.n	8003972 <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003952:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8003954:	1c4c      	adds	r4, r1, #1
 8003956:	6544      	str	r4, [r0, #84]	; 0x54
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	401a      	ands	r2, r3
 800395c:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 800395e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29b      	uxth	r3, r3
 8003968:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800396c:	b15b      	cbz	r3, 8003986 <UART_Receive_IT+0x60>
    return HAL_OK;
 800396e:	2000      	movs	r0, #0
  }
}
 8003970:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003972:	6901      	ldr	r1, [r0, #16]
 8003974:	2900      	cmp	r1, #0
 8003976:	d1ec      	bne.n	8003952 <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8003978:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 800397a:	401a      	ands	r2, r3
 800397c:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 800397e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003980:	3302      	adds	r3, #2
 8003982:	6543      	str	r3, [r0, #84]	; 0x54
 8003984:	e7eb      	b.n	800395e <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003986:	6802      	ldr	r2, [r0, #0]
 8003988:	6813      	ldr	r3, [r2, #0]
 800398a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800398e:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003990:	6802      	ldr	r2, [r0, #0]
 8003992:	6893      	ldr	r3, [r2, #8]
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800399a:	2320      	movs	r3, #32
 800399c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80039a0:	f001 f964 	bl	8004c6c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80039a4:	2000      	movs	r0, #0
 80039a6:	bd10      	pop	{r4, pc}

080039a8 <HAL_UART_IRQHandler>:
{
 80039a8:	b538      	push	{r3, r4, r5, lr}
 80039aa:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039ac:	6802      	ldr	r2, [r0, #0]
 80039ae:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039b0:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 80039b2:	f013 050f 	ands.w	r5, r3, #15
 80039b6:	d105      	bne.n	80039c4 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039b8:	f013 0f20 	tst.w	r3, #32
 80039bc:	d002      	beq.n	80039c4 <HAL_UART_IRQHandler+0x1c>
 80039be:	f011 0f20 	tst.w	r1, #32
 80039c2:	d160      	bne.n	8003a86 <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 80039c4:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 80039c6:	2d00      	cmp	r5, #0
 80039c8:	d072      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80039ca:	f010 0501 	ands.w	r5, r0, #1
 80039ce:	d102      	bne.n	80039d6 <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80039d0:	f411 7f90 	tst.w	r1, #288	; 0x120
 80039d4:	d06c      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039d6:	f013 0f01 	tst.w	r3, #1
 80039da:	d007      	beq.n	80039ec <HAL_UART_IRQHandler+0x44>
 80039dc:	f411 7f80 	tst.w	r1, #256	; 0x100
 80039e0:	d004      	beq.n	80039ec <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80039e2:	2001      	movs	r0, #1
 80039e4:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039e6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80039e8:	4302      	orrs	r2, r0
 80039ea:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ec:	f013 0f02 	tst.w	r3, #2
 80039f0:	d007      	beq.n	8003a02 <HAL_UART_IRQHandler+0x5a>
 80039f2:	b135      	cbz	r5, 8003a02 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80039f4:	6822      	ldr	r2, [r4, #0]
 80039f6:	2002      	movs	r0, #2
 80039f8:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039fa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80039fc:	f042 0204 	orr.w	r2, r2, #4
 8003a00:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a02:	f013 0f04 	tst.w	r3, #4
 8003a06:	d007      	beq.n	8003a18 <HAL_UART_IRQHandler+0x70>
 8003a08:	b135      	cbz	r5, 8003a18 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003a0a:	6822      	ldr	r2, [r4, #0]
 8003a0c:	2004      	movs	r0, #4
 8003a0e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a10:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a12:	f042 0202 	orr.w	r2, r2, #2
 8003a16:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003a18:	f013 0f08 	tst.w	r3, #8
 8003a1c:	d009      	beq.n	8003a32 <HAL_UART_IRQHandler+0x8a>
 8003a1e:	f011 0f20 	tst.w	r1, #32
 8003a22:	d100      	bne.n	8003a26 <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a24:	b12d      	cbz	r5, 8003a32 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	2008      	movs	r0, #8
 8003a2a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a2c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a2e:	4302      	orrs	r2, r0
 8003a30:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a32:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a34:	2a00      	cmp	r2, #0
 8003a36:	d04d      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a38:	f013 0f20 	tst.w	r3, #32
 8003a3c:	d002      	beq.n	8003a44 <HAL_UART_IRQHandler+0x9c>
 8003a3e:	f011 0f20 	tst.w	r1, #32
 8003a42:	d123      	bne.n	8003a8c <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003a44:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003a46:	f013 0f08 	tst.w	r3, #8
 8003a4a:	d104      	bne.n	8003a56 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003a50:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a54:	d026      	beq.n	8003aa4 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 8003a56:	4620      	mov	r0, r4
 8003a58:	f7ff fc6b 	bl	8003332 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a64:	d01a      	beq.n	8003a9c <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6c:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003a6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a70:	b183      	cbz	r3, 8003a94 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a72:	4a23      	ldr	r2, [pc, #140]	; (8003b00 <HAL_UART_IRQHandler+0x158>)
 8003a74:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a76:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003a78:	f7fd fe78 	bl	800176c <HAL_DMA_Abort_IT>
 8003a7c:	b350      	cbz	r0, 8003ad4 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a7e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003a80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a82:	4798      	blx	r3
 8003a84:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8003a86:	f7ff ff4e 	bl	8003926 <UART_Receive_IT>
      return;
 8003a8a:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f7ff ff4a 	bl	8003926 <UART_Receive_IT>
 8003a92:	e7d7      	b.n	8003a44 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8003a94:	4620      	mov	r0, r4
 8003a96:	f7ff fcb2 	bl	80033fe <HAL_UART_ErrorCallback>
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f7ff fcae 	bl	80033fe <HAL_UART_ErrorCallback>
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f7ff fcaa 	bl	80033fe <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	66e3      	str	r3, [r4, #108]	; 0x6c
 8003aae:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003ab0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003ab4:	d002      	beq.n	8003abc <HAL_UART_IRQHandler+0x114>
 8003ab6:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003aba:	d10c      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003abc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ac0:	d002      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x120>
 8003ac2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003ac6:	d112      	bne.n	8003aee <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ac8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003acc:	d002      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x12c>
 8003ace:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003ad2:	d110      	bne.n	8003af6 <HAL_UART_IRQHandler+0x14e>
 8003ad4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003ad6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ada:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8003adc:	2320      	movs	r3, #32
 8003ade:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8003ae2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f000 f80c 	bl	8003b04 <HAL_UARTEx_WakeupCallback>
    return;
 8003aec:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 8003aee:	4620      	mov	r0, r4
 8003af0:	f7ff fed5 	bl	800389e <UART_Transmit_IT>
    return;
 8003af4:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8003af6:	4620      	mov	r0, r4
 8003af8:	f7ff ff08 	bl	800390c <UART_EndTransmit_IT>
    return;
 8003afc:	e7ea      	b.n	8003ad4 <HAL_UART_IRQHandler+0x12c>
 8003afe:	bf00      	nop
 8003b00:	08003401 	.word	0x08003401

08003b04 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b04:	4770      	bx	lr

08003b06 <fill_filter_settings>:
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8003b06:	f990 3000 	ldrsb.w	r3, [r0]
 8003b0a:	f023 031c 	bic.w	r3, r3, #28
 8003b0e:	78ca      	ldrb	r2, [r1, #3]
 8003b10:	0092      	lsls	r2, r2, #2
 8003b12:	f002 021c 	and.w	r2, r2, #28
 8003b16:	4313      	orrs	r3, r2
 8003b18:	7003      	strb	r3, [r0, #0]
 8003b1a:	4770      	bx	lr

08003b1c <fill_standby_settings>:
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8003b1c:	f990 3000 	ldrsb.w	r3, [r0]
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	790a      	ldrb	r2, [r1, #4]
 8003b26:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8003b2a:	7003      	strb	r3, [r0, #0]
 8003b2c:	4770      	bx	lr

08003b2e <fill_osr_press_settings>:
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8003b2e:	f990 3000 	ldrsb.w	r3, [r0]
 8003b32:	f023 031c 	bic.w	r3, r3, #28
 8003b36:	780a      	ldrb	r2, [r1, #0]
 8003b38:	0092      	lsls	r2, r2, #2
 8003b3a:	f002 021c 	and.w	r2, r2, #28
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	7003      	strb	r3, [r0, #0]
 8003b42:	4770      	bx	lr

08003b44 <fill_osr_temp_settings>:
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8003b44:	f990 3000 	ldrsb.w	r3, [r0]
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	784a      	ldrb	r2, [r1, #1]
 8003b4e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8003b52:	7003      	strb	r3, [r0, #0]
 8003b54:	4770      	bx	lr

08003b56 <parse_device_settings>:
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8003b56:	7803      	ldrb	r3, [r0, #0]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	708b      	strb	r3, [r1, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8003b5e:	7883      	ldrb	r3, [r0, #2]
 8003b60:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8003b64:	700b      	strb	r3, [r1, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8003b66:	7883      	ldrb	r3, [r0, #2]
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	704b      	strb	r3, [r1, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8003b6c:	78c3      	ldrb	r3, [r0, #3]
 8003b6e:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8003b72:	70cb      	strb	r3, [r1, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8003b74:	78c3      	ldrb	r3, [r0, #3]
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	710b      	strb	r3, [r1, #4]
 8003b7a:	4770      	bx	lr

08003b7c <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8003b7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b80:	460c      	mov	r4, r1
    double var2;
    double temperature;
    double temperature_min = -40;
    double temperature_max = 85;

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 8003b82:	6840      	ldr	r0, [r0, #4]
 8003b84:	f7fc fc6a 	bl	800045c <__aeabi_ui2d>
 8003b88:	4680      	mov	r8, r0
 8003b8a:	4689      	mov	r9, r1
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	4b37      	ldr	r3, [pc, #220]	; (8003c6c <compensate_temperature+0xf0>)
 8003b90:	f7fc fcda 	bl	8000548 <__aeabi_dmul>
 8003b94:	4606      	mov	r6, r0
 8003b96:	460f      	mov	r7, r1
 8003b98:	8820      	ldrh	r0, [r4, #0]
 8003b9a:	f7fc fc5f 	bl	800045c <__aeabi_ui2d>
 8003b9e:	4682      	mov	sl, r0
 8003ba0:	468b      	mov	fp, r1
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	4b32      	ldr	r3, [pc, #200]	; (8003c70 <compensate_temperature+0xf4>)
 8003ba6:	f7fc fccf 	bl	8000548 <__aeabi_dmul>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4630      	mov	r0, r6
 8003bb0:	4639      	mov	r1, r7
 8003bb2:	f7fc fb15 	bl	80001e0 <__aeabi_dsub>
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	460f      	mov	r7, r1
    var1 = var1 * ((double)calib_data->dig_T2);
 8003bba:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8003bbe:	f7fc fc5d 	bl	800047c <__aeabi_i2d>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4630      	mov	r0, r6
 8003bc8:	4639      	mov	r1, r7
 8003bca:	f7fc fcbd 	bl	8000548 <__aeabi_dmul>
 8003bce:	4606      	mov	r6, r0
 8003bd0:	460f      	mov	r7, r1
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <compensate_temperature+0xf8>)
 8003bd6:	4640      	mov	r0, r8
 8003bd8:	4649      	mov	r1, r9
 8003bda:	f7fc fcb5 	bl	8000548 <__aeabi_dmul>
 8003bde:	4680      	mov	r8, r0
 8003be0:	4689      	mov	r9, r1
 8003be2:	2200      	movs	r2, #0
 8003be4:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <compensate_temperature+0xfc>)
 8003be6:	4650      	mov	r0, sl
 8003be8:	4659      	mov	r1, fp
 8003bea:	f7fc fcad 	bl	8000548 <__aeabi_dmul>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4640      	mov	r0, r8
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	f7fc faf3 	bl	80001e0 <__aeabi_dsub>
    var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	f7fc fca3 	bl	8000548 <__aeabi_dmul>
 8003c02:	4680      	mov	r8, r0
 8003c04:	4689      	mov	r9, r1
 8003c06:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8003c0a:	f7fc fc37 	bl	800047c <__aeabi_i2d>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4640      	mov	r0, r8
 8003c14:	4649      	mov	r1, r9
 8003c16:	f7fc fc97 	bl	8000548 <__aeabi_dmul>
    calib_data->t_fine = (int32_t)(var1 + var2);
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4630      	mov	r0, r6
 8003c20:	4639      	mov	r1, r7
 8003c22:	f7fc fadf 	bl	80001e4 <__adddf3>
 8003c26:	4606      	mov	r6, r0
 8003c28:	460f      	mov	r7, r1
 8003c2a:	f7fc ff3d 	bl	8000aa8 <__aeabi_d2iz>
 8003c2e:	6260      	str	r0, [r4, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8003c30:	2200      	movs	r2, #0
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <compensate_temperature+0x100>)
 8003c34:	4630      	mov	r0, r6
 8003c36:	4639      	mov	r1, r7
 8003c38:	f7fc fdb0 	bl	800079c <__aeabi_ddiv>
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	460d      	mov	r5, r1
    if (temperature < temperature_min)
 8003c40:	2200      	movs	r2, #0
 8003c42:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <compensate_temperature+0x104>)
 8003c44:	f7fc fef2 	bl	8000a2c <__aeabi_dcmplt>
 8003c48:	b948      	cbnz	r0, 8003c5e <compensate_temperature+0xe2>
    {
        temperature = temperature_min;
    }
    else if (temperature > temperature_max)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <compensate_temperature+0x108>)
 8003c4e:	4620      	mov	r0, r4
 8003c50:	4629      	mov	r1, r5
 8003c52:	f7fc ff09 	bl	8000a68 <__aeabi_dcmpgt>
 8003c56:	b120      	cbz	r0, 8003c62 <compensate_temperature+0xe6>
    {
        temperature = temperature_max;
 8003c58:	2400      	movs	r4, #0
 8003c5a:	4d0a      	ldr	r5, [pc, #40]	; (8003c84 <compensate_temperature+0x108>)
    }

    return temperature;
 8003c5c:	e001      	b.n	8003c62 <compensate_temperature+0xe6>
        temperature = temperature_min;
 8003c5e:	2400      	movs	r4, #0
 8003c60:	4d07      	ldr	r5, [pc, #28]	; (8003c80 <compensate_temperature+0x104>)
}
 8003c62:	4620      	mov	r0, r4
 8003c64:	4629      	mov	r1, r5
 8003c66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c6a:	bf00      	nop
 8003c6c:	3f100000 	.word	0x3f100000
 8003c70:	3f500000 	.word	0x3f500000
 8003c74:	3ee00000 	.word	0x3ee00000
 8003c78:	3f200000 	.word	0x3f200000
 8003c7c:	40b40000 	.word	0x40b40000
 8003c80:	c0440000 	.word	0xc0440000
 8003c84:	40554000 	.word	0x40554000

08003c88 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8003c88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8c:	4605      	mov	r5, r0
 8003c8e:	460c      	mov	r4, r1
    double var3;
    double pressure;
    double pressure_min = 30000.0;
    double pressure_max = 110000.0;

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8003c90:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8003c92:	f7fc fbf3 	bl	800047c <__aeabi_i2d>
 8003c96:	2200      	movs	r2, #0
 8003c98:	4b91      	ldr	r3, [pc, #580]	; (8003ee0 <compensate_pressure+0x258>)
 8003c9a:	f7fc fc55 	bl	8000548 <__aeabi_dmul>
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	4b90      	ldr	r3, [pc, #576]	; (8003ee4 <compensate_pressure+0x25c>)
 8003ca2:	f7fc fa9d 	bl	80001e0 <__aeabi_dsub>
 8003ca6:	4606      	mov	r6, r0
 8003ca8:	460f      	mov	r7, r1
    var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	f7fc fc4b 	bl	8000548 <__aeabi_dmul>
 8003cb2:	4680      	mov	r8, r0
 8003cb4:	4689      	mov	r9, r1
 8003cb6:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8003cba:	f7fc fbdf 	bl	800047c <__aeabi_i2d>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4640      	mov	r0, r8
 8003cc4:	4649      	mov	r1, r9
 8003cc6:	f7fc fc3f 	bl	8000548 <__aeabi_dmul>
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003cd0:	f7fc fc3a 	bl	8000548 <__aeabi_dmul>
 8003cd4:	4680      	mov	r8, r0
 8003cd6:	4689      	mov	r9, r1
    var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8003cd8:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8003cdc:	f7fc fbce 	bl	800047c <__aeabi_i2d>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4630      	mov	r0, r6
 8003ce6:	4639      	mov	r1, r7
 8003ce8:	f7fc fc2e 	bl	8000548 <__aeabi_dmul>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	f7fc fa78 	bl	80001e4 <__adddf3>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4640      	mov	r0, r8
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	f7fc fa72 	bl	80001e4 <__adddf3>
    var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8003d00:	2200      	movs	r2, #0
 8003d02:	4b79      	ldr	r3, [pc, #484]	; (8003ee8 <compensate_pressure+0x260>)
 8003d04:	f7fc fc20 	bl	8000548 <__aeabi_dmul>
 8003d08:	4680      	mov	r8, r0
 8003d0a:	4689      	mov	r9, r1
 8003d0c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8003d10:	f7fc fbb4 	bl	800047c <__aeabi_i2d>
 8003d14:	2200      	movs	r2, #0
 8003d16:	4b75      	ldr	r3, [pc, #468]	; (8003eec <compensate_pressure+0x264>)
 8003d18:	f7fc fc16 	bl	8000548 <__aeabi_dmul>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4640      	mov	r0, r8
 8003d22:	4649      	mov	r1, r9
 8003d24:	f7fc fa5e 	bl	80001e4 <__adddf3>
 8003d28:	4682      	mov	sl, r0
 8003d2a:	468b      	mov	fp, r1
    var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8003d2c:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8003d30:	f7fc fba4 	bl	800047c <__aeabi_i2d>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4630      	mov	r0, r6
 8003d3a:	4639      	mov	r1, r7
 8003d3c:	f7fc fc04 	bl	8000548 <__aeabi_dmul>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4630      	mov	r0, r6
 8003d46:	4639      	mov	r1, r7
 8003d48:	f7fc fbfe 	bl	8000548 <__aeabi_dmul>
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 8003d52:	f7fc fbf9 	bl	8000548 <__aeabi_dmul>
 8003d56:	4680      	mov	r8, r0
 8003d58:	4689      	mov	r9, r1
    var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8003d5a:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8003d5e:	f7fc fb8d 	bl	800047c <__aeabi_i2d>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4630      	mov	r0, r6
 8003d68:	4639      	mov	r1, r7
 8003d6a:	f7fc fbed 	bl	8000548 <__aeabi_dmul>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4640      	mov	r0, r8
 8003d74:	4649      	mov	r1, r9
 8003d76:	f7fc fa35 	bl	80001e4 <__adddf3>
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 8003d80:	f7fc fbe2 	bl	8000548 <__aeabi_dmul>
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8003d84:	2200      	movs	r2, #0
 8003d86:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003d8a:	f7fc fbdd 	bl	8000548 <__aeabi_dmul>
 8003d8e:	2200      	movs	r2, #0
 8003d90:	4b57      	ldr	r3, [pc, #348]	; (8003ef0 <compensate_pressure+0x268>)
 8003d92:	f7fc fa27 	bl	80001e4 <__adddf3>
 8003d96:	4606      	mov	r6, r0
 8003d98:	460f      	mov	r7, r1
 8003d9a:	88e0      	ldrh	r0, [r4, #6]
 8003d9c:	f7fc fb5e 	bl	800045c <__aeabi_ui2d>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4630      	mov	r0, r6
 8003da6:	4639      	mov	r1, r7
 8003da8:	f7fc fbce 	bl	8000548 <__aeabi_dmul>
 8003dac:	4680      	mov	r8, r0
 8003dae:	4689      	mov	r9, r1

    /* avoid exception caused by division by zero */
    if (var1)
 8003db0:	2200      	movs	r2, #0
 8003db2:	2300      	movs	r3, #0
 8003db4:	f7fc fe30 	bl	8000a18 <__aeabi_dcmpeq>
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d177      	bne.n	8003eac <compensate_pressure+0x224>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 8003dbc:	6828      	ldr	r0, [r5, #0]
 8003dbe:	f7fc fb4d 	bl	800045c <__aeabi_ui2d>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	494a      	ldr	r1, [pc, #296]	; (8003ef4 <compensate_pressure+0x26c>)
 8003dca:	f7fc fa09 	bl	80001e0 <__aeabi_dsub>
 8003dce:	4606      	mov	r6, r0
 8003dd0:	460f      	mov	r7, r1
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	4b48      	ldr	r3, [pc, #288]	; (8003ef8 <compensate_pressure+0x270>)
 8003dd6:	4650      	mov	r0, sl
 8003dd8:	4659      	mov	r1, fp
 8003dda:	f7fc fbb5 	bl	8000548 <__aeabi_dmul>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4630      	mov	r0, r6
 8003de4:	4639      	mov	r1, r7
 8003de6:	f7fc f9fb 	bl	80001e0 <__aeabi_dsub>
 8003dea:	a337      	add	r3, pc, #220	; (adr r3, 8003ec8 <compensate_pressure+0x240>)
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f7fc fbaa 	bl	8000548 <__aeabi_dmul>
 8003df4:	4642      	mov	r2, r8
 8003df6:	464b      	mov	r3, r9
 8003df8:	f7fc fcd0 	bl	800079c <__aeabi_ddiv>
 8003dfc:	4606      	mov	r6, r0
 8003dfe:	460f      	mov	r7, r1
        var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8003e00:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8003e04:	f7fc fb3a 	bl	800047c <__aeabi_i2d>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	4639      	mov	r1, r7
 8003e10:	f7fc fb9a 	bl	8000548 <__aeabi_dmul>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4630      	mov	r0, r6
 8003e1a:	4639      	mov	r1, r7
 8003e1c:	f7fc fb94 	bl	8000548 <__aeabi_dmul>
 8003e20:	2200      	movs	r2, #0
 8003e22:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8003e26:	f7fc fb8f 	bl	8000548 <__aeabi_dmul>
 8003e2a:	4680      	mov	r8, r0
 8003e2c:	4689      	mov	r9, r1
        var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8003e2e:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8003e32:	f7fc fb23 	bl	800047c <__aeabi_i2d>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	4639      	mov	r1, r7
 8003e3e:	f7fc fb83 	bl	8000548 <__aeabi_dmul>
 8003e42:	2200      	movs	r2, #0
 8003e44:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003e48:	f7fc fb7e 	bl	8000548 <__aeabi_dmul>
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4640      	mov	r0, r8
 8003e52:	4649      	mov	r1, r9
 8003e54:	f7fc f9c6 	bl	80001e4 <__adddf3>
 8003e58:	4680      	mov	r8, r0
 8003e5a:	4689      	mov	r9, r1
 8003e5c:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 8003e60:	f7fc fb0c 	bl	800047c <__aeabi_i2d>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4640      	mov	r0, r8
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	f7fc f9ba 	bl	80001e4 <__adddf3>
 8003e70:	2200      	movs	r2, #0
 8003e72:	4b22      	ldr	r3, [pc, #136]	; (8003efc <compensate_pressure+0x274>)
 8003e74:	f7fc fb68 	bl	8000548 <__aeabi_dmul>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	4639      	mov	r1, r7
 8003e80:	f7fc f9b0 	bl	80001e4 <__adddf3>
 8003e84:	4604      	mov	r4, r0
 8003e86:	460d      	mov	r5, r1
        if (pressure < pressure_min)
 8003e88:	a311      	add	r3, pc, #68	; (adr r3, 8003ed0 <compensate_pressure+0x248>)
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f7fc fdcd 	bl	8000a2c <__aeabi_dcmplt>
 8003e92:	b990      	cbnz	r0, 8003eba <compensate_pressure+0x232>
        {
            pressure = pressure_min;
        }
        else if (pressure > pressure_max)
 8003e94:	a310      	add	r3, pc, #64	; (adr r3, 8003ed8 <compensate_pressure+0x250>)
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	f7fc fde3 	bl	8000a68 <__aeabi_dcmpgt>
 8003ea2:	b130      	cbz	r0, 8003eb2 <compensate_pressure+0x22a>
        {
            pressure = pressure_max;
 8003ea4:	a50c      	add	r5, pc, #48	; (adr r5, 8003ed8 <compensate_pressure+0x250>)
 8003ea6:	e9d5 4500 	ldrd	r4, r5, [r5]
    else /* Invalid case */
    {
        pressure = pressure_min;
    }

    return pressure;
 8003eaa:	e002      	b.n	8003eb2 <compensate_pressure+0x22a>
        pressure = pressure_min;
 8003eac:	a508      	add	r5, pc, #32	; (adr r5, 8003ed0 <compensate_pressure+0x248>)
 8003eae:	e9d5 4500 	ldrd	r4, r5, [r5]
}
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            pressure = pressure_min;
 8003eba:	a505      	add	r5, pc, #20	; (adr r5, 8003ed0 <compensate_pressure+0x248>)
 8003ebc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003ec0:	e7f7      	b.n	8003eb2 <compensate_pressure+0x22a>
 8003ec2:	bf00      	nop
 8003ec4:	f3af 8000 	nop.w
 8003ec8:	00000000 	.word	0x00000000
 8003ecc:	40b86a00 	.word	0x40b86a00
 8003ed0:	00000000 	.word	0x00000000
 8003ed4:	40dd4c00 	.word	0x40dd4c00
 8003ed8:	00000000 	.word	0x00000000
 8003edc:	40fadb00 	.word	0x40fadb00
 8003ee0:	3fe00000 	.word	0x3fe00000
 8003ee4:	40ef4000 	.word	0x40ef4000
 8003ee8:	3fd00000 	.word	0x3fd00000
 8003eec:	40f00000 	.word	0x40f00000
 8003ef0:	3ff00000 	.word	0x3ff00000
 8003ef4:	41300000 	.word	0x41300000
 8003ef8:	3f300000 	.word	0x3f300000
 8003efc:	3fb00000 	.word	0x3fb00000

08003f00 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8003f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	4680      	mov	r8, r0
 8003f08:	468a      	mov	sl, r1
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8003f0a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8003f0c:	f7fc fab6 	bl	800047c <__aeabi_i2d>
 8003f10:	2200      	movs	r2, #0
 8003f12:	4b58      	ldr	r3, [pc, #352]	; (8004074 <compensate_humidity+0x174>)
 8003f14:	f7fc f964 	bl	80001e0 <__aeabi_dsub>
 8003f18:	4606      	mov	r6, r0
 8003f1a:	460f      	mov	r7, r1
    var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8003f1c:	f9ba 001e 	ldrsh.w	r0, [sl, #30]
 8003f20:	f7fc faac 	bl	800047c <__aeabi_i2d>
 8003f24:	2200      	movs	r2, #0
 8003f26:	4b54      	ldr	r3, [pc, #336]	; (8004078 <compensate_humidity+0x178>)
 8003f28:	f7fc fb0e 	bl	8000548 <__aeabi_dmul>
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	460d      	mov	r5, r1
 8003f30:	f9ba 0020 	ldrsh.w	r0, [sl, #32]
 8003f34:	f7fc faa2 	bl	800047c <__aeabi_i2d>
 8003f38:	2200      	movs	r2, #0
 8003f3a:	4b50      	ldr	r3, [pc, #320]	; (800407c <compensate_humidity+0x17c>)
 8003f3c:	f7fc fb04 	bl	8000548 <__aeabi_dmul>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4630      	mov	r0, r6
 8003f46:	4639      	mov	r1, r7
 8003f48:	f7fc fafe 	bl	8000548 <__aeabi_dmul>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4620      	mov	r0, r4
 8003f52:	4629      	mov	r1, r5
 8003f54:	f7fc f946 	bl	80001e4 <__adddf3>
 8003f58:	4604      	mov	r4, r0
 8003f5a:	460d      	mov	r5, r1
    var3 = uncomp_data->humidity - var2;
 8003f5c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003f60:	f7fc fa7c 	bl	800045c <__aeabi_ui2d>
 8003f64:	4622      	mov	r2, r4
 8003f66:	462b      	mov	r3, r5
 8003f68:	f7fc f93a 	bl	80001e0 <__aeabi_dsub>
 8003f6c:	e9cd 0100 	strd	r0, r1, [sp]
    var4 = ((double)calib_data->dig_H2) / 65536.0;
 8003f70:	f9ba 001a 	ldrsh.w	r0, [sl, #26]
 8003f74:	f7fc fa82 	bl	800047c <__aeabi_i2d>
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4b41      	ldr	r3, [pc, #260]	; (8004080 <compensate_humidity+0x180>)
 8003f7c:	f7fc fae4 	bl	8000548 <__aeabi_dmul>
 8003f80:	e9cd 0102 	strd	r0, r1, [sp, #8]
    var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8003f84:	f89a 001c 	ldrb.w	r0, [sl, #28]
 8003f88:	f7fc fa68 	bl	800045c <__aeabi_ui2d>
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	4b3d      	ldr	r3, [pc, #244]	; (8004084 <compensate_humidity+0x184>)
 8003f90:	f7fc fada 	bl	8000548 <__aeabi_dmul>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4630      	mov	r0, r6
 8003f9a:	4639      	mov	r1, r7
 8003f9c:	f7fc fad4 	bl	8000548 <__aeabi_dmul>
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	4b39      	ldr	r3, [pc, #228]	; (8004088 <compensate_humidity+0x188>)
 8003fa4:	f7fc f91e 	bl	80001e4 <__adddf3>
 8003fa8:	4604      	mov	r4, r0
 8003faa:	460d      	mov	r5, r1
    var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8003fac:	f99a 0022 	ldrsb.w	r0, [sl, #34]	; 0x22
 8003fb0:	f7fc fa64 	bl	800047c <__aeabi_i2d>
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	4b33      	ldr	r3, [pc, #204]	; (8004084 <compensate_humidity+0x184>)
 8003fb8:	f7fc fac6 	bl	8000548 <__aeabi_dmul>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	4639      	mov	r1, r7
 8003fc4:	f7fc fac0 	bl	8000548 <__aeabi_dmul>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4620      	mov	r0, r4
 8003fce:	4629      	mov	r1, r5
 8003fd0:	f7fc faba 	bl	8000548 <__aeabi_dmul>
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <compensate_humidity+0x188>)
 8003fd8:	f7fc f904 	bl	80001e4 <__adddf3>
 8003fdc:	4680      	mov	r8, r0
 8003fde:	4689      	mov	r9, r1
    var6 = var3 * var4 * (var5 * var6);
 8003fe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fe8:	f7fc faae 	bl	8000548 <__aeabi_dmul>
 8003fec:	4606      	mov	r6, r0
 8003fee:	460f      	mov	r7, r1
 8003ff0:	4642      	mov	r2, r8
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	f7fc faa6 	bl	8000548 <__aeabi_dmul>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4630      	mov	r0, r6
 8004002:	4639      	mov	r1, r7
 8004004:	f7fc faa0 	bl	8000548 <__aeabi_dmul>
 8004008:	4604      	mov	r4, r0
 800400a:	460d      	mov	r5, r1
    humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 800400c:	f89a 0018 	ldrb.w	r0, [sl, #24]
 8004010:	f7fc fa24 	bl	800045c <__aeabi_ui2d>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4620      	mov	r0, r4
 800401a:	4629      	mov	r1, r5
 800401c:	f7fc fa94 	bl	8000548 <__aeabi_dmul>
 8004020:	2200      	movs	r2, #0
 8004022:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 8004026:	f7fc fa8f 	bl	8000548 <__aeabi_dmul>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	2000      	movs	r0, #0
 8004030:	4915      	ldr	r1, [pc, #84]	; (8004088 <compensate_humidity+0x188>)
 8004032:	f7fc f8d5 	bl	80001e0 <__aeabi_dsub>
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4620      	mov	r0, r4
 800403c:	4629      	mov	r1, r5
 800403e:	f7fc fa83 	bl	8000548 <__aeabi_dmul>
 8004042:	4604      	mov	r4, r0
 8004044:	460d      	mov	r5, r1
    if (humidity > humidity_max)
 8004046:	2200      	movs	r2, #0
 8004048:	4b10      	ldr	r3, [pc, #64]	; (800408c <compensate_humidity+0x18c>)
 800404a:	f7fc fd0d 	bl	8000a68 <__aeabi_dcmpgt>
 800404e:	b948      	cbnz	r0, 8004064 <compensate_humidity+0x164>
    {
        humidity = humidity_max;
    }
    else if (humidity < humidity_min)
 8004050:	2200      	movs	r2, #0
 8004052:	2300      	movs	r3, #0
 8004054:	4620      	mov	r0, r4
 8004056:	4629      	mov	r1, r5
 8004058:	f7fc fce8 	bl	8000a2c <__aeabi_dcmplt>
 800405c:	b120      	cbz	r0, 8004068 <compensate_humidity+0x168>
    {
        humidity = humidity_min;
 800405e:	2400      	movs	r4, #0
 8004060:	2500      	movs	r5, #0
    }

    return humidity;
 8004062:	e001      	b.n	8004068 <compensate_humidity+0x168>
        humidity = humidity_max;
 8004064:	2400      	movs	r4, #0
 8004066:	4d09      	ldr	r5, [pc, #36]	; (800408c <compensate_humidity+0x18c>)
}
 8004068:	4620      	mov	r0, r4
 800406a:	4629      	mov	r1, r5
 800406c:	b004      	add	sp, #16
 800406e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004072:	bf00      	nop
 8004074:	40f2c000 	.word	0x40f2c000
 8004078:	40500000 	.word	0x40500000
 800407c:	3f100000 	.word	0x3f100000
 8004080:	3ef00000 	.word	0x3ef00000
 8004084:	3e500000 	.word	0x3e500000
 8004088:	3ff00000 	.word	0x3ff00000
 800408c:	40590000 	.word	0x40590000

08004090 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8004090:	b470      	push	{r4, r5, r6}
    uint8_t index;

    for (index = 1; index < len; index++)
 8004092:	2401      	movs	r4, #1
 8004094:	e008      	b.n	80040a8 <interleave_reg_addr+0x18>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8004096:	0065      	lsls	r5, r4, #1
 8004098:	3d01      	subs	r5, #1
 800409a:	5d06      	ldrb	r6, [r0, r4]
 800409c:	554e      	strb	r6, [r1, r5]
        temp_buff[index * 2] = reg_data[index];
 800409e:	5d15      	ldrb	r5, [r2, r4]
 80040a0:	f801 5014 	strb.w	r5, [r1, r4, lsl #1]
    for (index = 1; index < len; index++)
 80040a4:	3401      	adds	r4, #1
 80040a6:	b2e4      	uxtb	r4, r4
 80040a8:	429c      	cmp	r4, r3
 80040aa:	d3f4      	bcc.n	8004096 <interleave_reg_addr+0x6>
    }
}
 80040ac:	bc70      	pop	{r4, r5, r6}
 80040ae:	4770      	bx	lr

080040b0 <parse_temp_press_calib_data>:
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
    struct bme280_calib_data *calib_data = &dev->calib_data;

    calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80040b0:	7842      	ldrb	r2, [r0, #1]
 80040b2:	7803      	ldrb	r3, [r0, #0]
 80040b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040b8:	820b      	strh	r3, [r1, #16]
    calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80040ba:	78c2      	ldrb	r2, [r0, #3]
 80040bc:	7883      	ldrb	r3, [r0, #2]
 80040be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040c2:	824b      	strh	r3, [r1, #18]
    calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80040c4:	7942      	ldrb	r2, [r0, #5]
 80040c6:	7903      	ldrb	r3, [r0, #4]
 80040c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040cc:	828b      	strh	r3, [r1, #20]
    calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80040ce:	79c2      	ldrb	r2, [r0, #7]
 80040d0:	7983      	ldrb	r3, [r0, #6]
 80040d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040d6:	82cb      	strh	r3, [r1, #22]
    calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80040d8:	7a42      	ldrb	r2, [r0, #9]
 80040da:	7a03      	ldrb	r3, [r0, #8]
 80040dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040e0:	830b      	strh	r3, [r1, #24]
    calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80040e2:	7ac2      	ldrb	r2, [r0, #11]
 80040e4:	7a83      	ldrb	r3, [r0, #10]
 80040e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040ea:	834b      	strh	r3, [r1, #26]
    calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80040ec:	7b42      	ldrb	r2, [r0, #13]
 80040ee:	7b03      	ldrb	r3, [r0, #12]
 80040f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040f4:	838b      	strh	r3, [r1, #28]
    calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80040f6:	7bc2      	ldrb	r2, [r0, #15]
 80040f8:	7b83      	ldrb	r3, [r0, #14]
 80040fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040fe:	83cb      	strh	r3, [r1, #30]
    calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004100:	7c42      	ldrb	r2, [r0, #17]
 8004102:	7c03      	ldrb	r3, [r0, #16]
 8004104:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004108:	840b      	strh	r3, [r1, #32]
    calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800410a:	7cc2      	ldrb	r2, [r0, #19]
 800410c:	7c83      	ldrb	r3, [r0, #18]
 800410e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004112:	844b      	strh	r3, [r1, #34]	; 0x22
    calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8004114:	7d42      	ldrb	r2, [r0, #21]
 8004116:	7d03      	ldrb	r3, [r0, #20]
 8004118:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800411c:	848b      	strh	r3, [r1, #36]	; 0x24
    calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800411e:	7dc2      	ldrb	r2, [r0, #23]
 8004120:	7d83      	ldrb	r3, [r0, #22]
 8004122:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004126:	84cb      	strh	r3, [r1, #38]	; 0x26
    calib_data->dig_H1 = reg_data[25];
 8004128:	7e43      	ldrb	r3, [r0, #25]
 800412a:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
 800412e:	4770      	bx	lr

08004130 <parse_humidity_calib_data>:
    int16_t dig_H4_lsb;
    int16_t dig_H4_msb;
    int16_t dig_H5_lsb;
    int16_t dig_H5_msb;

    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004130:	7842      	ldrb	r2, [r0, #1]
 8004132:	7803      	ldrb	r3, [r0, #0]
 8004134:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004138:	854b      	strh	r3, [r1, #42]	; 0x2a
    calib_data->dig_H3 = reg_data[2];
 800413a:	7883      	ldrb	r3, [r0, #2]
 800413c:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8004140:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8004144:	b29b      	uxth	r3, r3
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	b21b      	sxth	r3, r3
    dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800414a:	7902      	ldrb	r2, [r0, #4]
 800414c:	f002 020f 	and.w	r2, r2, #15
    calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8004150:	4313      	orrs	r3, r2
 8004152:	85cb      	strh	r3, [r1, #46]	; 0x2e
    dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8004154:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8004158:	b29b      	uxth	r3, r3
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	b21b      	sxth	r3, r3
    dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 800415e:	7902      	ldrb	r2, [r0, #4]
    calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8004160:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8004164:	860b      	strh	r3, [r1, #48]	; 0x30
    calib_data->dig_H6 = (int8_t)reg_data[6];
 8004166:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800416a:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
 800416e:	4770      	bx	lr

08004170 <are_settings_changed>:
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
    uint8_t settings_changed = FALSE;

    if (sub_settings & desired_settings)
 8004170:	4208      	tst	r0, r1
 8004172:	d101      	bne.n	8004178 <are_settings_changed+0x8>
        settings_changed = TRUE;
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8004174:	2000      	movs	r0, #0
    }

    return settings_changed;
}
 8004176:	4770      	bx	lr
        settings_changed = TRUE;
 8004178:	2001      	movs	r0, #1
 800417a:	4770      	bx	lr

0800417c <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 800417c:	b150      	cbz	r0, 8004194 <null_ptr_check+0x18>
 800417e:	6842      	ldr	r2, [r0, #4]
 8004180:	b15a      	cbz	r2, 800419a <null_ptr_check+0x1e>
 8004182:	6882      	ldr	r2, [r0, #8]
 8004184:	b162      	cbz	r2, 80041a0 <null_ptr_check+0x24>
 8004186:	68c3      	ldr	r3, [r0, #12]
 8004188:	b10b      	cbz	r3, 800418e <null_ptr_check+0x12>
        rslt = BME280_E_NULL_PTR;
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 800418a:	2000      	movs	r0, #0
    }

    return rslt;
}
 800418c:	4770      	bx	lr
        rslt = BME280_E_NULL_PTR;
 800418e:	f04f 30ff 	mov.w	r0, #4294967295
 8004192:	4770      	bx	lr
 8004194:	f04f 30ff 	mov.w	r0, #4294967295
 8004198:	4770      	bx	lr
 800419a:	f04f 30ff 	mov.w	r0, #4294967295
 800419e:	4770      	bx	lr
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295
 80041a4:	4770      	bx	lr

080041a6 <bme280_get_regs>:
{
 80041a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041aa:	4605      	mov	r5, r0
 80041ac:	4688      	mov	r8, r1
 80041ae:	4617      	mov	r7, r2
 80041b0:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff ffe2 	bl	800417c <null_ptr_check>
    if (rslt == BME280_OK)
 80041b8:	4603      	mov	r3, r0
 80041ba:	b960      	cbnz	r0, 80041d6 <bme280_get_regs+0x30>
        if (dev->intf != BME280_I2C_INTF)
 80041bc:	78a3      	ldrb	r3, [r4, #2]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d001      	beq.n	80041c6 <bme280_get_regs+0x20>
            reg_addr = reg_addr | 0x80;
 80041c2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80041c6:	6866      	ldr	r6, [r4, #4]
 80041c8:	463b      	mov	r3, r7
 80041ca:	4642      	mov	r2, r8
 80041cc:	4629      	mov	r1, r5
 80041ce:	7860      	ldrb	r0, [r4, #1]
 80041d0:	47b0      	blx	r6
        if (rslt != BME280_OK)
 80041d2:	4603      	mov	r3, r0
 80041d4:	b910      	cbnz	r0, 80041dc <bme280_get_regs+0x36>
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rslt = BME280_E_COMM_FAIL;
 80041dc:	f06f 0303 	mvn.w	r3, #3
 80041e0:	e7f9      	b.n	80041d6 <bme280_get_regs+0x30>

080041e2 <get_calib_data>:
{
 80041e2:	b530      	push	{r4, r5, lr}
 80041e4:	b089      	sub	sp, #36	; 0x24
 80041e6:	4604      	mov	r4, r0
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 80041e8:	2300      	movs	r3, #0
 80041ea:	9301      	str	r3, [sp, #4]
 80041ec:	9302      	str	r3, [sp, #8]
 80041ee:	9303      	str	r3, [sp, #12]
 80041f0:	9304      	str	r3, [sp, #16]
 80041f2:	9305      	str	r3, [sp, #20]
 80041f4:	9306      	str	r3, [sp, #24]
 80041f6:	f8ad 301c 	strh.w	r3, [sp, #28]
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80041fa:	4603      	mov	r3, r0
 80041fc:	221a      	movs	r2, #26
 80041fe:	a901      	add	r1, sp, #4
 8004200:	2088      	movs	r0, #136	; 0x88
 8004202:	f7ff ffd0 	bl	80041a6 <bme280_get_regs>
    if (rslt == BME280_OK)
 8004206:	4605      	mov	r5, r0
 8004208:	b110      	cbz	r0, 8004210 <get_calib_data+0x2e>
}
 800420a:	4628      	mov	r0, r5
 800420c:	b009      	add	sp, #36	; 0x24
 800420e:	bd30      	pop	{r4, r5, pc}
        parse_temp_press_calib_data(calib_data, dev);
 8004210:	4621      	mov	r1, r4
 8004212:	a801      	add	r0, sp, #4
 8004214:	f7ff ff4c 	bl	80040b0 <parse_temp_press_calib_data>
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8004218:	4623      	mov	r3, r4
 800421a:	2207      	movs	r2, #7
 800421c:	a901      	add	r1, sp, #4
 800421e:	20e1      	movs	r0, #225	; 0xe1
 8004220:	f7ff ffc1 	bl	80041a6 <bme280_get_regs>
        if (rslt == BME280_OK)
 8004224:	4605      	mov	r5, r0
 8004226:	2800      	cmp	r0, #0
 8004228:	d1ef      	bne.n	800420a <get_calib_data+0x28>
            parse_humidity_calib_data(calib_data, dev);
 800422a:	4621      	mov	r1, r4
 800422c:	a801      	add	r0, sp, #4
 800422e:	f7ff ff7f 	bl	8004130 <parse_humidity_calib_data>
 8004232:	e7ea      	b.n	800420a <get_calib_data+0x28>

08004234 <bme280_set_regs>:
{
 8004234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004236:	b087      	sub	sp, #28
 8004238:	4605      	mov	r5, r0
 800423a:	460f      	mov	r7, r1
 800423c:	4614      	mov	r4, r2
 800423e:	461e      	mov	r6, r3
    if (len > 10)
 8004240:	2a0a      	cmp	r2, #10
 8004242:	d900      	bls.n	8004246 <bme280_set_regs+0x12>
        len = 10;
 8004244:	240a      	movs	r4, #10
    rslt = null_ptr_check(dev);
 8004246:	4630      	mov	r0, r6
 8004248:	f7ff ff98 	bl	800417c <null_ptr_check>
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800424c:	bb48      	cbnz	r0, 80042a2 <bme280_set_regs+0x6e>
 800424e:	b35d      	cbz	r5, 80042a8 <bme280_set_regs+0x74>
 8004250:	b36f      	cbz	r7, 80042ae <bme280_set_regs+0x7a>
        if (len != 0)
 8004252:	b37c      	cbz	r4, 80042b4 <bme280_set_regs+0x80>
            temp_buff[0] = reg_data[0];
 8004254:	783b      	ldrb	r3, [r7, #0]
 8004256:	f88d 3004 	strb.w	r3, [sp, #4]
            if (dev->intf != BME280_I2C_INTF)
 800425a:	78b3      	ldrb	r3, [r6, #2]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d009      	beq.n	8004274 <bme280_set_regs+0x40>
 8004260:	2200      	movs	r2, #0
 8004262:	e005      	b.n	8004270 <bme280_set_regs+0x3c>
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8004264:	5ca9      	ldrb	r1, [r5, r2]
 8004266:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800426a:	54a9      	strb	r1, [r5, r2]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800426c:	3201      	adds	r2, #1
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	4294      	cmp	r4, r2
 8004272:	d8f7      	bhi.n	8004264 <bme280_set_regs+0x30>
            if (len > 1)
 8004274:	2c01      	cmp	r4, #1
 8004276:	d912      	bls.n	800429e <bme280_set_regs+0x6a>
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8004278:	4623      	mov	r3, r4
 800427a:	463a      	mov	r2, r7
 800427c:	a901      	add	r1, sp, #4
 800427e:	4628      	mov	r0, r5
 8004280:	f7ff ff06 	bl	8004090 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8004284:	0064      	lsls	r4, r4, #1
 8004286:	3c01      	subs	r4, #1
 8004288:	b2a3      	uxth	r3, r4
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800428a:	68b4      	ldr	r4, [r6, #8]
 800428c:	aa01      	add	r2, sp, #4
 800428e:	7829      	ldrb	r1, [r5, #0]
 8004290:	7870      	ldrb	r0, [r6, #1]
 8004292:	47a0      	blx	r4
            if (rslt != BME280_OK)
 8004294:	4603      	mov	r3, r0
 8004296:	b980      	cbnz	r0, 80042ba <bme280_set_regs+0x86>
}
 8004298:	4618      	mov	r0, r3
 800429a:	b007      	add	sp, #28
 800429c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                temp_len = len;
 800429e:	b2a3      	uxth	r3, r4
 80042a0:	e7f3      	b.n	800428a <bme280_set_regs+0x56>
        rslt = BME280_E_NULL_PTR;
 80042a2:	f04f 33ff 	mov.w	r3, #4294967295
 80042a6:	e7f7      	b.n	8004298 <bme280_set_regs+0x64>
 80042a8:	f04f 33ff 	mov.w	r3, #4294967295
 80042ac:	e7f4      	b.n	8004298 <bme280_set_regs+0x64>
 80042ae:	f04f 33ff 	mov.w	r3, #4294967295
 80042b2:	e7f1      	b.n	8004298 <bme280_set_regs+0x64>
            rslt = BME280_E_INVALID_LEN;
 80042b4:	f06f 0302 	mvn.w	r3, #2
 80042b8:	e7ee      	b.n	8004298 <bme280_set_regs+0x64>
                rslt = BME280_E_COMM_FAIL;
 80042ba:	f06f 0303 	mvn.w	r3, #3
 80042be:	e7eb      	b.n	8004298 <bme280_set_regs+0x64>

080042c0 <set_osr_humidity_settings>:
{
 80042c0:	b510      	push	{r4, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	460c      	mov	r4, r1
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80042c6:	23f2      	movs	r3, #242	; 0xf2
 80042c8:	f88d 3005 	strb.w	r3, [sp, #5]
    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80042cc:	7883      	ldrb	r3, [r0, #2]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	a902      	add	r1, sp, #8
 80042d4:	f801 3d01 	strb.w	r3, [r1, #-1]!
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80042d8:	4623      	mov	r3, r4
 80042da:	2201      	movs	r2, #1
 80042dc:	f10d 0005 	add.w	r0, sp, #5
 80042e0:	f7ff ffa8 	bl	8004234 <bme280_set_regs>
    if (rslt == BME280_OK)
 80042e4:	4603      	mov	r3, r0
 80042e6:	b110      	cbz	r0, 80042ee <set_osr_humidity_settings+0x2e>
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	b002      	add	sp, #8
 80042ec:	bd10      	pop	{r4, pc}
        reg_addr = BME280_CTRL_MEAS_ADDR;
 80042ee:	20f4      	movs	r0, #244	; 0xf4
 80042f0:	f88d 0005 	strb.w	r0, [sp, #5]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80042f4:	4623      	mov	r3, r4
 80042f6:	2201      	movs	r2, #1
 80042f8:	f10d 0106 	add.w	r1, sp, #6
 80042fc:	f7ff ff53 	bl	80041a6 <bme280_get_regs>
        if (rslt == BME280_OK)
 8004300:	4603      	mov	r3, r0
 8004302:	2800      	cmp	r0, #0
 8004304:	d1f0      	bne.n	80042e8 <set_osr_humidity_settings+0x28>
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8004306:	4623      	mov	r3, r4
 8004308:	2201      	movs	r2, #1
 800430a:	f10d 0106 	add.w	r1, sp, #6
 800430e:	f10d 0005 	add.w	r0, sp, #5
 8004312:	f7ff ff8f 	bl	8004234 <bme280_set_regs>
 8004316:	4603      	mov	r3, r0
 8004318:	e7e6      	b.n	80042e8 <set_osr_humidity_settings+0x28>

0800431a <set_osr_press_temp_settings>:
{
 800431a:	b570      	push	{r4, r5, r6, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	4605      	mov	r5, r0
 8004320:	460e      	mov	r6, r1
 8004322:	4614      	mov	r4, r2
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8004324:	20f4      	movs	r0, #244	; 0xf4
 8004326:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800432a:	4613      	mov	r3, r2
 800432c:	2201      	movs	r2, #1
 800432e:	f10d 0106 	add.w	r1, sp, #6
 8004332:	f7ff ff38 	bl	80041a6 <bme280_get_regs>
    if (rslt == BME280_OK)
 8004336:	4603      	mov	r3, r0
 8004338:	b970      	cbnz	r0, 8004358 <set_osr_press_temp_settings+0x3e>
        if (desired_settings & BME280_OSR_PRESS_SEL)
 800433a:	f015 0f01 	tst.w	r5, #1
 800433e:	d10e      	bne.n	800435e <set_osr_press_temp_settings+0x44>
        if (desired_settings & BME280_OSR_TEMP_SEL)
 8004340:	f015 0f02 	tst.w	r5, #2
 8004344:	d111      	bne.n	800436a <set_osr_press_temp_settings+0x50>
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004346:	4623      	mov	r3, r4
 8004348:	2201      	movs	r2, #1
 800434a:	f10d 0106 	add.w	r1, sp, #6
 800434e:	f10d 0007 	add.w	r0, sp, #7
 8004352:	f7ff ff6f 	bl	8004234 <bme280_set_regs>
 8004356:	4603      	mov	r3, r0
}
 8004358:	4618      	mov	r0, r3
 800435a:	b002      	add	sp, #8
 800435c:	bd70      	pop	{r4, r5, r6, pc}
            fill_osr_press_settings(&reg_data, settings);
 800435e:	4631      	mov	r1, r6
 8004360:	f10d 0006 	add.w	r0, sp, #6
 8004364:	f7ff fbe3 	bl	8003b2e <fill_osr_press_settings>
 8004368:	e7ea      	b.n	8004340 <set_osr_press_temp_settings+0x26>
            fill_osr_temp_settings(&reg_data, settings);
 800436a:	4631      	mov	r1, r6
 800436c:	f10d 0006 	add.w	r0, sp, #6
 8004370:	f7ff fbe8 	bl	8003b44 <fill_osr_temp_settings>
 8004374:	e7e7      	b.n	8004346 <set_osr_press_temp_settings+0x2c>

08004376 <set_osr_settings>:
{
 8004376:	b570      	push	{r4, r5, r6, lr}
 8004378:	4604      	mov	r4, r0
 800437a:	460d      	mov	r5, r1
 800437c:	4616      	mov	r6, r2
    if (desired_settings & BME280_OSR_HUM_SEL)
 800437e:	f010 0f04 	tst.w	r0, #4
 8004382:	d104      	bne.n	800438e <set_osr_settings+0x18>
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8004384:	2001      	movs	r0, #1
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8004386:	f014 0f03 	tst.w	r4, #3
 800438a:	d105      	bne.n	8004398 <set_osr_settings+0x22>
}
 800438c:	bd70      	pop	{r4, r5, r6, pc}
        rslt = set_osr_humidity_settings(settings, dev);
 800438e:	4611      	mov	r1, r2
 8004390:	4628      	mov	r0, r5
 8004392:	f7ff ff95 	bl	80042c0 <set_osr_humidity_settings>
 8004396:	e7f6      	b.n	8004386 <set_osr_settings+0x10>
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8004398:	4632      	mov	r2, r6
 800439a:	4629      	mov	r1, r5
 800439c:	4620      	mov	r0, r4
 800439e:	f7ff ffbc 	bl	800431a <set_osr_press_temp_settings>
 80043a2:	e7f3      	b.n	800438c <set_osr_settings+0x16>

080043a4 <set_filter_standby_settings>:
{
 80043a4:	b570      	push	{r4, r5, r6, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	4605      	mov	r5, r0
 80043aa:	460e      	mov	r6, r1
 80043ac:	4614      	mov	r4, r2
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 80043ae:	20f5      	movs	r0, #245	; 0xf5
 80043b0:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80043b4:	4613      	mov	r3, r2
 80043b6:	2201      	movs	r2, #1
 80043b8:	f10d 0106 	add.w	r1, sp, #6
 80043bc:	f7ff fef3 	bl	80041a6 <bme280_get_regs>
    if (rslt == BME280_OK)
 80043c0:	4603      	mov	r3, r0
 80043c2:	b970      	cbnz	r0, 80043e2 <set_filter_standby_settings+0x3e>
        if (desired_settings & BME280_FILTER_SEL)
 80043c4:	f015 0f08 	tst.w	r5, #8
 80043c8:	d10e      	bne.n	80043e8 <set_filter_standby_settings+0x44>
        if (desired_settings & BME280_STANDBY_SEL)
 80043ca:	f015 0f10 	tst.w	r5, #16
 80043ce:	d111      	bne.n	80043f4 <set_filter_standby_settings+0x50>
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80043d0:	4623      	mov	r3, r4
 80043d2:	2201      	movs	r2, #1
 80043d4:	f10d 0106 	add.w	r1, sp, #6
 80043d8:	f10d 0007 	add.w	r0, sp, #7
 80043dc:	f7ff ff2a 	bl	8004234 <bme280_set_regs>
 80043e0:	4603      	mov	r3, r0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	b002      	add	sp, #8
 80043e6:	bd70      	pop	{r4, r5, r6, pc}
            fill_filter_settings(&reg_data, settings);
 80043e8:	4631      	mov	r1, r6
 80043ea:	f10d 0006 	add.w	r0, sp, #6
 80043ee:	f7ff fb8a 	bl	8003b06 <fill_filter_settings>
 80043f2:	e7ea      	b.n	80043ca <set_filter_standby_settings+0x26>
            fill_standby_settings(&reg_data, settings);
 80043f4:	4631      	mov	r1, r6
 80043f6:	f10d 0006 	add.w	r0, sp, #6
 80043fa:	f7ff fb8f 	bl	8003b1c <fill_standby_settings>
 80043fe:	e7e7      	b.n	80043d0 <set_filter_standby_settings+0x2c>

08004400 <reload_device_settings>:
{
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	4604      	mov	r4, r0
 8004404:	460d      	mov	r5, r1
    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004406:	460a      	mov	r2, r1
 8004408:	4601      	mov	r1, r0
 800440a:	201f      	movs	r0, #31
 800440c:	f7ff ffb3 	bl	8004376 <set_osr_settings>
    if (rslt == BME280_OK)
 8004410:	4603      	mov	r3, r0
 8004412:	b108      	cbz	r0, 8004418 <reload_device_settings+0x18>
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd38      	pop	{r3, r4, r5, pc}
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004418:	462a      	mov	r2, r5
 800441a:	4621      	mov	r1, r4
 800441c:	201f      	movs	r0, #31
 800441e:	f7ff ffc1 	bl	80043a4 <set_filter_standby_settings>
 8004422:	4603      	mov	r3, r0
 8004424:	e7f6      	b.n	8004414 <reload_device_settings+0x14>

08004426 <write_power_mode>:
{
 8004426:	b530      	push	{r4, r5, lr}
 8004428:	b083      	sub	sp, #12
 800442a:	4605      	mov	r5, r0
 800442c:	460c      	mov	r4, r1
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800442e:	20f4      	movs	r0, #244	; 0xf4
 8004430:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8004434:	460b      	mov	r3, r1
 8004436:	2201      	movs	r2, #1
 8004438:	f10d 0106 	add.w	r1, sp, #6
 800443c:	f7ff feb3 	bl	80041a6 <bme280_get_regs>
    if (rslt == BME280_OK)
 8004440:	4603      	mov	r3, r0
 8004442:	b110      	cbz	r0, 800444a <write_power_mode+0x24>
}
 8004444:	4618      	mov	r0, r3
 8004446:	b003      	add	sp, #12
 8004448:	bd30      	pop	{r4, r5, pc}
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800444a:	f89d 0006 	ldrb.w	r0, [sp, #6]
 800444e:	f020 0003 	bic.w	r0, r0, #3
 8004452:	b240      	sxtb	r0, r0
 8004454:	f005 0503 	and.w	r5, r5, #3
 8004458:	4328      	orrs	r0, r5
 800445a:	a902      	add	r1, sp, #8
 800445c:	f801 0d02 	strb.w	r0, [r1, #-2]!
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8004460:	4623      	mov	r3, r4
 8004462:	2201      	movs	r2, #1
 8004464:	f10d 0007 	add.w	r0, sp, #7
 8004468:	f7ff fee4 	bl	8004234 <bme280_set_regs>
 800446c:	4603      	mov	r3, r0
 800446e:	e7e9      	b.n	8004444 <write_power_mode+0x1e>

08004470 <bme280_get_sensor_mode>:
{
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	4605      	mov	r5, r0
 8004474:	460c      	mov	r4, r1
    rslt = null_ptr_check(dev);
 8004476:	4608      	mov	r0, r1
 8004478:	f7ff fe80 	bl	800417c <null_ptr_check>
    if (rslt == BME280_OK)
 800447c:	4603      	mov	r3, r0
 800447e:	b108      	cbz	r0, 8004484 <bme280_get_sensor_mode+0x14>
}
 8004480:	4618      	mov	r0, r3
 8004482:	bd38      	pop	{r3, r4, r5, pc}
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8004484:	4623      	mov	r3, r4
 8004486:	2201      	movs	r2, #1
 8004488:	4629      	mov	r1, r5
 800448a:	20f4      	movs	r0, #244	; 0xf4
 800448c:	f7ff fe8b 	bl	80041a6 <bme280_get_regs>
 8004490:	4603      	mov	r3, r0
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8004492:	782a      	ldrb	r2, [r5, #0]
 8004494:	f002 0203 	and.w	r2, r2, #3
 8004498:	702a      	strb	r2, [r5, #0]
 800449a:	e7f1      	b.n	8004480 <bme280_get_sensor_mode+0x10>

0800449c <bme280_soft_reset>:
{
 800449c:	b530      	push	{r4, r5, lr}
 800449e:	b083      	sub	sp, #12
 80044a0:	4605      	mov	r5, r0
    uint8_t reg_addr = BME280_RESET_ADDR;
 80044a2:	23e0      	movs	r3, #224	; 0xe0
 80044a4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t soft_rst_cmd = 0xB6;
 80044a8:	23b6      	movs	r3, #182	; 0xb6
 80044aa:	f88d 3006 	strb.w	r3, [sp, #6]
    rslt = null_ptr_check(dev);
 80044ae:	f7ff fe65 	bl	800417c <null_ptr_check>
    if (rslt == BME280_OK)
 80044b2:	4604      	mov	r4, r0
 80044b4:	b110      	cbz	r0, 80044bc <bme280_soft_reset+0x20>
}
 80044b6:	4620      	mov	r0, r4
 80044b8:	b003      	add	sp, #12
 80044ba:	bd30      	pop	{r4, r5, pc}
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80044bc:	462b      	mov	r3, r5
 80044be:	2201      	movs	r2, #1
 80044c0:	f10d 0106 	add.w	r1, sp, #6
 80044c4:	f10d 0007 	add.w	r0, sp, #7
 80044c8:	f7ff feb4 	bl	8004234 <bme280_set_regs>
 80044cc:	4604      	mov	r4, r0
        dev->delay_ms(2);
 80044ce:	68eb      	ldr	r3, [r5, #12]
 80044d0:	2002      	movs	r0, #2
 80044d2:	4798      	blx	r3
 80044d4:	e7ef      	b.n	80044b6 <bme280_soft_reset+0x1a>

080044d6 <bme280_init>:
{
 80044d6:	b570      	push	{r4, r5, r6, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	4605      	mov	r5, r0
    uint8_t chip_id = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
 80044e2:	f7ff fe4b 	bl	800417c <null_ptr_check>
    if (rslt == BME280_OK)
 80044e6:	4606      	mov	r6, r0
 80044e8:	bb10      	cbnz	r0, 8004530 <bme280_init+0x5a>
 80044ea:	2405      	movs	r4, #5
 80044ec:	e009      	b.n	8004502 <bme280_init+0x2c>
                    rslt = get_calib_data(dev);
 80044ee:	4628      	mov	r0, r5
 80044f0:	f7ff fe77 	bl	80041e2 <get_calib_data>
 80044f4:	4606      	mov	r6, r0
 80044f6:	e01a      	b.n	800452e <bme280_init+0x58>
            dev->delay_ms(1);
 80044f8:	68eb      	ldr	r3, [r5, #12]
 80044fa:	2001      	movs	r0, #1
 80044fc:	4798      	blx	r3
            --try_count;
 80044fe:	3c01      	subs	r4, #1
 8004500:	b2e4      	uxtb	r4, r4
        while (try_count)
 8004502:	b1a4      	cbz	r4, 800452e <bme280_init+0x58>
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8004504:	462b      	mov	r3, r5
 8004506:	2201      	movs	r2, #1
 8004508:	f10d 0107 	add.w	r1, sp, #7
 800450c:	20d0      	movs	r0, #208	; 0xd0
 800450e:	f7ff fe4a 	bl	80041a6 <bme280_get_regs>
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8004512:	4606      	mov	r6, r0
 8004514:	2800      	cmp	r0, #0
 8004516:	d1ef      	bne.n	80044f8 <bme280_init+0x22>
 8004518:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800451c:	2b60      	cmp	r3, #96	; 0x60
 800451e:	d1eb      	bne.n	80044f8 <bme280_init+0x22>
                dev->chip_id = chip_id;
 8004520:	702b      	strb	r3, [r5, #0]
                rslt = bme280_soft_reset(dev);
 8004522:	4628      	mov	r0, r5
 8004524:	f7ff ffba 	bl	800449c <bme280_soft_reset>
                if (rslt == BME280_OK)
 8004528:	4606      	mov	r6, r0
 800452a:	2800      	cmp	r0, #0
 800452c:	d0df      	beq.n	80044ee <bme280_init+0x18>
        if (!try_count)
 800452e:	b114      	cbz	r4, 8004536 <bme280_init+0x60>
}
 8004530:	4630      	mov	r0, r6
 8004532:	b002      	add	sp, #8
 8004534:	bd70      	pop	{r4, r5, r6, pc}
            rslt = BME280_E_DEV_NOT_FOUND;
 8004536:	f06f 0601 	mvn.w	r6, #1
 800453a:	e7f9      	b.n	8004530 <bme280_init+0x5a>

0800453c <put_device_to_sleep>:
{
 800453c:	b510      	push	{r4, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	4604      	mov	r4, r0
    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8004542:	4603      	mov	r3, r0
 8004544:	2204      	movs	r2, #4
 8004546:	a903      	add	r1, sp, #12
 8004548:	20f2      	movs	r0, #242	; 0xf2
 800454a:	f7ff fe2c 	bl	80041a6 <bme280_get_regs>
    if (rslt == BME280_OK)
 800454e:	4603      	mov	r3, r0
 8004550:	b110      	cbz	r0, 8004558 <put_device_to_sleep+0x1c>
}
 8004552:	4618      	mov	r0, r3
 8004554:	b004      	add	sp, #16
 8004556:	bd10      	pop	{r4, pc}
        parse_device_settings(reg_data, &settings);
 8004558:	a901      	add	r1, sp, #4
 800455a:	a803      	add	r0, sp, #12
 800455c:	f7ff fafb 	bl	8003b56 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8004560:	4620      	mov	r0, r4
 8004562:	f7ff ff9b 	bl	800449c <bme280_soft_reset>
        if (rslt == BME280_OK)
 8004566:	4603      	mov	r3, r0
 8004568:	2800      	cmp	r0, #0
 800456a:	d1f2      	bne.n	8004552 <put_device_to_sleep+0x16>
            rslt = reload_device_settings(&settings, dev);
 800456c:	4621      	mov	r1, r4
 800456e:	a801      	add	r0, sp, #4
 8004570:	f7ff ff46 	bl	8004400 <reload_device_settings>
 8004574:	4603      	mov	r3, r0
 8004576:	e7ec      	b.n	8004552 <put_device_to_sleep+0x16>

08004578 <bme280_set_sensor_settings>:
{
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	4606      	mov	r6, r0
 800457e:	460d      	mov	r5, r1
    rslt = null_ptr_check(dev);
 8004580:	4608      	mov	r0, r1
 8004582:	f7ff fdfb 	bl	800417c <null_ptr_check>
    if (rslt == BME280_OK)
 8004586:	4604      	mov	r4, r0
 8004588:	b110      	cbz	r0, 8004590 <bme280_set_sensor_settings+0x18>
}
 800458a:	4620      	mov	r0, r4
 800458c:	b002      	add	sp, #8
 800458e:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8004590:	4629      	mov	r1, r5
 8004592:	f10d 0007 	add.w	r0, sp, #7
 8004596:	f7ff ff6b 	bl	8004470 <bme280_get_sensor_mode>
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 800459a:	4604      	mov	r4, r0
 800459c:	b910      	cbnz	r0, 80045a4 <bme280_set_sensor_settings+0x2c>
 800459e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80045a2:	b9b3      	cbnz	r3, 80045d2 <bme280_set_sensor_settings+0x5a>
        if (rslt == BME280_OK)
 80045a4:	2c00      	cmp	r4, #0
 80045a6:	d1f0      	bne.n	800458a <bme280_set_sensor_settings+0x12>
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80045a8:	4631      	mov	r1, r6
 80045aa:	2007      	movs	r0, #7
 80045ac:	f7ff fde0 	bl	8004170 <are_settings_changed>
 80045b0:	b9a0      	cbnz	r0, 80045dc <bme280_set_sensor_settings+0x64>
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80045b2:	2c00      	cmp	r4, #0
 80045b4:	d1e9      	bne.n	800458a <bme280_set_sensor_settings+0x12>
 80045b6:	4631      	mov	r1, r6
 80045b8:	2018      	movs	r0, #24
 80045ba:	f7ff fdd9 	bl	8004170 <are_settings_changed>
 80045be:	2800      	cmp	r0, #0
 80045c0:	d0e3      	beq.n	800458a <bme280_set_sensor_settings+0x12>
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80045c2:	462a      	mov	r2, r5
 80045c4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80045c8:	4630      	mov	r0, r6
 80045ca:	f7ff feeb 	bl	80043a4 <set_filter_standby_settings>
 80045ce:	4604      	mov	r4, r0
 80045d0:	e7db      	b.n	800458a <bme280_set_sensor_settings+0x12>
            rslt = put_device_to_sleep(dev);
 80045d2:	4628      	mov	r0, r5
 80045d4:	f7ff ffb2 	bl	800453c <put_device_to_sleep>
 80045d8:	4604      	mov	r4, r0
 80045da:	e7e3      	b.n	80045a4 <bme280_set_sensor_settings+0x2c>
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80045dc:	462a      	mov	r2, r5
 80045de:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80045e2:	4630      	mov	r0, r6
 80045e4:	f7ff fec7 	bl	8004376 <set_osr_settings>
 80045e8:	4604      	mov	r4, r0
 80045ea:	e7e2      	b.n	80045b2 <bme280_set_sensor_settings+0x3a>

080045ec <bme280_set_sensor_mode>:
{
 80045ec:	b530      	push	{r4, r5, lr}
 80045ee:	b083      	sub	sp, #12
 80045f0:	4605      	mov	r5, r0
 80045f2:	460c      	mov	r4, r1
    rslt = null_ptr_check(dev);
 80045f4:	4608      	mov	r0, r1
 80045f6:	f7ff fdc1 	bl	800417c <null_ptr_check>
    if (rslt == BME280_OK)
 80045fa:	4603      	mov	r3, r0
 80045fc:	b110      	cbz	r0, 8004604 <bme280_set_sensor_mode+0x18>
}
 80045fe:	4618      	mov	r0, r3
 8004600:	b003      	add	sp, #12
 8004602:	bd30      	pop	{r4, r5, pc}
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8004604:	4621      	mov	r1, r4
 8004606:	f10d 0007 	add.w	r0, sp, #7
 800460a:	f7ff ff31 	bl	8004470 <bme280_get_sensor_mode>
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 800460e:	4603      	mov	r3, r0
 8004610:	b910      	cbnz	r0, 8004618 <bme280_set_sensor_mode+0x2c>
 8004612:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004616:	b93a      	cbnz	r2, 8004628 <bme280_set_sensor_mode+0x3c>
        if (rslt == BME280_OK)
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f0      	bne.n	80045fe <bme280_set_sensor_mode+0x12>
            rslt = write_power_mode(sensor_mode, dev);
 800461c:	4621      	mov	r1, r4
 800461e:	4628      	mov	r0, r5
 8004620:	f7ff ff01 	bl	8004426 <write_power_mode>
 8004624:	4603      	mov	r3, r0
 8004626:	e7ea      	b.n	80045fe <bme280_set_sensor_mode+0x12>
            rslt = put_device_to_sleep(dev);
 8004628:	4620      	mov	r0, r4
 800462a:	f7ff ff87 	bl	800453c <put_device_to_sleep>
 800462e:	4603      	mov	r3, r0
 8004630:	e7f2      	b.n	8004618 <bme280_set_sensor_mode+0x2c>

08004632 <bme280_parse_sensor_data>:
{
 8004632:	b410      	push	{r4}
    data_msb = (uint32_t)reg_data[0] << 12;
 8004634:	7804      	ldrb	r4, [r0, #0]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8004636:	7843      	ldrb	r3, [r0, #1]
 8004638:	011b      	lsls	r3, r3, #4
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800463a:	7882      	ldrb	r2, [r0, #2]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800463c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8004640:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8004644:	600b      	str	r3, [r1, #0]
    data_msb = (uint32_t)reg_data[3] << 12;
 8004646:	78c4      	ldrb	r4, [r0, #3]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8004648:	7903      	ldrb	r3, [r0, #4]
 800464a:	011b      	lsls	r3, r3, #4
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 800464c:	7942      	ldrb	r2, [r0, #5]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800464e:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8004652:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8004656:	604b      	str	r3, [r1, #4]
    data_lsb = (uint32_t)reg_data[6] << 8;
 8004658:	7982      	ldrb	r2, [r0, #6]
    data_msb = (uint32_t)reg_data[7];
 800465a:	79c3      	ldrb	r3, [r0, #7]
    uncomp_data->humidity = data_msb | data_lsb;
 800465c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004660:	608b      	str	r3, [r1, #8]
}
 8004662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004666:	4770      	bx	lr

08004668 <bme280_compensate_data>:
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8004668:	b361      	cbz	r1, 80046c4 <bme280_compensate_data+0x5c>
{
 800466a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466c:	460f      	mov	r7, r1
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 800466e:	b362      	cbz	r2, 80046ca <bme280_compensate_data+0x62>
 8004670:	b373      	cbz	r3, 80046d0 <bme280_compensate_data+0x68>
 8004672:	461e      	mov	r6, r3
 8004674:	4614      	mov	r4, r2
 8004676:	4605      	mov	r5, r0
        comp_data->temperature = 0;
 8004678:	2200      	movs	r2, #0
 800467a:	2300      	movs	r3, #0
 800467c:	e9c4 2302 	strd	r2, r3, [r4, #8]
        comp_data->pressure = 0;
 8004680:	e9c4 2300 	strd	r2, r3, [r4]
        comp_data->humidity = 0;
 8004684:	e9c4 2304 	strd	r2, r3, [r4, #16]
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8004688:	f010 0f07 	tst.w	r0, #7
 800468c:	d113      	bne.n	80046b6 <bme280_compensate_data+0x4e>
        if (sensor_comp & BME280_PRESS)
 800468e:	f015 0f01 	tst.w	r5, #1
 8004692:	d005      	beq.n	80046a0 <bme280_compensate_data+0x38>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8004694:	4631      	mov	r1, r6
 8004696:	4638      	mov	r0, r7
 8004698:	f7ff faf6 	bl	8003c88 <compensate_pressure>
 800469c:	e9c4 0100 	strd	r0, r1, [r4]
        if (sensor_comp & BME280_HUM)
 80046a0:	f015 0f04 	tst.w	r5, #4
 80046a4:	d017      	beq.n	80046d6 <bme280_compensate_data+0x6e>
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80046a6:	4631      	mov	r1, r6
 80046a8:	4638      	mov	r0, r7
 80046aa:	f7ff fc29 	bl	8003f00 <compensate_humidity>
 80046ae:	e9c4 0104 	strd	r0, r1, [r4, #16]
    int8_t rslt = BME280_OK;
 80046b2:	2000      	movs	r0, #0
 80046b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80046b6:	4631      	mov	r1, r6
 80046b8:	4638      	mov	r0, r7
 80046ba:	f7ff fa5f 	bl	8003b7c <compensate_temperature>
 80046be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80046c2:	e7e4      	b.n	800468e <bme280_compensate_data+0x26>
        rslt = BME280_E_NULL_PTR;
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	4770      	bx	lr
 80046ca:	f04f 30ff 	mov.w	r0, #4294967295
 80046ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295
 80046d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int8_t rslt = BME280_OK;
 80046d6:	2000      	movs	r0, #0
}
 80046d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080046da <bme280_get_sensor_data>:
{
 80046da:	b570      	push	{r4, r5, r6, lr}
 80046dc:	b086      	sub	sp, #24
 80046de:	4606      	mov	r6, r0
 80046e0:	460d      	mov	r5, r1
 80046e2:	4614      	mov	r4, r2
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 80046e4:	2300      	movs	r3, #0
 80046e6:	9304      	str	r3, [sp, #16]
 80046e8:	9305      	str	r3, [sp, #20]
    struct bme280_uncomp_data uncomp_data = { 0 };
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	9302      	str	r3, [sp, #8]
 80046ee:	9303      	str	r3, [sp, #12]
    rslt = null_ptr_check(dev);
 80046f0:	4610      	mov	r0, r2
 80046f2:	f7ff fd43 	bl	800417c <null_ptr_check>
    if ((rslt == BME280_OK) && (comp_data != NULL))
 80046f6:	b9c0      	cbnz	r0, 800472a <bme280_get_sensor_data+0x50>
 80046f8:	b1d5      	cbz	r5, 8004730 <bme280_get_sensor_data+0x56>
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80046fa:	4623      	mov	r3, r4
 80046fc:	2208      	movs	r2, #8
 80046fe:	a904      	add	r1, sp, #16
 8004700:	20f7      	movs	r0, #247	; 0xf7
 8004702:	f7ff fd50 	bl	80041a6 <bme280_get_regs>
        if (rslt == BME280_OK)
 8004706:	4603      	mov	r3, r0
 8004708:	b110      	cbz	r0, 8004710 <bme280_get_sensor_data+0x36>
}
 800470a:	4618      	mov	r0, r3
 800470c:	b006      	add	sp, #24
 800470e:	bd70      	pop	{r4, r5, r6, pc}
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8004710:	a901      	add	r1, sp, #4
 8004712:	a804      	add	r0, sp, #16
 8004714:	f7ff ff8d 	bl	8004632 <bme280_parse_sensor_data>
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8004718:	f104 0310 	add.w	r3, r4, #16
 800471c:	462a      	mov	r2, r5
 800471e:	a901      	add	r1, sp, #4
 8004720:	4630      	mov	r0, r6
 8004722:	f7ff ffa1 	bl	8004668 <bme280_compensate_data>
 8004726:	4603      	mov	r3, r0
 8004728:	e7ef      	b.n	800470a <bme280_get_sensor_data+0x30>
        rslt = BME280_E_NULL_PTR;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295
 800472e:	e7ec      	b.n	800470a <bme280_get_sensor_data+0x30>
 8004730:	f04f 33ff 	mov.w	r3, #4294967295
 8004734:	e7e9      	b.n	800470a <bme280_get_sensor_data+0x30>

08004736 <lis2dh12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_read_reg(lis2dh12_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004736:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004738:	6844      	ldr	r4, [r0, #4]
 800473a:	6880      	ldr	r0, [r0, #8]
 800473c:	47a0      	blx	r4
  return ret;
}
 800473e:	bd10      	pop	{r4, pc}

08004740 <lis2dh12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_write_reg(lis2dh12_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8004740:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004742:	6804      	ldr	r4, [r0, #0]
 8004744:	6880      	ldr	r0, [r0, #8]
 8004746:	47a0      	blx	r4
  return ret;
}
 8004748:	bd10      	pop	{r4, pc}
	...

0800474c <lis2dh12_from_fs2_hr_to_mg>:
  *
  */

float lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
  return ( (float)lsb / 16.0f ) * 1.0f;
 800474c:	ee07 0a90 	vmov	s15, r0
 8004750:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8004754:	eddf 7a02 	vldr	s15, [pc, #8]	; 8004760 <lis2dh12_from_fs2_hr_to_mg+0x14>
 8004758:	ee20 0a27 	vmul.f32	s0, s0, s15
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	3d800000 	.word	0x3d800000

08004764 <lis2dh12_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_meas_set(lis2dh12_ctx_t *ctx,
                                      lis2dh12_temp_en_t val)
{
 8004764:	b530      	push	{r4, r5, lr}
 8004766:	b083      	sub	sp, #12
 8004768:	4604      	mov	r4, r0
 800476a:	460d      	mov	r5, r1
  lis2dh12_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);
 800476c:	2301      	movs	r3, #1
 800476e:	aa01      	add	r2, sp, #4
 8004770:	211f      	movs	r1, #31
 8004772:	f7ff ffe0 	bl	8004736 <lis2dh12_read_reg>
  if (ret == 0) {
 8004776:	4603      	mov	r3, r0
 8004778:	b110      	cbz	r0, 8004780 <lis2dh12_temperature_meas_set+0x1c>
    temp_cfg_reg.temp_en = (uint8_t) val;
    ret = lis2dh12_write_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);
  }
  return ret;
}
 800477a:	4618      	mov	r0, r3
 800477c:	b003      	add	sp, #12
 800477e:	bd30      	pop	{r4, r5, pc}
    temp_cfg_reg.temp_en = (uint8_t) val;
 8004780:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004784:	f365 1387 	bfi	r3, r5, #6, #2
 8004788:	aa02      	add	r2, sp, #8
 800478a:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lis2dh12_write_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);
 800478e:	2301      	movs	r3, #1
 8004790:	211f      	movs	r1, #31
 8004792:	4620      	mov	r0, r4
 8004794:	f7ff ffd4 	bl	8004740 <lis2dh12_write_reg>
 8004798:	4603      	mov	r3, r0
  return ret;
 800479a:	e7ee      	b.n	800477a <lis2dh12_temperature_meas_set+0x16>

0800479c <lis2dh12_operating_mode_set>:
  *                  and HR in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(lis2dh12_ctx_t *ctx, lis2dh12_op_md_t val)
{
 800479c:	b530      	push	{r4, r5, lr}
 800479e:	b083      	sub	sp, #12
 80047a0:	4605      	mov	r5, r0
 80047a2:	460c      	mov	r4, r1
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 80047a4:	2301      	movs	r3, #1
 80047a6:	aa01      	add	r2, sp, #4
 80047a8:	2120      	movs	r1, #32
 80047aa:	f7ff ffc4 	bl	8004736 <lis2dh12_read_reg>
                          (uint8_t*)&ctrl_reg1, 1);
  if (ret == 0) {
 80047ae:	4603      	mov	r3, r0
 80047b0:	b1e0      	cbz	r0, 80047ec <lis2dh12_operating_mode_set+0x50>
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
                            (uint8_t*)&ctrl_reg4, 1);
  } 
  if (ret == 0) {
 80047b2:	b9bb      	cbnz	r3, 80047e4 <lis2dh12_operating_mode_set+0x48>
    if ( val == LIS2DH12_HR_12bit ) {
 80047b4:	b95c      	cbnz	r4, 80047ce <lis2dh12_operating_mode_set+0x32>
      ctrl_reg1.lpen = 0;
 80047b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80047ba:	f36f 03c3 	bfc	r3, #3, #1
 80047be:	f88d 3004 	strb.w	r3, [sp, #4]
      ctrl_reg4.hr   = 1;
 80047c2:	f89d 3000 	ldrb.w	r3, [sp]
 80047c6:	f043 0308 	orr.w	r3, r3, #8
 80047ca:	f88d 3000 	strb.w	r3, [sp]
    }
    if (val == LIS2DH12_NM_10bit) {
 80047ce:	2c01      	cmp	r4, #1
 80047d0:	d014      	beq.n	80047fc <lis2dh12_operating_mode_set+0x60>
      ctrl_reg1.lpen = 0;
      ctrl_reg4.hr   = 0;
    }
    if (val == LIS2DH12_LP_8bit) {
 80047d2:	2c02      	cmp	r4, #2
 80047d4:	d01f      	beq.n	8004816 <lis2dh12_operating_mode_set+0x7a>
      ctrl_reg1.lpen = 1;
      ctrl_reg4.hr   = 0;
    }
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80047d6:	2301      	movs	r3, #1
 80047d8:	aa01      	add	r2, sp, #4
 80047da:	2120      	movs	r1, #32
 80047dc:	4628      	mov	r0, r5
 80047de:	f7ff ffaf 	bl	8004740 <lis2dh12_write_reg>
 80047e2:	4603      	mov	r3, r0
  } 
  if (ret == 0) {
 80047e4:	b323      	cbz	r3, 8004830 <lis2dh12_operating_mode_set+0x94>
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	b003      	add	sp, #12
 80047ea:	bd30      	pop	{r4, r5, pc}
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 80047ec:	2301      	movs	r3, #1
 80047ee:	466a      	mov	r2, sp
 80047f0:	2123      	movs	r1, #35	; 0x23
 80047f2:	4628      	mov	r0, r5
 80047f4:	f7ff ff9f 	bl	8004736 <lis2dh12_read_reg>
 80047f8:	4603      	mov	r3, r0
 80047fa:	e7da      	b.n	80047b2 <lis2dh12_operating_mode_set+0x16>
      ctrl_reg1.lpen = 0;
 80047fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004800:	f36f 03c3 	bfc	r3, #3, #1
 8004804:	f88d 3004 	strb.w	r3, [sp, #4]
      ctrl_reg4.hr   = 0;
 8004808:	f89d 3000 	ldrb.w	r3, [sp]
 800480c:	f36f 03c3 	bfc	r3, #3, #1
 8004810:	f88d 3000 	strb.w	r3, [sp]
 8004814:	e7dd      	b.n	80047d2 <lis2dh12_operating_mode_set+0x36>
      ctrl_reg1.lpen = 1;
 8004816:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800481a:	f043 0308 	orr.w	r3, r3, #8
 800481e:	f88d 3004 	strb.w	r3, [sp, #4]
      ctrl_reg4.hr   = 0;
 8004822:	f89d 3000 	ldrb.w	r3, [sp]
 8004826:	f36f 03c3 	bfc	r3, #3, #1
 800482a:	f88d 3000 	strb.w	r3, [sp]
 800482e:	e7d2      	b.n	80047d6 <lis2dh12_operating_mode_set+0x3a>
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8004830:	2301      	movs	r3, #1
 8004832:	466a      	mov	r2, sp
 8004834:	2123      	movs	r1, #35	; 0x23
 8004836:	4628      	mov	r0, r5
 8004838:	f7ff ff82 	bl	8004740 <lis2dh12_write_reg>
 800483c:	4603      	mov	r3, r0
  return ret;
 800483e:	e7d2      	b.n	80047e6 <lis2dh12_operating_mode_set+0x4a>

08004840 <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(lis2dh12_ctx_t *ctx, lis2dh12_odr_t val)
{
 8004840:	b530      	push	{r4, r5, lr}
 8004842:	b083      	sub	sp, #12
 8004844:	4604      	mov	r4, r0
 8004846:	460d      	mov	r5, r1
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004848:	2301      	movs	r3, #1
 800484a:	aa01      	add	r2, sp, #4
 800484c:	2120      	movs	r1, #32
 800484e:	f7ff ff72 	bl	8004736 <lis2dh12_read_reg>
  if (ret == 0) {
 8004852:	4603      	mov	r3, r0
 8004854:	b110      	cbz	r0, 800485c <lis2dh12_data_rate_set+0x1c>
    ctrl_reg1.odr = (uint8_t)val;
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
 8004856:	4618      	mov	r0, r3
 8004858:	b003      	add	sp, #12
 800485a:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1.odr = (uint8_t)val;
 800485c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004860:	f365 1307 	bfi	r3, r5, #4, #4
 8004864:	aa02      	add	r2, sp, #8
 8004866:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800486a:	2301      	movs	r3, #1
 800486c:	2120      	movs	r1, #32
 800486e:	4620      	mov	r0, r4
 8004870:	f7ff ff66 	bl	8004740 <lis2dh12_write_reg>
 8004874:	4603      	mov	r3, r0
  return ret;
 8004876:	e7ee      	b.n	8004856 <lis2dh12_data_rate_set+0x16>

08004878 <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(lis2dh12_ctx_t *ctx, lis2dh12_fs_t val)
{
 8004878:	b530      	push	{r4, r5, lr}
 800487a:	b083      	sub	sp, #12
 800487c:	4604      	mov	r4, r0
 800487e:	460d      	mov	r5, r1
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8004880:	2301      	movs	r3, #1
 8004882:	aa01      	add	r2, sp, #4
 8004884:	2123      	movs	r1, #35	; 0x23
 8004886:	f7ff ff56 	bl	8004736 <lis2dh12_read_reg>
  if (ret == 0) {
 800488a:	4603      	mov	r3, r0
 800488c:	b110      	cbz	r0, 8004894 <lis2dh12_full_scale_set+0x1c>
    ctrl_reg4.fs = (uint8_t)val;
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
 800488e:	4618      	mov	r0, r3
 8004890:	b003      	add	sp, #12
 8004892:	bd30      	pop	{r4, r5, pc}
    ctrl_reg4.fs = (uint8_t)val;
 8004894:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004898:	f365 1305 	bfi	r3, r5, #4, #2
 800489c:	aa02      	add	r2, sp, #8
 800489e:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 80048a2:	2301      	movs	r3, #1
 80048a4:	2123      	movs	r1, #35	; 0x23
 80048a6:	4620      	mov	r0, r4
 80048a8:	f7ff ff4a 	bl	8004740 <lis2dh12_write_reg>
 80048ac:	4603      	mov	r3, r0
  return ret;
 80048ae:	e7ee      	b.n	800488e <lis2dh12_full_scale_set+0x16>

080048b0 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(lis2dh12_ctx_t *ctx, uint8_t val)
{
 80048b0:	b530      	push	{r4, r5, lr}
 80048b2:	b083      	sub	sp, #12
 80048b4:	4604      	mov	r4, r0
 80048b6:	460d      	mov	r5, r1
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 80048b8:	2301      	movs	r3, #1
 80048ba:	aa01      	add	r2, sp, #4
 80048bc:	2123      	movs	r1, #35	; 0x23
 80048be:	f7ff ff3a 	bl	8004736 <lis2dh12_read_reg>
  if (ret == 0) {
 80048c2:	4603      	mov	r3, r0
 80048c4:	b110      	cbz	r0, 80048cc <lis2dh12_block_data_update_set+0x1c>
    ctrl_reg4.bdu = val;
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	b003      	add	sp, #12
 80048ca:	bd30      	pop	{r4, r5, pc}
    ctrl_reg4.bdu = val;
 80048cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80048d0:	f365 13c7 	bfi	r3, r5, #7, #1
 80048d4:	aa02      	add	r2, sp, #8
 80048d6:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 80048da:	2301      	movs	r3, #1
 80048dc:	2123      	movs	r1, #35	; 0x23
 80048de:	4620      	mov	r0, r4
 80048e0:	f7ff ff2e 	bl	8004740 <lis2dh12_write_reg>
 80048e4:	4603      	mov	r3, r0
  return ret;
 80048e6:	e7ee      	b.n	80048c6 <lis2dh12_block_data_update_set+0x16>

080048e8 <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
 80048e8:	b510      	push	{r4, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	460c      	mov	r4, r1
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG, (uint8_t*)&status_reg, 1);
 80048ee:	2301      	movs	r3, #1
 80048f0:	aa01      	add	r2, sp, #4
 80048f2:	2127      	movs	r1, #39	; 0x27
 80048f4:	f7ff ff1f 	bl	8004736 <lis2dh12_read_reg>
  *val = status_reg.zyxda;
 80048f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80048fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004900:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8004902:	b002      	add	sp, #8
 8004904:	bd10      	pop	{r4, pc}

08004906 <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
 8004906:	b508      	push	{r3, lr}
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
 8004908:	2306      	movs	r3, #6
 800490a:	460a      	mov	r2, r1
 800490c:	2128      	movs	r1, #40	; 0x28
 800490e:	f7ff ff12 	bl	8004736 <lis2dh12_read_reg>
  return ret;
}
 8004912:	bd08      	pop	{r3, pc}

08004914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004918:	2400      	movs	r4, #0
 800491a:	9403      	str	r4, [sp, #12]
 800491c:	9404      	str	r4, [sp, #16]
 800491e:	9405      	str	r4, [sp, #20]
 8004920:	9406      	str	r4, [sp, #24]
 8004922:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004924:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <MX_GPIO_Init+0x94>)
 8004926:	695a      	ldr	r2, [r3, #20]
 8004928:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800492c:	615a      	str	r2, [r3, #20]
 800492e:	695a      	ldr	r2, [r3, #20]
 8004930:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004934:	9200      	str	r2, [sp, #0]
 8004936:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004938:	695a      	ldr	r2, [r3, #20]
 800493a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800493e:	615a      	str	r2, [r3, #20]
 8004940:	695a      	ldr	r2, [r3, #20]
 8004942:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8004946:	9201      	str	r2, [sp, #4]
 8004948:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004950:	615a      	str	r2, [r3, #20]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004958:	9302      	str	r3, [sp, #8]
 800495a:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800495c:	4e13      	ldr	r6, [pc, #76]	; (80049ac <MX_GPIO_Init+0x98>)
 800495e:	4622      	mov	r2, r4
 8004960:	f240 3102 	movw	r1, #770	; 0x302
 8004964:	4630      	mov	r0, r6
 8004966:	f7fc fff1 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800496a:	4622      	mov	r2, r4
 800496c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004974:	f7fc ffea 	bl	800194c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB1 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8004978:	f240 3302 	movw	r3, #770	; 0x302
 800497c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800497e:	2501      	movs	r5, #1
 8004980:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004982:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004984:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004986:	a903      	add	r1, sp, #12
 8004988:	4630      	mov	r0, r6
 800498a:	f7fc ff15 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800498e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004992:	9303      	str	r3, [sp, #12]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004994:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004996:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004998:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800499a:	a903      	add	r1, sp, #12
 800499c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049a0:	f7fc ff0a 	bl	80017b8 <HAL_GPIO_Init>

}
 80049a4:	b008      	add	sp, #32
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
 80049a8:	40021000 	.word	0x40021000
 80049ac:	48000400 	.word	0x48000400

080049b0 <MX_USART1_UART_Init>:
{
 80049b0:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80049b2:	4809      	ldr	r0, [pc, #36]	; (80049d8 <MX_USART1_UART_Init+0x28>)
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <MX_USART1_UART_Init+0x2c>)
 80049b6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80049b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80049bc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049be:	2300      	movs	r3, #0
 80049c0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049c2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049c4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049c6:	220c      	movs	r2, #12
 80049c8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049ca:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049cc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049ce:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049d0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80049d2:	f7fe ff30 	bl	8003836 <HAL_UART_Init>
 80049d6:	bd08      	pop	{r3, pc}
 80049d8:	20000428 	.word	0x20000428
 80049dc:	40013800 	.word	0x40013800

080049e0 <MX_ADC1_Init>:
{
 80049e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e2:	b085      	sub	sp, #20
  ADC_MultiModeTypeDef multimode = {0};
 80049e4:	2400      	movs	r4, #0
 80049e6:	9401      	str	r4, [sp, #4]
 80049e8:	9402      	str	r4, [sp, #8]
 80049ea:	9403      	str	r4, [sp, #12]
  hadc1.Instance = ADC1;
 80049ec:	4d1a      	ldr	r5, [pc, #104]	; (8004a58 <MX_ADC1_Init+0x78>)
 80049ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80049f2:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80049f4:	606c      	str	r4, [r5, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80049f6:	2310      	movs	r3, #16
 80049f8:	60ab      	str	r3, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80049fa:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80049fc:	61ec      	str	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80049fe:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004a00:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004a02:	2701      	movs	r7, #1
 8004a04:	62ef      	str	r7, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004a06:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004a08:	622f      	str	r7, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004a0a:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	616b      	str	r3, [r5, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004a10:	61ac      	str	r4, [r5, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004a12:	63ac      	str	r4, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004a14:	4628      	mov	r0, r5
 8004a16:	f7fc f9c3 	bl	8000da0 <HAL_ADC_Init>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004a1a:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004a1c:	a901      	add	r1, sp, #4
 8004a1e:	4628      	mov	r0, r5
 8004a20:	f7fc fda0 	bl	8001564 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig1.Channel = ADC_CHANNEL_1;
 8004a24:	490d      	ldr	r1, [pc, #52]	; (8004a5c <MX_ADC1_Init+0x7c>)
 8004a26:	600f      	str	r7, [r1, #0]
  sConfig1.Rank = ADC_REGULAR_RANK_1;
 8004a28:	604f      	str	r7, [r1, #4]
  sConfig1.SingleDiff = ADC_SINGLE_ENDED;
 8004a2a:	60cc      	str	r4, [r1, #12]
  sConfig1.SamplingTime = ADC_SAMPLETIME_181CYCLES_5 ;
 8004a2c:	2306      	movs	r3, #6
 8004a2e:	608b      	str	r3, [r1, #8]
  sConfig1.OffsetNumber = ADC_OFFSET_NONE;
 8004a30:	610c      	str	r4, [r1, #16]
  sConfig1.Offset = 0;
 8004a32:	614c      	str	r4, [r1, #20]
  sConfig2.Channel = ADC_CHANNEL_2;
 8004a34:	4e0a      	ldr	r6, [pc, #40]	; (8004a60 <MX_ADC1_Init+0x80>)
 8004a36:	2202      	movs	r2, #2
 8004a38:	6032      	str	r2, [r6, #0]
  sConfig2.Rank = ADC_REGULAR_RANK_1;
 8004a3a:	6077      	str	r7, [r6, #4]
  sConfig2.SingleDiff = ADC_SINGLE_ENDED;
 8004a3c:	60f4      	str	r4, [r6, #12]
  sConfig2.SamplingTime = ADC_SAMPLETIME_181CYCLES_5 ;
 8004a3e:	60b3      	str	r3, [r6, #8]
  sConfig2.OffsetNumber = ADC_OFFSET_NONE;
 8004a40:	6134      	str	r4, [r6, #16]
  sConfig2.Offset = 0;
 8004a42:	6174      	str	r4, [r6, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig1) != HAL_OK)
 8004a44:	4628      	mov	r0, r5
 8004a46:	f7fc fbcb 	bl	80011e0 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig2) != HAL_OK)
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f7fc fbc7 	bl	80011e0 <HAL_ADC_ConfigChannel>
}
 8004a52:	b005      	add	sp, #20
 8004a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a56:	bf00      	nop
 8004a58:	200003d4 	.word	0x200003d4
 8004a5c:	20000264 	.word	0x20000264
 8004a60:	2000027c 	.word	0x2000027c

08004a64 <MX_I2C1_Init>:
{
 8004a64:	b538      	push	{r3, r4, r5, lr}
  hi2c1.Instance = I2C1;
 8004a66:	4c0d      	ldr	r4, [pc, #52]	; (8004a9c <MX_I2C1_Init+0x38>)
 8004a68:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <MX_I2C1_Init+0x3c>)
 8004a6a:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004a6c:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <MX_I2C1_Init+0x40>)
 8004a6e:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004a70:	2500      	movs	r5, #0
 8004a72:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a74:	2301      	movs	r3, #1
 8004a76:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a78:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004a7a:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004a7c:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a7e:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a80:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004a82:	4620      	mov	r0, r4
 8004a84:	f7fd f91a 	bl	8001cbc <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004a88:	4629      	mov	r1, r5
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f7fd fd70 	bl	8002570 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004a90:	4629      	mov	r1, r5
 8004a92:	4620      	mov	r0, r4
 8004a94:	f7fd fd9a 	bl	80025cc <HAL_I2CEx_ConfigDigitalFilter>
 8004a98:	bd38      	pop	{r3, r4, r5, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000388 	.word	0x20000388
 8004aa0:	40005400 	.word	0x40005400
 8004aa4:	2000090e 	.word	0x2000090e

08004aa8 <MX_TIM6_Init>:
{
 8004aa8:	b530      	push	{r4, r5, lr}
 8004aaa:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004aac:	2500      	movs	r5, #0
 8004aae:	9501      	str	r5, [sp, #4]
 8004ab0:	9502      	str	r5, [sp, #8]
 8004ab2:	9503      	str	r5, [sp, #12]
  htim6.Instance = TIM6;
 8004ab4:	4c09      	ldr	r4, [pc, #36]	; (8004adc <MX_TIM6_Init+0x34>)
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <MX_TIM6_Init+0x38>)
 8004ab8:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 8000;
 8004aba:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8004abe:	6063      	str	r3, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ac0:	60a5      	str	r5, [r4, #8]
  htim6.Init.Period = 8000;
 8004ac2:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ac4:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f7fe fbee 	bl	80032a8 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004acc:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ace:	9503      	str	r5, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004ad0:	a901      	add	r1, sp, #4
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f7fe fc02 	bl	80032dc <HAL_TIMEx_MasterConfigSynchronization>
}
 8004ad8:	b005      	add	sp, #20
 8004ada:	bd30      	pop	{r4, r5, pc}
 8004adc:	20000498 	.word	0x20000498
 8004ae0:	40001000 	.word	0x40001000

08004ae4 <SystemClock_Config>:
{
 8004ae4:	b530      	push	{r4, r5, lr}
 8004ae6:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ae8:	2228      	movs	r2, #40	; 0x28
 8004aea:	2100      	movs	r1, #0
 8004aec:	a80c      	add	r0, sp, #48	; 0x30
 8004aee:	f001 fd71 	bl	80065d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004af2:	2400      	movs	r4, #0
 8004af4:	9407      	str	r4, [sp, #28]
 8004af6:	9408      	str	r4, [sp, #32]
 8004af8:	9409      	str	r4, [sp, #36]	; 0x24
 8004afa:	940a      	str	r4, [sp, #40]	; 0x28
 8004afc:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004afe:	9400      	str	r4, [sp, #0]
 8004b00:	9401      	str	r4, [sp, #4]
 8004b02:	9402      	str	r4, [sp, #8]
 8004b04:	9403      	str	r4, [sp, #12]
 8004b06:	9404      	str	r4, [sp, #16]
 8004b08:	9405      	str	r4, [sp, #20]
 8004b0a:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b0c:	2502      	movs	r5, #2
 8004b0e:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b10:	2301      	movs	r3, #1
 8004b12:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b14:	2310      	movs	r3, #16
 8004b16:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b18:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004b1a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004b1e:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b20:	a80c      	add	r0, sp, #48	; 0x30
 8004b22:	f7fd fd7f 	bl	8002624 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b26:	230f      	movs	r3, #15
 8004b28:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b2a:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b2c:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b32:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b34:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004b36:	4629      	mov	r1, r5
 8004b38:	a807      	add	r0, sp, #28
 8004b3a:	f7fe f8b5 	bl	8002ca8 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8004b3e:	23a1      	movs	r3, #161	; 0xa1
 8004b40:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004b42:	9402      	str	r4, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8004b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b48:	9304      	str	r3, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004b4a:	9403      	str	r4, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b4c:	4668      	mov	r0, sp
 8004b4e:	f7fe f9ad 	bl	8002eac <HAL_RCCEx_PeriphCLKConfig>
}
 8004b52:	b017      	add	sp, #92	; 0x5c
 8004b54:	bd30      	pop	{r4, r5, pc}

08004b56 <main>:
{
 8004b56:	b508      	push	{r3, lr}
  HAL_Init();
 8004b58:	f7fc f864 	bl	8000c24 <HAL_Init>
  SystemClock_Config();
 8004b5c:	f7ff ffc2 	bl	8004ae4 <SystemClock_Config>
  MX_GPIO_Init();
 8004b60:	f7ff fed8 	bl	8004914 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8004b64:	f7ff ff24 	bl	80049b0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8004b68:	f7ff ff3a 	bl	80049e0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004b6c:	f7ff ff7a 	bl	8004a64 <MX_I2C1_Init>
  MX_TIM6_Init();
 8004b70:	f7ff ff9a 	bl	8004aa8 <MX_TIM6_Init>
  user_init();
 8004b74:	f001 f8a8 	bl	8005cc8 <user_init>
	  process_buffer();
 8004b78:	f000 fb54 	bl	8005224 <process_buffer>
	  display();
 8004b7c:	f001 fb26 	bl	80061cc <display>
	  adc_sb();
 8004b80:	f000 fd62 	bl	8005648 <adc_sb>
	  stream_accelerometer_data();
 8004b84:	f001 f96a 	bl	8005e5c <stream_accelerometer_data>
 8004b88:	e7f6      	b.n	8004b78 <main+0x22>

08004b8a <user_delay>:

}


void user_delay(uint32_t delay)
{
 8004b8a:	b538      	push	{r3, r4, r5, lr}
 8004b8c:	4605      	mov	r5, r0
	int first_tick = HAL_GetTick();
 8004b8e:	f7fc f867 	bl	8000c60 <HAL_GetTick>
 8004b92:	4604      	mov	r4, r0

	while((HAL_GetTick() - first_tick) < delay)
 8004b94:	f7fc f864 	bl	8000c60 <HAL_GetTick>
 8004b98:	1b00      	subs	r0, r0, r4
 8004b9a:	42a8      	cmp	r0, r5
 8004b9c:	d3fa      	bcc.n	8004b94 <user_delay+0xa>
	{

	}
}
 8004b9e:	bd38      	pop	{r3, r4, r5, pc}

08004ba0 <user_i2c_read>:

/*
 * SOURCED FROM BoschSensortec https://github.com/BoschSensortec/BME280_driver
 */
int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8004ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	4617      	mov	r7, r2
 8004ba8:	4698      	mov	r8, r3
 8004baa:	aa04      	add	r2, sp, #16
 8004bac:	f802 1d01 	strb.w	r1, [r2, #-1]!
     * | Read       | (reg_data[len - 1]) |
     * | Stop       | -                   |
     * |------------+---------------------|
     */

    HAL_I2C_Master_Transmit(&hi2c1, (dev_id<<1)&0xFE, &reg_addr, 1, 100);
 8004bb0:	0040      	lsls	r0, r0, #1
 8004bb2:	f000 04fe 	and.w	r4, r0, #254	; 0xfe
 8004bb6:	4d09      	ldr	r5, [pc, #36]	; (8004bdc <user_i2c_read+0x3c>)
 8004bb8:	2664      	movs	r6, #100	; 0x64
 8004bba:	9600      	str	r6, [sp, #0]
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f7fd f8d9 	bl	8001d78 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, ( ((dev_id<<1)&0xFE) + 1 ), reg_data, len, 100);
 8004bc6:	9600      	str	r6, [sp, #0]
 8004bc8:	4643      	mov	r3, r8
 8004bca:	463a      	mov	r2, r7
 8004bcc:	1c61      	adds	r1, r4, #1
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f7fd f996 	bl	8001f00 <HAL_I2C_Master_Receive>

    return rslt;
}
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	b004      	add	sp, #16
 8004bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bdc:	20000388 	.word	0x20000388

08004be0 <user_i2c_write>:

/*
 * SOURCED FROM BoschSensortec https://github.com/BoschSensortec/BME280_driver
 */
int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8004be0:	b510      	push	{r4, lr}
 8004be2:	b084      	sub	sp, #16

    HAL_I2C_Master_Transmit(&hi2c1, (dev_id<<1)&0b11111110, (uint8_t*)i2c_buff, len+1, 100);
    free(i2c_buff);
*/

	HAL_I2C_Mem_Write(&hi2c1, (dev_id<<1)&0xFE, reg_addr, 1, reg_data, len, 100);
 8004be4:	0040      	lsls	r0, r0, #1
 8004be6:	2464      	movs	r4, #100	; 0x64
 8004be8:	9402      	str	r4, [sp, #8]
 8004bea:	9301      	str	r3, [sp, #4]
 8004bec:	9200      	str	r2, [sp, #0]
 8004bee:	2301      	movs	r3, #1
 8004bf0:	460a      	mov	r2, r1
 8004bf2:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8004bf6:	4803      	ldr	r0, [pc, #12]	; (8004c04 <user_i2c_write+0x24>)
 8004bf8:	f7fd fa44 	bl	8002084 <HAL_I2C_Mem_Write>

    return rslt;
}
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	b004      	add	sp, #16
 8004c00:	bd10      	pop	{r4, pc}
 8004c02:	bf00      	nop
 8004c04:	20000388 	.word	0x20000388

08004c08 <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
 8004c08:	b510      	push	{r4, lr}
 8004c0a:	b084      	sub	sp, #16
  if (handle == &hi2c1)
 8004c0c:	4c08      	ldr	r4, [pc, #32]	; (8004c30 <platform_write+0x28>)
 8004c0e:	42a0      	cmp	r0, r4
 8004c10:	d002      	beq.n	8004c18 <platform_write+0x10>
    reg |= 0x80;
    HAL_I2C_Mem_Write(handle, LIS2DH12_I2C_ADD_L, reg,
                      I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }
  return 0;
}
 8004c12:	2000      	movs	r0, #0
 8004c14:	b004      	add	sp, #16
 8004c16:	bd10      	pop	{r4, pc}
    HAL_I2C_Mem_Write(handle, LIS2DH12_I2C_ADD_L, reg,
 8004c18:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004c1c:	9402      	str	r4, [sp, #8]
 8004c1e:	9301      	str	r3, [sp, #4]
 8004c20:	9200      	str	r2, [sp, #0]
 8004c22:	2301      	movs	r3, #1
 8004c24:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 8004c28:	2131      	movs	r1, #49	; 0x31
 8004c2a:	f7fd fa2b 	bl	8002084 <HAL_I2C_Mem_Write>
 8004c2e:	e7f0      	b.n	8004c12 <platform_write+0xa>
 8004c30:	20000388 	.word	0x20000388

08004c34 <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8004c34:	b510      	push	{r4, lr}
 8004c36:	b084      	sub	sp, #16
  if (handle == &hi2c1)
 8004c38:	4c08      	ldr	r4, [pc, #32]	; (8004c5c <platform_read+0x28>)
 8004c3a:	42a0      	cmp	r0, r4
 8004c3c:	d002      	beq.n	8004c44 <platform_read+0x10>
    /* Read multiple command */
    reg |= 0x80;
    HAL_I2C_Mem_Read(handle, LIS2DH12_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }
  return 0;
}
 8004c3e:	2000      	movs	r0, #0
 8004c40:	b004      	add	sp, #16
 8004c42:	bd10      	pop	{r4, pc}
    HAL_I2C_Mem_Read(handle, LIS2DH12_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8004c44:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004c48:	9402      	str	r4, [sp, #8]
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	9200      	str	r2, [sp, #0]
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 8004c54:	2131      	movs	r1, #49	; 0x31
 8004c56:	f7fd fafb 	bl	8002250 <HAL_I2C_Mem_Read>
 8004c5a:	e7f0      	b.n	8004c3e <platform_read+0xa>
 8004c5c:	20000388 	.word	0x20000388

08004c60 <HAL_TIM_PeriodElapsedCallback>:
	one_sec_msg = true;
 8004c60:	2201      	movs	r2, #1
 8004c62:	4b01      	ldr	r3, [pc, #4]	; (8004c68 <HAL_TIM_PeriodElapsedCallback+0x8>)
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	4770      	bx	lr
 8004c68:	20000328 	.word	0x20000328

08004c6c <HAL_UART_RxCpltCallback>:
{
 8004c6c:	b508      	push	{r3, lr}
	if(huart->Instance == USART1)
 8004c6e:	6802      	ldr	r2, [r0, #0]
 8004c70:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <HAL_UART_RxCpltCallback+0x70>)
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d000      	beq.n	8004c78 <HAL_UART_RxCpltCallback+0xc>
 8004c76:	bd08      	pop	{r3, pc}
		if(rx_index >= 100)
 8004c78:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <HAL_UART_RxCpltCallback+0x74>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b63      	cmp	r3, #99	; 0x63
 8004c80:	d902      	bls.n	8004c88 <HAL_UART_RxCpltCallback+0x1c>
			rx_index = 0;
 8004c82:	2200      	movs	r2, #0
 8004c84:	4b16      	ldr	r3, [pc, #88]	; (8004ce0 <HAL_UART_RxCpltCallback+0x74>)
 8004c86:	701a      	strb	r2, [r3, #0]
		if(rx_data == '$')
 8004c88:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <HAL_UART_RxCpltCallback+0x78>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b24      	cmp	r3, #36	; 0x24
 8004c90:	d014      	beq.n	8004cbc <HAL_UART_RxCpltCallback+0x50>
		if(rx_data == '\n')
 8004c92:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <HAL_UART_RxCpltCallback+0x78>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b0a      	cmp	r3, #10
 8004c9a:	d015      	beq.n	8004cc8 <HAL_UART_RxCpltCallback+0x5c>
		rx_buffer[rx_index++] = rx_data;
 8004c9c:	4910      	ldr	r1, [pc, #64]	; (8004ce0 <HAL_UART_RxCpltCallback+0x74>)
 8004c9e:	780b      	ldrb	r3, [r1, #0]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	700a      	strb	r2, [r1, #0]
 8004ca8:	490e      	ldr	r1, [pc, #56]	; (8004ce4 <HAL_UART_RxCpltCallback+0x78>)
 8004caa:	780a      	ldrb	r2, [r1, #0]
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	480e      	ldr	r0, [pc, #56]	; (8004ce8 <HAL_UART_RxCpltCallback+0x7c>)
 8004cb0:	54c2      	strb	r2, [r0, r3]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data, 1);
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	480d      	ldr	r0, [pc, #52]	; (8004cec <HAL_UART_RxCpltCallback+0x80>)
 8004cb6:	f7fe fb4a 	bl	800334e <HAL_UART_Receive_IT>
}
 8004cba:	e7dc      	b.n	8004c76 <HAL_UART_RxCpltCallback+0xa>
			rx_index = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	4a08      	ldr	r2, [pc, #32]	; (8004ce0 <HAL_UART_RxCpltCallback+0x74>)
 8004cc0:	7013      	strb	r3, [r2, #0]
			end = 0;
 8004cc2:	4a0b      	ldr	r2, [pc, #44]	; (8004cf0 <HAL_UART_RxCpltCallback+0x84>)
 8004cc4:	7013      	strb	r3, [r2, #0]
 8004cc6:	e7e4      	b.n	8004c92 <HAL_UART_RxCpltCallback+0x26>
			rx_flag = true;
 8004cc8:	2201      	movs	r2, #1
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <HAL_UART_RxCpltCallback+0x88>)
 8004ccc:	701a      	strb	r2, [r3, #0]
			end = rx_index;
 8004cce:	4b04      	ldr	r3, [pc, #16]	; (8004ce0 <HAL_UART_RxCpltCallback+0x74>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	4a06      	ldr	r2, [pc, #24]	; (8004cf0 <HAL_UART_RxCpltCallback+0x84>)
 8004cd6:	7013      	strb	r3, [r2, #0]
 8004cd8:	e7e0      	b.n	8004c9c <HAL_UART_RxCpltCallback+0x30>
 8004cda:	bf00      	nop
 8004cdc:	40013800 	.word	0x40013800
 8004ce0:	2000034f 	.word	0x2000034f
 8004ce4:	200005dd 	.word	0x200005dd
 8004ce8:	20000574 	.word	0x20000574
 8004cec:	20000428 	.word	0x20000428
 8004cf0:	200002da 	.word	0x200002da
 8004cf4:	2000034e 	.word	0x2000034e

08004cf8 <check_gga>:
{
 8004cf8:	b500      	push	{lr}
 8004cfa:	b085      	sub	sp, #20
	strncpy(msg,message,6);
 8004cfc:	2206      	movs	r2, #6
 8004cfe:	4601      	mov	r1, r0
 8004d00:	a802      	add	r0, sp, #8
 8004d02:	f001 fc85 	bl	8006610 <strncpy>
	strcpy(test, "$GPGGA");
 8004d06:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <check_gga+0x80>)
 8004d08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d0c:	9000      	str	r0, [sp, #0]
 8004d0e:	f8ad 1004 	strh.w	r1, [sp, #4]
	if((test[0] == msg[0])&&(test[1] == msg[1])&&(test[2] == msg[2]))
 8004d12:	b2c0      	uxtb	r0, r0
 8004d14:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004d18:	4298      	cmp	r0, r3
 8004d1a:	d003      	beq.n	8004d24 <check_gga+0x2c>
	return false;
 8004d1c:	2000      	movs	r0, #0
}
 8004d1e:	b005      	add	sp, #20
 8004d20:	f85d fb04 	ldr.w	pc, [sp], #4
	if((test[0] == msg[0])&&(test[1] == msg[1])&&(test[2] == msg[2]))
 8004d24:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004d28:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d001      	beq.n	8004d34 <check_gga+0x3c>
	return false;
 8004d30:	2000      	movs	r0, #0
 8004d32:	e7f4      	b.n	8004d1e <check_gga+0x26>
	if((test[0] == msg[0])&&(test[1] == msg[1])&&(test[2] == msg[2]))
 8004d34:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8004d38:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <check_gga+0x4c>
	return false;
 8004d40:	2000      	movs	r0, #0
 8004d42:	e7ec      	b.n	8004d1e <check_gga+0x26>
		if((test[3] == msg[3])&&(test[4] == msg[4])&&(test[5] == msg[5]))
 8004d44:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004d48:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <check_gga+0x5c>
	return false;
 8004d50:	2000      	movs	r0, #0
 8004d52:	e7e4      	b.n	8004d1e <check_gga+0x26>
		if((test[3] == msg[3])&&(test[4] == msg[4])&&(test[5] == msg[5]))
 8004d54:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004d58:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d001      	beq.n	8004d64 <check_gga+0x6c>
	return false;
 8004d60:	2000      	movs	r0, #0
 8004d62:	e7dc      	b.n	8004d1e <check_gga+0x26>
		if((test[3] == msg[3])&&(test[4] == msg[4])&&(test[5] == msg[5]))
 8004d64:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004d68:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <check_gga+0x7c>
	return false;
 8004d70:	2000      	movs	r0, #0
 8004d72:	e7d4      	b.n	8004d1e <check_gga+0x26>
			return true;
 8004d74:	2001      	movs	r0, #1
 8004d76:	e7d2      	b.n	8004d1e <check_gga+0x26>
 8004d78:	08009600 	.word	0x08009600

08004d7c <check_sum>:
{
 8004d7c:	b410      	push	{r4}
	int ret = message[1];
 8004d7e:	7842      	ldrb	r2, [r0, #1]
	for(int n = 2; n < length-1; n++)
 8004d80:	2302      	movs	r3, #2
 8004d82:	e002      	b.n	8004d8a <check_sum+0xe>
		ret ^= message[n];
 8004d84:	5cc4      	ldrb	r4, [r0, r3]
 8004d86:	4062      	eors	r2, r4
	for(int n = 2; n < length-1; n++)
 8004d88:	3301      	adds	r3, #1
 8004d8a:	1e4c      	subs	r4, r1, #1
 8004d8c:	42a3      	cmp	r3, r4
 8004d8e:	dbf9      	blt.n	8004d84 <check_sum+0x8>
}
 8004d90:	4610      	mov	r0, r2
 8004d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <is_valid>:
{
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	4604      	mov	r4, r0
	star = strrchr(message, '*');
 8004d9e:	212a      	movs	r1, #42	; 0x2a
 8004da0:	f001 fc4b 	bl	800663a <strrchr>
	if(star != NULL)
 8004da4:	b1f0      	cbz	r0, 8004de4 <is_valid+0x4c>
		star_index = (int)(star - message);
 8004da6:	1b05      	subs	r5, r0, r4
		check = check_sum((char*) message, star_index+1);
 8004da8:	1c69      	adds	r1, r5, #1
 8004daa:	4620      	mov	r0, r4
 8004dac:	f7ff ffe6 	bl	8004d7c <check_sum>
 8004db0:	4606      	mov	r6, r0
		c[0] = '0';
 8004db2:	2330      	movs	r3, #48	; 0x30
 8004db4:	f88d 3000 	strb.w	r3, [sp]
		c[1] = 'x';
 8004db8:	2378      	movs	r3, #120	; 0x78
 8004dba:	f88d 3001 	strb.w	r3, [sp, #1]
		c[2] = message[star_index+1];
 8004dbe:	442c      	add	r4, r5
 8004dc0:	7863      	ldrb	r3, [r4, #1]
 8004dc2:	f88d 3002 	strb.w	r3, [sp, #2]
		c[3] = message[star_index+2];
 8004dc6:	78a3      	ldrb	r3, [r4, #2]
 8004dc8:	f88d 3003 	strb.w	r3, [sp, #3]
		crc = strtol(c, &ptr, 16);
 8004dcc:	2210      	movs	r2, #16
 8004dce:	a901      	add	r1, sp, #4
 8004dd0:	4668      	mov	r0, sp
 8004dd2:	f002 fae1 	bl	8007398 <strtol>
		if(crc == check)
 8004dd6:	4286      	cmp	r6, r0
 8004dd8:	d002      	beq.n	8004de0 <is_valid+0x48>
	return false;
 8004dda:	2000      	movs	r0, #0
}
 8004ddc:	b002      	add	sp, #8
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
			return true;
 8004de0:	2001      	movs	r0, #1
 8004de2:	e7fb      	b.n	8004ddc <is_valid+0x44>
	return false;
 8004de4:	2000      	movs	r0, #0
 8004de6:	e7f9      	b.n	8004ddc <is_valid+0x44>

08004de8 <split_extract>:
{
 8004de8:	b570      	push	{r4, r5, r6, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	4605      	mov	r5, r0
    char dst[30]= {0};
 8004dee:	221e      	movs	r2, #30
 8004df0:	2100      	movs	r1, #0
 8004df2:	4668      	mov	r0, sp
 8004df4:	f001 fbee 	bl	80065d4 <memset>
    end = strchr(bgn+1, ',');
 8004df8:	212c      	movs	r1, #44	; 0x2c
 8004dfa:	1c68      	adds	r0, r5, #1
 8004dfc:	f001 fbf2 	bl	80065e4 <strchr>
 8004e00:	4606      	mov	r6, r0
    for(i = 0; i < 14; i++)
 8004e02:	2400      	movs	r4, #0
 8004e04:	e015      	b.n	8004e32 <split_extract+0x4a>
            strcpy(dst, "0");
 8004e06:	2330      	movs	r3, #48	; 0x30
 8004e08:	f8ad 3000 	strh.w	r3, [sp]
            parse[i] = false;
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4b42      	ldr	r3, [pc, #264]	; (8004f18 <split_extract+0x130>)
 8004e10:	551a      	strb	r2, [r3, r4]
 8004e12:	e01a      	b.n	8004e4a <split_extract+0x62>
				if(parse[1] == true)
 8004e14:	4b40      	ldr	r3, [pc, #256]	; (8004f18 <split_extract+0x130>)
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	bb83      	cbnz	r3, 8004e7c <split_extract+0x94>
        memset(dst, 0 ,30);
 8004e1a:	221e      	movs	r2, #30
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4668      	mov	r0, sp
 8004e20:	f001 fbd8 	bl	80065d4 <memset>
        bgn = end+1;
 8004e24:	1c75      	adds	r5, r6, #1
        end = strchr(bgn, ',');
 8004e26:	212c      	movs	r1, #44	; 0x2c
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f001 fbdb 	bl	80065e4 <strchr>
 8004e2e:	4606      	mov	r6, r0
    for(i = 0; i < 14; i++)
 8004e30:	3401      	adds	r4, #1
 8004e32:	2c0d      	cmp	r4, #13
 8004e34:	dc6e      	bgt.n	8004f14 <split_extract+0x12c>
        len = (int)(end - bgn);
 8004e36:	1b72      	subs	r2, r6, r5
        if(len > 0)
 8004e38:	2a00      	cmp	r2, #0
 8004e3a:	dde4      	ble.n	8004e06 <split_extract+0x1e>
            strncpy(dst, bgn, len);
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	4668      	mov	r0, sp
 8004e40:	f001 fbe6 	bl	8006610 <strncpy>
            parse[i] = true;
 8004e44:	2201      	movs	r2, #1
 8004e46:	4b34      	ldr	r3, [pc, #208]	; (8004f18 <split_extract+0x130>)
 8004e48:	551a      	strb	r2, [r3, r4]
        switch(i)
 8004e4a:	1e63      	subs	r3, r4, #1
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d8e4      	bhi.n	8004e1a <split_extract+0x32>
 8004e50:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <split_extract+0x70>)
 8004e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e56:	bf00      	nop
 8004e58:	08004e15 	.word	0x08004e15
 8004e5c:	08004e8f 	.word	0x08004e8f
 8004e60:	08004ead 	.word	0x08004ead
 8004e64:	08004ec5 	.word	0x08004ec5
 8004e68:	08004ee3 	.word	0x08004ee3
 8004e6c:	08004e1b 	.word	0x08004e1b
 8004e70:	08004e1b 	.word	0x08004e1b
 8004e74:	08004e1b 	.word	0x08004e1b
 8004e78:	08004efb 	.word	0x08004efb
					memset(tod, 0, 10);
 8004e7c:	4827      	ldr	r0, [pc, #156]	; (8004f1c <split_extract+0x134>)
 8004e7e:	2300      	movs	r3, #0
 8004e80:	6003      	str	r3, [r0, #0]
 8004e82:	6043      	str	r3, [r0, #4]
 8004e84:	8103      	strh	r3, [r0, #8]
					strcpy(tod, dst);
 8004e86:	4669      	mov	r1, sp
 8004e88:	f001 fbba 	bl	8006600 <strcpy>
 8004e8c:	e7c5      	b.n	8004e1a <split_extract+0x32>
				if(parse[2] == true)
 8004e8e:	4b22      	ldr	r3, [pc, #136]	; (8004f18 <split_extract+0x130>)
 8004e90:	789b      	ldrb	r3, [r3, #2]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0c1      	beq.n	8004e1a <split_extract+0x32>
					memset(latitude, 0, 20);
 8004e96:	4822      	ldr	r0, [pc, #136]	; (8004f20 <split_extract+0x138>)
 8004e98:	2300      	movs	r3, #0
 8004e9a:	6003      	str	r3, [r0, #0]
 8004e9c:	6043      	str	r3, [r0, #4]
 8004e9e:	6083      	str	r3, [r0, #8]
 8004ea0:	60c3      	str	r3, [r0, #12]
 8004ea2:	6103      	str	r3, [r0, #16]
					strcpy(latitude, dst);
 8004ea4:	4669      	mov	r1, sp
 8004ea6:	f001 fbab 	bl	8006600 <strcpy>
 8004eaa:	e7b6      	b.n	8004e1a <split_extract+0x32>
				if(parse[3] == true)
 8004eac:	4b1a      	ldr	r3, [pc, #104]	; (8004f18 <split_extract+0x130>)
 8004eae:	78db      	ldrb	r3, [r3, #3]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0b2      	beq.n	8004e1a <split_extract+0x32>
					memset(N_S, 0, 5);
 8004eb4:	481b      	ldr	r0, [pc, #108]	; (8004f24 <split_extract+0x13c>)
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	6003      	str	r3, [r0, #0]
 8004eba:	7103      	strb	r3, [r0, #4]
					strcpy(N_S, dst);
 8004ebc:	4669      	mov	r1, sp
 8004ebe:	f001 fb9f 	bl	8006600 <strcpy>
 8004ec2:	e7aa      	b.n	8004e1a <split_extract+0x32>
				if(parse[4] == true)
 8004ec4:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <split_extract+0x130>)
 8004ec6:	791b      	ldrb	r3, [r3, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0a6      	beq.n	8004e1a <split_extract+0x32>
					memset(longitude, 0, 20);
 8004ecc:	4816      	ldr	r0, [pc, #88]	; (8004f28 <split_extract+0x140>)
 8004ece:	2300      	movs	r3, #0
 8004ed0:	6003      	str	r3, [r0, #0]
 8004ed2:	6043      	str	r3, [r0, #4]
 8004ed4:	6083      	str	r3, [r0, #8]
 8004ed6:	60c3      	str	r3, [r0, #12]
 8004ed8:	6103      	str	r3, [r0, #16]
					strcpy(longitude, dst);
 8004eda:	4669      	mov	r1, sp
 8004edc:	f001 fb90 	bl	8006600 <strcpy>
 8004ee0:	e79b      	b.n	8004e1a <split_extract+0x32>
				if(parse[5] == true)
 8004ee2:	4b0d      	ldr	r3, [pc, #52]	; (8004f18 <split_extract+0x130>)
 8004ee4:	795b      	ldrb	r3, [r3, #5]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d097      	beq.n	8004e1a <split_extract+0x32>
					memset(E_W, 0, 5);
 8004eea:	4810      	ldr	r0, [pc, #64]	; (8004f2c <split_extract+0x144>)
 8004eec:	2300      	movs	r3, #0
 8004eee:	6003      	str	r3, [r0, #0]
 8004ef0:	7103      	strb	r3, [r0, #4]
					strcpy(E_W, dst);
 8004ef2:	4669      	mov	r1, sp
 8004ef4:	f001 fb84 	bl	8006600 <strcpy>
 8004ef8:	e78f      	b.n	8004e1a <split_extract+0x32>
				if(parse[9] == true)
 8004efa:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <split_extract+0x130>)
 8004efc:	7a5b      	ldrb	r3, [r3, #9]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d08b      	beq.n	8004e1a <split_extract+0x32>
					memset(ant_alt, 0, 10);
 8004f02:	480b      	ldr	r0, [pc, #44]	; (8004f30 <split_extract+0x148>)
 8004f04:	2300      	movs	r3, #0
 8004f06:	6003      	str	r3, [r0, #0]
 8004f08:	6043      	str	r3, [r0, #4]
 8004f0a:	8103      	strh	r3, [r0, #8]
					strcpy(ant_alt, dst);
 8004f0c:	4669      	mov	r1, sp
 8004f0e:	f001 fb77 	bl	8006600 <strcpy>
 8004f12:	e782      	b.n	8004e1a <split_extract+0x32>
}
 8004f14:	b008      	add	sp, #32
 8004f16:	bd70      	pop	{r4, r5, r6, pc}
 8004f18:	20000340 	.word	0x20000340
 8004f1c:	20000354 	.word	0x20000354
 8004f20:	200002f0 	.word	0x200002f0
 8004f24:	2000029c 	.word	0x2000029c
 8004f28:	20000304 	.word	0x20000304
 8004f2c:	20000294 	.word	0x20000294
 8004f30:	200002a4 	.word	0x200002a4

08004f34 <format_gps>:
{
 8004f34:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
	latd = atof(latitude);
 8004f38:	48ac      	ldr	r0, [pc, #688]	; (80051ec <format_gps+0x2b8>)
 8004f3a:	f001 fb1e 	bl	800657a <atof>
	latd /= 100.00;
 8004f3e:	2200      	movs	r2, #0
 8004f40:	4bab      	ldr	r3, [pc, #684]	; (80051f0 <format_gps+0x2bc>)
 8004f42:	ec51 0b10 	vmov	r0, r1, d0
 8004f46:	f7fb fc29 	bl	800079c <__aeabi_ddiv>
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	460d      	mov	r5, r1
	work = floor(latd);
 8004f4e:	ec45 4b10 	vmov	d0, r4, r5
 8004f52:	f003 fa09 	bl	8008368 <floor>
 8004f56:	ec51 0b10 	vmov	r0, r1, d0
 8004f5a:	f7fb fda5 	bl	8000aa8 <__aeabi_d2iz>
	latd_min = latd - work;
 8004f5e:	f7fb fa8d 	bl	800047c <__aeabi_i2d>
 8004f62:	4606      	mov	r6, r0
 8004f64:	460f      	mov	r7, r1
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	f7fb f937 	bl	80001e0 <__aeabi_dsub>
	latd_min = latd_min*100.0/60.0;
 8004f72:	2200      	movs	r2, #0
 8004f74:	4b9e      	ldr	r3, [pc, #632]	; (80051f0 <format_gps+0x2bc>)
 8004f76:	f7fb fae7 	bl	8000548 <__aeabi_dmul>
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	4b9d      	ldr	r3, [pc, #628]	; (80051f4 <format_gps+0x2c0>)
 8004f7e:	f7fb fc0d 	bl	800079c <__aeabi_ddiv>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	499c      	ldr	r1, [pc, #624]	; (80051f8 <format_gps+0x2c4>)
 8004f88:	e9c1 2300 	strd	r2, r3, [r1]
	latd = work + latd_min;
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	4639      	mov	r1, r7
 8004f90:	f7fb f928 	bl	80001e4 <__adddf3>
 8004f94:	4682      	mov	sl, r0
 8004f96:	468b      	mov	fp, r1
 8004f98:	4b98      	ldr	r3, [pc, #608]	; (80051fc <format_gps+0x2c8>)
 8004f9a:	e9c3 ab00 	strd	sl, fp, [r3]
	comm[55] = '.';
 8004f9e:	222e      	movs	r2, #46	; 0x2e
 8004fa0:	4b97      	ldr	r3, [pc, #604]	; (8005200 <format_gps+0x2cc>)
 8004fa2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	for(int q = 0; q <= 5; q++)
 8004fa6:	2400      	movs	r4, #0
 8004fa8:	e01c      	b.n	8004fe4 <format_gps+0xb0>
		latd_min *= 10;
 8004faa:	4d93      	ldr	r5, [pc, #588]	; (80051f8 <format_gps+0x2c4>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	4b95      	ldr	r3, [pc, #596]	; (8005204 <format_gps+0x2d0>)
 8004fb0:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004fb4:	f7fb fac8 	bl	8000548 <__aeabi_dmul>
 8004fb8:	4606      	mov	r6, r0
 8004fba:	460f      	mov	r7, r1
		comm[56+q] = (int)(latd_min)+48;
 8004fbc:	f104 0838 	add.w	r8, r4, #56	; 0x38
 8004fc0:	f7fb fd72 	bl	8000aa8 <__aeabi_d2iz>
 8004fc4:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8004fc8:	4b8d      	ldr	r3, [pc, #564]	; (8005200 <format_gps+0x2cc>)
 8004fca:	f803 2008 	strb.w	r2, [r3, r8]
		latd_min -= (int)(latd_min);
 8004fce:	f7fb fa55 	bl	800047c <__aeabi_i2d>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	4639      	mov	r1, r7
 8004fda:	f7fb f901 	bl	80001e0 <__aeabi_dsub>
 8004fde:	e9c5 0100 	strd	r0, r1, [r5]
	for(int q = 0; q <= 5; q++)
 8004fe2:	3401      	adds	r4, #1
 8004fe4:	2c05      	cmp	r4, #5
 8004fe6:	dde0      	ble.n	8004faa <format_gps+0x76>
	if(latd < 10)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	4b86      	ldr	r3, [pc, #536]	; (8005204 <format_gps+0x2d0>)
 8004fec:	4650      	mov	r0, sl
 8004fee:	4659      	mov	r1, fp
 8004ff0:	f7fb fd1c 	bl	8000a2c <__aeabi_dcmplt>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d04b      	beq.n	8005090 <format_gps+0x15c>
		comm[52] = ' ';
 8004ff8:	4b81      	ldr	r3, [pc, #516]	; (8005200 <format_gps+0x2cc>)
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		comm[53] = ' ';
 8005000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		comm[54] = latitude[1];
 8005004:	4a79      	ldr	r2, [pc, #484]	; (80051ec <format_gps+0x2b8>)
 8005006:	7852      	ldrb	r2, [r2, #1]
 8005008:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		if(N_S[0] == 'S')
 800500c:	4b7e      	ldr	r3, [pc, #504]	; (8005208 <format_gps+0x2d4>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b53      	cmp	r3, #83	; 0x53
 8005012:	d038      	beq.n	8005086 <format_gps+0x152>
	lontd = atof(longitude);
 8005014:	487d      	ldr	r0, [pc, #500]	; (800520c <format_gps+0x2d8>)
 8005016:	f001 fab0 	bl	800657a <atof>
	lontd /= 100.00;
 800501a:	2200      	movs	r2, #0
 800501c:	4b74      	ldr	r3, [pc, #464]	; (80051f0 <format_gps+0x2bc>)
 800501e:	ec51 0b10 	vmov	r0, r1, d0
 8005022:	f7fb fbbb 	bl	800079c <__aeabi_ddiv>
 8005026:	4604      	mov	r4, r0
 8005028:	460d      	mov	r5, r1
	work = floor(lontd);
 800502a:	ec45 4b10 	vmov	d0, r4, r5
 800502e:	f003 f99b 	bl	8008368 <floor>
 8005032:	ec51 0b10 	vmov	r0, r1, d0
 8005036:	f7fb fd37 	bl	8000aa8 <__aeabi_d2iz>
	lontd_min = lontd - work;
 800503a:	f7fb fa1f 	bl	800047c <__aeabi_i2d>
 800503e:	4606      	mov	r6, r0
 8005040:	460f      	mov	r7, r1
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4620      	mov	r0, r4
 8005048:	4629      	mov	r1, r5
 800504a:	f7fb f8c9 	bl	80001e0 <__aeabi_dsub>
	lontd_min = lontd_min*100.0/60.0;
 800504e:	2200      	movs	r2, #0
 8005050:	4b67      	ldr	r3, [pc, #412]	; (80051f0 <format_gps+0x2bc>)
 8005052:	f7fb fa79 	bl	8000548 <__aeabi_dmul>
 8005056:	2200      	movs	r2, #0
 8005058:	4b66      	ldr	r3, [pc, #408]	; (80051f4 <format_gps+0x2c0>)
 800505a:	f7fb fb9f 	bl	800079c <__aeabi_ddiv>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	496b      	ldr	r1, [pc, #428]	; (8005210 <format_gps+0x2dc>)
 8005064:	e9c1 2300 	strd	r2, r3, [r1]
	lontd = work + lontd_min;
 8005068:	4630      	mov	r0, r6
 800506a:	4639      	mov	r1, r7
 800506c:	f7fb f8ba 	bl	80001e4 <__adddf3>
 8005070:	4682      	mov	sl, r0
 8005072:	468b      	mov	fp, r1
 8005074:	4b67      	ldr	r3, [pc, #412]	; (8005214 <format_gps+0x2e0>)
 8005076:	e9c3 ab00 	strd	sl, fp, [r3]
	comm[67] = '.';
 800507a:	222e      	movs	r2, #46	; 0x2e
 800507c:	4b60      	ldr	r3, [pc, #384]	; (8005200 <format_gps+0x2cc>)
 800507e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	for(int p = 0; p <= 5; p++)
 8005082:	2400      	movs	r4, #0
 8005084:	e035      	b.n	80050f2 <format_gps+0x1be>
			comm[53] = '-';
 8005086:	222d      	movs	r2, #45	; 0x2d
 8005088:	4b5d      	ldr	r3, [pc, #372]	; (8005200 <format_gps+0x2cc>)
 800508a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800508e:	e7c1      	b.n	8005014 <format_gps+0xe0>
		comm[52] = ' ';
 8005090:	4b5b      	ldr	r3, [pc, #364]	; (8005200 <format_gps+0x2cc>)
 8005092:	2220      	movs	r2, #32
 8005094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		comm[53] = latitude[0];
 8005098:	4a54      	ldr	r2, [pc, #336]	; (80051ec <format_gps+0x2b8>)
 800509a:	7811      	ldrb	r1, [r2, #0]
 800509c:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
		comm[54] = latitude[1];
 80050a0:	7852      	ldrb	r2, [r2, #1]
 80050a2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		if(N_S[0] == 'S')
 80050a6:	4b58      	ldr	r3, [pc, #352]	; (8005208 <format_gps+0x2d4>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b53      	cmp	r3, #83	; 0x53
 80050ac:	d1b2      	bne.n	8005014 <format_gps+0xe0>
			comm[52] = '-';
 80050ae:	222d      	movs	r2, #45	; 0x2d
 80050b0:	4b53      	ldr	r3, [pc, #332]	; (8005200 <format_gps+0x2cc>)
 80050b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80050b6:	e7ad      	b.n	8005014 <format_gps+0xe0>
		lontd_min *= 10;
 80050b8:	4d55      	ldr	r5, [pc, #340]	; (8005210 <format_gps+0x2dc>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	4b51      	ldr	r3, [pc, #324]	; (8005204 <format_gps+0x2d0>)
 80050be:	e9d5 0100 	ldrd	r0, r1, [r5]
 80050c2:	f7fb fa41 	bl	8000548 <__aeabi_dmul>
 80050c6:	4606      	mov	r6, r0
 80050c8:	460f      	mov	r7, r1
		comm[68+p] = (int)(lontd_min)+48;
 80050ca:	f104 0844 	add.w	r8, r4, #68	; 0x44
 80050ce:	f7fb fceb 	bl	8000aa8 <__aeabi_d2iz>
 80050d2:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80050d6:	4b4a      	ldr	r3, [pc, #296]	; (8005200 <format_gps+0x2cc>)
 80050d8:	f803 2008 	strb.w	r2, [r3, r8]
		lontd_min -= (int)(lontd_min);
 80050dc:	f7fb f9ce 	bl	800047c <__aeabi_i2d>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4630      	mov	r0, r6
 80050e6:	4639      	mov	r1, r7
 80050e8:	f7fb f87a 	bl	80001e0 <__aeabi_dsub>
 80050ec:	e9c5 0100 	strd	r0, r1, [r5]
	for(int p = 0; p <= 5; p++)
 80050f0:	3401      	adds	r4, #1
 80050f2:	2c05      	cmp	r4, #5
 80050f4:	dde0      	ble.n	80050b8 <format_gps+0x184>
	if(lontd < 10)
 80050f6:	2200      	movs	r2, #0
 80050f8:	4b42      	ldr	r3, [pc, #264]	; (8005204 <format_gps+0x2d0>)
 80050fa:	4650      	mov	r0, sl
 80050fc:	4659      	mov	r1, fp
 80050fe:	f7fb fc95 	bl	8000a2c <__aeabi_dcmplt>
 8005102:	b360      	cbz	r0, 800515e <format_gps+0x22a>
		comm[63] = ' ';
 8005104:	4b3e      	ldr	r3, [pc, #248]	; (8005200 <format_gps+0x2cc>)
 8005106:	2220      	movs	r2, #32
 8005108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		comm[64] = ' ';
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		comm[65] = ' ';
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		comm[66] = longitude[2];
 8005114:	4a3d      	ldr	r2, [pc, #244]	; (800520c <format_gps+0x2d8>)
 8005116:	7892      	ldrb	r2, [r2, #2]
 8005118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		if(E_W[0] == 'W')
 800511c:	4b3e      	ldr	r3, [pc, #248]	; (8005218 <format_gps+0x2e4>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b57      	cmp	r3, #87	; 0x57
 8005122:	d017      	beq.n	8005154 <format_gps+0x220>
	if(strlen(tod) >= 6)
 8005124:	483d      	ldr	r0, [pc, #244]	; (800521c <format_gps+0x2e8>)
 8005126:	f7fb f84f 	bl	80001c8 <strlen>
 800512a:	2805      	cmp	r0, #5
 800512c:	d910      	bls.n	8005150 <format_gps+0x21c>
		comm[16] = tod[0];
 800512e:	4a3b      	ldr	r2, [pc, #236]	; (800521c <format_gps+0x2e8>)
 8005130:	7811      	ldrb	r1, [r2, #0]
 8005132:	4b33      	ldr	r3, [pc, #204]	; (8005200 <format_gps+0x2cc>)
 8005134:	7419      	strb	r1, [r3, #16]
		comm[17] = tod[1];
 8005136:	7851      	ldrb	r1, [r2, #1]
 8005138:	7459      	strb	r1, [r3, #17]
		comm[18] = ':';
 800513a:	213a      	movs	r1, #58	; 0x3a
 800513c:	7499      	strb	r1, [r3, #18]
		comm[19] = tod[2];
 800513e:	7890      	ldrb	r0, [r2, #2]
 8005140:	74d8      	strb	r0, [r3, #19]
		comm[20] = tod[3];
 8005142:	78d0      	ldrb	r0, [r2, #3]
 8005144:	7518      	strb	r0, [r3, #20]
		comm[21] =':';
 8005146:	7559      	strb	r1, [r3, #21]
		comm[22] = tod[4];
 8005148:	7911      	ldrb	r1, [r2, #4]
 800514a:	7599      	strb	r1, [r3, #22]
		comm[23] = tod[5];
 800514c:	7952      	ldrb	r2, [r2, #5]
 800514e:	75da      	strb	r2, [r3, #23]
	for(int p = 0; p <= 5; p++)
 8005150:	2300      	movs	r3, #0
 8005152:	e046      	b.n	80051e2 <format_gps+0x2ae>
			comm[65] = '-';
 8005154:	222d      	movs	r2, #45	; 0x2d
 8005156:	4b2a      	ldr	r3, [pc, #168]	; (8005200 <format_gps+0x2cc>)
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800515c:	e7e2      	b.n	8005124 <format_gps+0x1f0>
		if((lontd >= 10) && (lontd < 100))
 800515e:	2200      	movs	r2, #0
 8005160:	4b28      	ldr	r3, [pc, #160]	; (8005204 <format_gps+0x2d0>)
 8005162:	4650      	mov	r0, sl
 8005164:	4659      	mov	r1, fp
 8005166:	f7fb fc75 	bl	8000a54 <__aeabi_dcmpge>
 800516a:	b1e0      	cbz	r0, 80051a6 <format_gps+0x272>
 800516c:	2200      	movs	r2, #0
 800516e:	4b20      	ldr	r3, [pc, #128]	; (80051f0 <format_gps+0x2bc>)
 8005170:	4650      	mov	r0, sl
 8005172:	4659      	mov	r1, fp
 8005174:	f7fb fc5a 	bl	8000a2c <__aeabi_dcmplt>
 8005178:	b1a8      	cbz	r0, 80051a6 <format_gps+0x272>
			comm[63] = ' ';
 800517a:	4b21      	ldr	r3, [pc, #132]	; (8005200 <format_gps+0x2cc>)
 800517c:	2220      	movs	r2, #32
 800517e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
			comm[64] = ' ';
 8005182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			comm[65] = longitude[1];
 8005186:	4a21      	ldr	r2, [pc, #132]	; (800520c <format_gps+0x2d8>)
 8005188:	7851      	ldrb	r1, [r2, #1]
 800518a:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
			comm[66] = longitude[2];
 800518e:	7892      	ldrb	r2, [r2, #2]
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			if(E_W[0] == 'W')
 8005194:	4b20      	ldr	r3, [pc, #128]	; (8005218 <format_gps+0x2e4>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b57      	cmp	r3, #87	; 0x57
 800519a:	d1c3      	bne.n	8005124 <format_gps+0x1f0>
				comm[64] = '-';
 800519c:	222d      	movs	r2, #45	; 0x2d
 800519e:	4b18      	ldr	r3, [pc, #96]	; (8005200 <format_gps+0x2cc>)
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a4:	e7be      	b.n	8005124 <format_gps+0x1f0>
			comm[63] = ' ';
 80051a6:	4b16      	ldr	r3, [pc, #88]	; (8005200 <format_gps+0x2cc>)
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
			comm[64] = longitude[0];
 80051ae:	4a17      	ldr	r2, [pc, #92]	; (800520c <format_gps+0x2d8>)
 80051b0:	7811      	ldrb	r1, [r2, #0]
 80051b2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
			comm[65] = longitude[1];
 80051b6:	7851      	ldrb	r1, [r2, #1]
 80051b8:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
			comm[66] = longitude[2];
 80051bc:	7892      	ldrb	r2, [r2, #2]
 80051be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			if(E_W[0] == 'W')
 80051c2:	4b15      	ldr	r3, [pc, #84]	; (8005218 <format_gps+0x2e4>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b57      	cmp	r3, #87	; 0x57
 80051c8:	d1ac      	bne.n	8005124 <format_gps+0x1f0>
				comm[63] = '-';
 80051ca:	222d      	movs	r2, #45	; 0x2d
 80051cc:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <format_gps+0x2cc>)
 80051ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d2:	e7a7      	b.n	8005124 <format_gps+0x1f0>
		comm[75+k] = ant_alt[k];
 80051d4:	f103 024b 	add.w	r2, r3, #75	; 0x4b
 80051d8:	4911      	ldr	r1, [pc, #68]	; (8005220 <format_gps+0x2ec>)
 80051da:	5cc8      	ldrb	r0, [r1, r3]
 80051dc:	4908      	ldr	r1, [pc, #32]	; (8005200 <format_gps+0x2cc>)
 80051de:	5488      	strb	r0, [r1, r2]
	for(int k = 0; k < 7; k++)
 80051e0:	3301      	adds	r3, #1
 80051e2:	2b06      	cmp	r3, #6
 80051e4:	ddf6      	ble.n	80051d4 <format_gps+0x2a0>
}
 80051e6:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80051ea:	bf00      	nop
 80051ec:	200002f0 	.word	0x200002f0
 80051f0:	40590000 	.word	0x40590000
 80051f4:	404e0000 	.word	0x404e0000
 80051f8:	200002e8 	.word	0x200002e8
 80051fc:	200002e0 	.word	0x200002e0
 8005200:	20000010 	.word	0x20000010
 8005204:	40240000 	.word	0x40240000
 8005208:	2000029c 	.word	0x2000029c
 800520c:	20000304 	.word	0x20000304
 8005210:	20000320 	.word	0x20000320
 8005214:	20000318 	.word	0x20000318
 8005218:	20000294 	.word	0x20000294
 800521c:	20000354 	.word	0x20000354
 8005220:	200002a4 	.word	0x200002a4

08005224 <process_buffer>:
	if(rx_flag == true)
 8005224:	4b17      	ldr	r3, [pc, #92]	; (8005284 <process_buffer+0x60>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	b903      	cbnz	r3, 800522c <process_buffer+0x8>
 800522a:	4770      	bx	lr
{
 800522c:	b510      	push	{r4, lr}
		rx_flag = false;
 800522e:	2100      	movs	r1, #0
 8005230:	4b14      	ldr	r3, [pc, #80]	; (8005284 <process_buffer+0x60>)
 8005232:	7019      	strb	r1, [r3, #0]
		rx_index = 0;
 8005234:	4b14      	ldr	r3, [pc, #80]	; (8005288 <process_buffer+0x64>)
 8005236:	7019      	strb	r1, [r3, #0]
		memset(gps_msg, 0, 100);
 8005238:	4c14      	ldr	r4, [pc, #80]	; (800528c <process_buffer+0x68>)
 800523a:	2264      	movs	r2, #100	; 0x64
 800523c:	4620      	mov	r0, r4
 800523e:	f001 f9c9 	bl	80065d4 <memset>
		strncpy((char*)gps_msg, (char*)rx_buffer, end+1);
 8005242:	4b13      	ldr	r3, [pc, #76]	; (8005290 <process_buffer+0x6c>)
 8005244:	781a      	ldrb	r2, [r3, #0]
 8005246:	3201      	adds	r2, #1
 8005248:	4912      	ldr	r1, [pc, #72]	; (8005294 <process_buffer+0x70>)
 800524a:	4620      	mov	r0, r4
 800524c:	f001 f9e0 	bl	8006610 <strncpy>
		gga = check_gga((char*)gps_msg);
 8005250:	4620      	mov	r0, r4
 8005252:	f7ff fd51 	bl	8004cf8 <check_gga>
 8005256:	4b10      	ldr	r3, [pc, #64]	; (8005298 <process_buffer+0x74>)
 8005258:	7018      	strb	r0, [r3, #0]
		if(gga == true)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	b903      	cbnz	r3, 8005260 <process_buffer+0x3c>
 800525e:	bd10      	pop	{r4, pc}
			valid = is_valid((char*)gps_msg, end+1);
 8005260:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <process_buffer+0x6c>)
 8005262:	7819      	ldrb	r1, [r3, #0]
 8005264:	3101      	adds	r1, #1
 8005266:	4620      	mov	r0, r4
 8005268:	f7ff fd96 	bl	8004d98 <is_valid>
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <process_buffer+0x78>)
 800526e:	7018      	strb	r0, [r3, #0]
			if(valid == true)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f3      	beq.n	800525e <process_buffer+0x3a>
				split_extract((char*)gps_msg);
 8005276:	4620      	mov	r0, r4
 8005278:	f7ff fdb6 	bl	8004de8 <split_extract>
				format_gps();
 800527c:	f7ff fe5a 	bl	8004f34 <format_gps>
}
 8005280:	e7ed      	b.n	800525e <process_buffer+0x3a>
 8005282:	bf00      	nop
 8005284:	2000034e 	.word	0x2000034e
 8005288:	2000034f 	.word	0x2000034f
 800528c:	200005e0 	.word	0x200005e0
 8005290:	200002da 	.word	0x200002da
 8005294:	20000574 	.word	0x20000574
 8005298:	200002db 	.word	0x200002db
 800529c:	20000368 	.word	0x20000368

080052a0 <format_count>:
	if(abs(count) < 10){
 80052a0:	4b51      	ldr	r3, [pc, #324]	; (80053e8 <format_count+0x148>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f103 0209 	add.w	r2, r3, #9
 80052a8:	2a12      	cmp	r2, #18
 80052aa:	d951      	bls.n	8005350 <format_count+0xb0>
		} else if(abs(count) < 100){
 80052ac:	f103 0263 	add.w	r2, r3, #99	; 0x63
 80052b0:	2ac6      	cmp	r2, #198	; 0xc6
 80052b2:	d958      	bls.n	8005366 <format_count+0xc6>
{
 80052b4:	b470      	push	{r4, r5, r6}
		} else if(abs(count) < 1000){
 80052b6:	f203 31e7 	addw	r1, r3, #999	; 0x3e7
 80052ba:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80052be:	4291      	cmp	r1, r2
 80052c0:	d96a      	bls.n	8005398 <format_count+0xf8>
		} else if(abs(count) < 10000){
 80052c2:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 80052c6:	320f      	adds	r2, #15
 80052c8:	f644 611e 	movw	r1, #19998	; 0x4e1e
 80052cc:	428a      	cmp	r2, r1
 80052ce:	f200 8088 	bhi.w	80053e2 <format_count+0x142>
			comm[14] = (abs(count)/1)%10 + '0';
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bfb8      	it	lt
 80052d6:	425b      	neglt	r3, r3
 80052d8:	4d44      	ldr	r5, [pc, #272]	; (80053ec <format_count+0x14c>)
 80052da:	fb85 1203 	smull	r1, r2, r5, r3
 80052de:	17d8      	asrs	r0, r3, #31
 80052e0:	ebc0 02a2 	rsb	r2, r0, r2, asr #2
 80052e4:	4616      	mov	r6, r2
 80052e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80052ea:	0051      	lsls	r1, r2, #1
 80052ec:	1a5a      	subs	r2, r3, r1
 80052ee:	3230      	adds	r2, #48	; 0x30
 80052f0:	4c3f      	ldr	r4, [pc, #252]	; (80053f0 <format_count+0x150>)
 80052f2:	73a2      	strb	r2, [r4, #14]
			comm[13] = (abs(count)/10)%10 + '0';
 80052f4:	fb85 1206 	smull	r1, r2, r5, r6
 80052f8:	17f1      	asrs	r1, r6, #31
 80052fa:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
 80052fe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005302:	004a      	lsls	r2, r1, #1
 8005304:	1ab1      	subs	r1, r6, r2
 8005306:	3130      	adds	r1, #48	; 0x30
 8005308:	7361      	strb	r1, [r4, #13]
			comm[12] = (abs(count)/100)%10 + '0';
 800530a:	4a3a      	ldr	r2, [pc, #232]	; (80053f4 <format_count+0x154>)
 800530c:	fb82 1203 	smull	r1, r2, r2, r3
 8005310:	ebc0 1262 	rsb	r2, r0, r2, asr #5
 8005314:	fb85 1602 	smull	r1, r6, r5, r2
 8005318:	17d1      	asrs	r1, r2, #31
 800531a:	ebc1 01a6 	rsb	r1, r1, r6, asr #2
 800531e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005322:	004e      	lsls	r6, r1, #1
 8005324:	1b91      	subs	r1, r2, r6
 8005326:	3130      	adds	r1, #48	; 0x30
 8005328:	7321      	strb	r1, [r4, #12]
			comm[11] = (abs(count)/1000)%10 + '0';
 800532a:	4a33      	ldr	r2, [pc, #204]	; (80053f8 <format_count+0x158>)
 800532c:	fb82 2303 	smull	r2, r3, r2, r3
 8005330:	ebc0 10a3 	rsb	r0, r0, r3, asr #6
 8005334:	fb85 3500 	smull	r3, r5, r5, r0
 8005338:	17c2      	asrs	r2, r0, #31
 800533a:	ebc2 02a5 	rsb	r2, r2, r5, asr #2
 800533e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005342:	0053      	lsls	r3, r2, #1
 8005344:	1ac2      	subs	r2, r0, r3
 8005346:	3230      	adds	r2, #48	; 0x30
 8005348:	72e2      	strb	r2, [r4, #11]
			comm[10] = ' ';
 800534a:	2320      	movs	r3, #32
 800534c:	72a3      	strb	r3, [r4, #10]
}
 800534e:	e048      	b.n	80053e2 <format_count+0x142>
			comm[14] = abs(count) + '0';
 8005350:	2b00      	cmp	r3, #0
 8005352:	bfb8      	it	lt
 8005354:	425b      	neglt	r3, r3
 8005356:	3330      	adds	r3, #48	; 0x30
 8005358:	4a25      	ldr	r2, [pc, #148]	; (80053f0 <format_count+0x150>)
 800535a:	7393      	strb	r3, [r2, #14]
			comm[12] = ' ';
 800535c:	2320      	movs	r3, #32
 800535e:	7313      	strb	r3, [r2, #12]
			comm[11] = ' ';
 8005360:	72d3      	strb	r3, [r2, #11]
			comm[10] = ' ';
 8005362:	7293      	strb	r3, [r2, #10]
 8005364:	4770      	bx	lr
			comm[14] = abs(count)%10 + '0';
 8005366:	2b00      	cmp	r3, #0
 8005368:	bfb8      	it	lt
 800536a:	425b      	neglt	r3, r3
 800536c:	491f      	ldr	r1, [pc, #124]	; (80053ec <format_count+0x14c>)
 800536e:	fb81 2103 	smull	r2, r1, r1, r3
 8005372:	17da      	asrs	r2, r3, #31
 8005374:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8005378:	4611      	mov	r1, r2
 800537a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800537e:	0050      	lsls	r0, r2, #1
 8005380:	1a1a      	subs	r2, r3, r0
 8005382:	3230      	adds	r2, #48	; 0x30
 8005384:	4b1a      	ldr	r3, [pc, #104]	; (80053f0 <format_count+0x150>)
 8005386:	739a      	strb	r2, [r3, #14]
			comm[13] = abs(count)/10 + '0';
 8005388:	f101 0230 	add.w	r2, r1, #48	; 0x30
 800538c:	735a      	strb	r2, [r3, #13]
			comm[12] = ' ';
 800538e:	2220      	movs	r2, #32
 8005390:	731a      	strb	r2, [r3, #12]
			comm[11] = ' ';
 8005392:	72da      	strb	r2, [r3, #11]
			comm[10] = ' ';
 8005394:	729a      	strb	r2, [r3, #10]
 8005396:	4770      	bx	lr
			comm[14] = abs(count)%10 + '0';
 8005398:	2b00      	cmp	r3, #0
 800539a:	bfb8      	it	lt
 800539c:	425b      	neglt	r3, r3
 800539e:	4c13      	ldr	r4, [pc, #76]	; (80053ec <format_count+0x14c>)
 80053a0:	fb84 1203 	smull	r1, r2, r4, r3
 80053a4:	17d9      	asrs	r1, r3, #31
 80053a6:	ebc1 02a2 	rsb	r2, r1, r2, asr #2
 80053aa:	4615      	mov	r5, r2
 80053ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80053b0:	0050      	lsls	r0, r2, #1
 80053b2:	1a1a      	subs	r2, r3, r0
 80053b4:	3230      	adds	r2, #48	; 0x30
 80053b6:	480e      	ldr	r0, [pc, #56]	; (80053f0 <format_count+0x150>)
 80053b8:	7382      	strb	r2, [r0, #14]
			comm[13] = (abs(count)/10)%10 + '0';
 80053ba:	fb84 2405 	smull	r2, r4, r4, r5
 80053be:	17ea      	asrs	r2, r5, #31
 80053c0:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 80053c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80053c8:	0054      	lsls	r4, r2, #1
 80053ca:	1b2a      	subs	r2, r5, r4
 80053cc:	3230      	adds	r2, #48	; 0x30
 80053ce:	7342      	strb	r2, [r0, #13]
			comm[12] = abs(count)/100 + '0';
 80053d0:	4a08      	ldr	r2, [pc, #32]	; (80053f4 <format_count+0x154>)
 80053d2:	fb82 2303 	smull	r2, r3, r2, r3
 80053d6:	ebc1 1363 	rsb	r3, r1, r3, asr #5
 80053da:	3330      	adds	r3, #48	; 0x30
 80053dc:	7303      	strb	r3, [r0, #12]
			comm[10] = ' ';
 80053de:	2320      	movs	r3, #32
 80053e0:	7283      	strb	r3, [r0, #10]
}
 80053e2:	bc70      	pop	{r4, r5, r6}
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	200002c4 	.word	0x200002c4
 80053ec:	66666667 	.word	0x66666667
 80053f0:	20000010 	.word	0x20000010
 80053f4:	51eb851f 	.word	0x51eb851f
 80053f8:	10624dd3 	.word	0x10624dd3

080053fc <format_power>:
{
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	comm[88] = '.';
 80053fe:	222e      	movs	r2, #46	; 0x2e
 8005400:	4b50      	ldr	r3, [pc, #320]	; (8005544 <format_power+0x148>)
 8005402:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	int dec = round((volt - (int)(volt))*10);
 8005406:	4b50      	ldr	r3, [pc, #320]	; (8005548 <format_power+0x14c>)
 8005408:	e9d3 4500 	ldrd	r4, r5, [r3]
 800540c:	4620      	mov	r0, r4
 800540e:	4629      	mov	r1, r5
 8005410:	f7fb fb4a 	bl	8000aa8 <__aeabi_d2iz>
 8005414:	4606      	mov	r6, r0
 8005416:	f7fb f831 	bl	800047c <__aeabi_i2d>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	f7fa fedd 	bl	80001e0 <__aeabi_dsub>
 8005426:	2200      	movs	r2, #0
 8005428:	4b48      	ldr	r3, [pc, #288]	; (800554c <format_power+0x150>)
 800542a:	f7fb f88d 	bl	8000548 <__aeabi_dmul>
 800542e:	ec41 0b10 	vmov	d0, r0, r1
 8005432:	f003 f81d 	bl	8008470 <round>
 8005436:	ec51 0b10 	vmov	r0, r1, d0
 800543a:	f7fb fb35 	bl	8000aa8 <__aeabi_d2iz>
	if(dec >= 10)
 800543e:	2809      	cmp	r0, #9
 8005440:	dd4a      	ble.n	80054d8 <format_power+0xdc>
		comm[87] = (int)(volt+1) + 48;
 8005442:	2200      	movs	r2, #0
 8005444:	4b42      	ldr	r3, [pc, #264]	; (8005550 <format_power+0x154>)
 8005446:	4620      	mov	r0, r4
 8005448:	4629      	mov	r1, r5
 800544a:	f7fa fecb 	bl	80001e4 <__adddf3>
 800544e:	f7fb fb2b 	bl	8000aa8 <__aeabi_d2iz>
 8005452:	3030      	adds	r0, #48	; 0x30
 8005454:	4b3b      	ldr	r3, [pc, #236]	; (8005544 <format_power+0x148>)
 8005456:	f883 0057 	strb.w	r0, [r3, #87]	; 0x57
		comm[89] = '0';
 800545a:	2230      	movs	r2, #48	; 0x30
 800545c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	current = (int)(avg_curr*1000);
 8005460:	2200      	movs	r2, #0
 8005462:	4b3c      	ldr	r3, [pc, #240]	; (8005554 <format_power+0x158>)
 8005464:	493c      	ldr	r1, [pc, #240]	; (8005558 <format_power+0x15c>)
 8005466:	e9d1 0100 	ldrd	r0, r1, [r1]
 800546a:	f7fb f86d 	bl	8000548 <__aeabi_dmul>
 800546e:	f7fb fb1b 	bl	8000aa8 <__aeabi_d2iz>
 8005472:	4604      	mov	r4, r0
 8005474:	4b39      	ldr	r3, [pc, #228]	; (800555c <format_power+0x160>)
 8005476:	6018      	str	r0, [r3, #0]
	if(current < 10)
 8005478:	2809      	cmp	r0, #9
 800547a:	dd35      	ble.n	80054e8 <format_power+0xec>
	else if((current > 10) && (current < 100))
 800547c:	f1a0 030b 	sub.w	r3, r0, #11
 8005480:	2b58      	cmp	r3, #88	; 0x58
 8005482:	d93b      	bls.n	80054fc <format_power+0x100>
		comm[83] = (int)(current/100.0) + 48;
 8005484:	f7fa fffa 	bl	800047c <__aeabi_i2d>
 8005488:	2200      	movs	r2, #0
 800548a:	4b35      	ldr	r3, [pc, #212]	; (8005560 <format_power+0x164>)
 800548c:	f7fb f986 	bl	800079c <__aeabi_ddiv>
 8005490:	f7fb fb0a 	bl	8000aa8 <__aeabi_d2iz>
 8005494:	3030      	adds	r0, #48	; 0x30
 8005496:	4d2b      	ldr	r5, [pc, #172]	; (8005544 <format_power+0x148>)
 8005498:	f885 0053 	strb.w	r0, [r5, #83]	; 0x53
		comm[84] = (int)(((int)current%100)/10) + 48;
 800549c:	4b31      	ldr	r3, [pc, #196]	; (8005564 <format_power+0x168>)
 800549e:	fb83 2304 	smull	r2, r3, r3, r4
 80054a2:	17e2      	asrs	r2, r4, #31
 80054a4:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 80054a8:	2164      	movs	r1, #100	; 0x64
 80054aa:	fb01 4313 	mls	r3, r1, r3, r4
 80054ae:	492e      	ldr	r1, [pc, #184]	; (8005568 <format_power+0x16c>)
 80054b0:	fb81 6003 	smull	r6, r0, r1, r3
 80054b4:	17db      	asrs	r3, r3, #31
 80054b6:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 80054ba:	3330      	adds	r3, #48	; 0x30
 80054bc:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
		comm[85] =(int)((int)current%10) + 48;
 80054c0:	fb81 1304 	smull	r1, r3, r1, r4
 80054c4:	ebc2 03a3 	rsb	r3, r2, r3, asr #2
 80054c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80054cc:	005a      	lsls	r2, r3, #1
 80054ce:	1aa3      	subs	r3, r4, r2
 80054d0:	3330      	adds	r3, #48	; 0x30
 80054d2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80054d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		comm[87] = (int)(volt) + 48;
 80054d8:	3630      	adds	r6, #48	; 0x30
 80054da:	4b1a      	ldr	r3, [pc, #104]	; (8005544 <format_power+0x148>)
 80054dc:	f883 6057 	strb.w	r6, [r3, #87]	; 0x57
		comm[89] = dec + 48;
 80054e0:	3030      	adds	r0, #48	; 0x30
 80054e2:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
 80054e6:	e7bb      	b.n	8005460 <format_power+0x64>
		comm[83] = ' ';
 80054e8:	4b16      	ldr	r3, [pc, #88]	; (8005544 <format_power+0x148>)
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
		comm[84] = ' ';
 80054f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		comm[85] = (int) current + 48;
 80054f4:	3430      	adds	r4, #48	; 0x30
 80054f6:	f883 4055 	strb.w	r4, [r3, #85]	; 0x55
 80054fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		comm[83] = ' ';
 80054fc:	4d11      	ldr	r5, [pc, #68]	; (8005544 <format_power+0x148>)
 80054fe:	2320      	movs	r3, #32
 8005500:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
		comm[84] = (int)(current/10.0) + 48;
 8005504:	f7fa ffba 	bl	800047c <__aeabi_i2d>
 8005508:	2200      	movs	r2, #0
 800550a:	4b10      	ldr	r3, [pc, #64]	; (800554c <format_power+0x150>)
 800550c:	f7fb f946 	bl	800079c <__aeabi_ddiv>
 8005510:	4606      	mov	r6, r0
 8005512:	460f      	mov	r7, r1
 8005514:	f7fb fac8 	bl	8000aa8 <__aeabi_d2iz>
 8005518:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800551c:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
		comm[85] = (int)((current/10.0 - (int)(current/10.0))*10) + 48;
 8005520:	f7fa ffac 	bl	800047c <__aeabi_i2d>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4630      	mov	r0, r6
 800552a:	4639      	mov	r1, r7
 800552c:	f7fa fe58 	bl	80001e0 <__aeabi_dsub>
 8005530:	2200      	movs	r2, #0
 8005532:	4b06      	ldr	r3, [pc, #24]	; (800554c <format_power+0x150>)
 8005534:	f7fb f808 	bl	8000548 <__aeabi_dmul>
 8005538:	f7fb fab6 	bl	8000aa8 <__aeabi_d2iz>
 800553c:	3030      	adds	r0, #48	; 0x30
 800553e:	f885 0055 	strb.w	r0, [r5, #85]	; 0x55
 8005542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005544:	20000010 	.word	0x20000010
 8005548:	20000370 	.word	0x20000370
 800554c:	40240000 	.word	0x40240000
 8005550:	3ff00000 	.word	0x3ff00000
 8005554:	408f4000 	.word	0x408f4000
 8005558:	200002b0 	.word	0x200002b0
 800555c:	200002d0 	.word	0x200002d0
 8005560:	40590000 	.word	0x40590000
 8005564:	51eb851f 	.word	0x51eb851f
 8005568:	66666667 	.word	0x66666667
 800556c:	00000000 	.word	0x00000000

08005570 <burn_signal>:
{
 8005570:	b538      	push	{r3, r4, r5, lr}
	double altitude = atof(ant_alt);
 8005572:	482d      	ldr	r0, [pc, #180]	; (8005628 <burn_signal+0xb8>)
 8005574:	f001 f801 	bl	800657a <atof>
    if (burnoffcounter > 0)
 8005578:	4b2c      	ldr	r3, [pc, #176]	; (800562c <burn_signal+0xbc>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	dd0d      	ble.n	800559c <burn_signal+0x2c>
        burnoffcounter--;
 8005580:	3b01      	subs	r3, #1
 8005582:	4a2a      	ldr	r2, [pc, #168]	; (800562c <burn_signal+0xbc>)
 8005584:	6013      	str	r3, [r2, #0]
        if (burnoffcounter == 0)
 8005586:	b103      	cbz	r3, 800558a <burn_signal+0x1a>
 8005588:	bd38      	pop	{r3, r4, r5, pc}
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800558a:	2200      	movs	r2, #0
 800558c:	2102      	movs	r1, #2
 800558e:	4828      	ldr	r0, [pc, #160]	; (8005630 <burn_signal+0xc0>)
 8005590:	f7fc f9dc 	bl	800194c <HAL_GPIO_WritePin>
            burn = true;
 8005594:	2201      	movs	r2, #1
 8005596:	4b27      	ldr	r3, [pc, #156]	; (8005634 <burn_signal+0xc4>)
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
        if ( (valid == true) && (altitude >= 10000) && ( (lontd > maximum) || (lontd < minimum) ) )
 800559c:	4b26      	ldr	r3, [pc, #152]	; (8005638 <burn_signal+0xc8>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	b1fb      	cbz	r3, 80055e2 <burn_signal+0x72>
 80055a2:	a31b      	add	r3, pc, #108	; (adr r3, 8005610 <burn_signal+0xa0>)
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	ec51 0b10 	vmov	r0, r1, d0
 80055ac:	f7fb fa52 	bl	8000a54 <__aeabi_dcmpge>
 80055b0:	b1b8      	cbz	r0, 80055e2 <burn_signal+0x72>
 80055b2:	4b22      	ldr	r3, [pc, #136]	; (800563c <burn_signal+0xcc>)
 80055b4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80055b8:	a317      	add	r3, pc, #92	; (adr r3, 8005618 <burn_signal+0xa8>)
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	4620      	mov	r0, r4
 80055c0:	4629      	mov	r1, r5
 80055c2:	f7fb fa51 	bl	8000a68 <__aeabi_dcmpgt>
 80055c6:	b938      	cbnz	r0, 80055d8 <burn_signal+0x68>
 80055c8:	a315      	add	r3, pc, #84	; (adr r3, 8005620 <burn_signal+0xb0>)
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	4620      	mov	r0, r4
 80055d0:	4629      	mov	r1, r5
 80055d2:	f7fb fa2b 	bl	8000a2c <__aeabi_dcmplt>
 80055d6:	b120      	cbz	r0, 80055e2 <burn_signal+0x72>
        	burntriggered = burntriggered + 1;
 80055d8:	4a19      	ldr	r2, [pc, #100]	; (8005640 <burn_signal+0xd0>)
 80055da:	6813      	ldr	r3, [r2, #0]
 80055dc:	3301      	adds	r3, #1
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	e002      	b.n	80055e8 <burn_signal+0x78>
            burntriggered = 0;
 80055e2:	2200      	movs	r2, #0
 80055e4:	4b16      	ldr	r3, [pc, #88]	; (8005640 <burn_signal+0xd0>)
 80055e6:	601a      	str	r2, [r3, #0]
        if (burntriggered >= 5)
 80055e8:	4b15      	ldr	r3, [pc, #84]	; (8005640 <burn_signal+0xd0>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	ddcb      	ble.n	8005588 <burn_signal+0x18>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80055f0:	2201      	movs	r2, #1
 80055f2:	2102      	movs	r1, #2
 80055f4:	480e      	ldr	r0, [pc, #56]	; (8005630 <burn_signal+0xc0>)
 80055f6:	f7fc f9a9 	bl	800194c <HAL_GPIO_WritePin>
            burnoffcounter = 10;
 80055fa:	220a      	movs	r2, #10
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <burn_signal+0xbc>)
 80055fe:	601a      	str	r2, [r3, #0]
            burntriggered = 0;
 8005600:	2200      	movs	r2, #0
 8005602:	4b0f      	ldr	r3, [pc, #60]	; (8005640 <burn_signal+0xd0>)
 8005604:	601a      	str	r2, [r3, #0]
            b = 11;
 8005606:	220b      	movs	r2, #11
 8005608:	4b0e      	ldr	r3, [pc, #56]	; (8005644 <burn_signal+0xd4>)
 800560a:	601a      	str	r2, [r3, #0]
}
 800560c:	e7bc      	b.n	8005588 <burn_signal+0x18>
 800560e:	bf00      	nop
 8005610:	00000000 	.word	0x00000000
 8005614:	40c38800 	.word	0x40c38800
 8005618:	5fd8adac 	.word	0x5fd8adac
 800561c:	4032ef76 	.word	0x4032ef76
 8005620:	9d66adb4 	.word	0x9d66adb4
 8005624:	4031f9f1 	.word	0x4031f9f1
 8005628:	200002a4 	.word	0x200002a4
 800562c:	200002bc 	.word	0x200002bc
 8005630:	48000400 	.word	0x48000400
 8005634:	200002b8 	.word	0x200002b8
 8005638:	20000368 	.word	0x20000368
 800563c:	20000318 	.word	0x20000318
 8005640:	200002c0 	.word	0x200002c0
 8005644:	20000008 	.word	0x20000008

08005648 <adc_sb>:
{
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	ed2d 8b02 	vpush	{d8}
	sConfig1.Channel = ADC_CHANNEL_1;
 800564e:	4944      	ldr	r1, [pc, #272]	; (8005760 <adc_sb+0x118>)
 8005650:	2301      	movs	r3, #1
 8005652:	600b      	str	r3, [r1, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig1);
 8005654:	4c43      	ldr	r4, [pc, #268]	; (8005764 <adc_sb+0x11c>)
 8005656:	4620      	mov	r0, r4
 8005658:	f7fb fdc2 	bl	80011e0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1); //start
 800565c:	4620      	mov	r0, r4
 800565e:	f7fb fcad 	bl	8000fbc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 5)== HAL_OK){
 8005662:	2105      	movs	r1, #5
 8005664:	4620      	mov	r0, r4
 8005666:	f7fb fd2b 	bl	80010c0 <HAL_ADC_PollForConversion>
 800566a:	2800      	cmp	r0, #0
 800566c:	d05e      	beq.n	800572c <adc_sb+0xe4>
	sConfig2.Channel = ADC_CHANNEL_2;
 800566e:	493e      	ldr	r1, [pc, #248]	; (8005768 <adc_sb+0x120>)
 8005670:	2302      	movs	r3, #2
 8005672:	600b      	str	r3, [r1, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig2);
 8005674:	4c3b      	ldr	r4, [pc, #236]	; (8005764 <adc_sb+0x11c>)
 8005676:	4620      	mov	r0, r4
 8005678:	f7fb fdb2 	bl	80011e0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1); //start
 800567c:	4620      	mov	r0, r4
 800567e:	f7fb fc9d 	bl	8000fbc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 5)== HAL_OK){
 8005682:	2105      	movs	r1, #5
 8005684:	4620      	mov	r0, r4
 8005686:	f7fb fd1b 	bl	80010c0 <HAL_ADC_PollForConversion>
 800568a:	2800      	cmp	r0, #0
 800568c:	d054      	beq.n	8005738 <adc_sb+0xf0>
	pa0 = vdd*pa0_raw/num_bits;
 800568e:	4b37      	ldr	r3, [pc, #220]	; (800576c <adc_sb+0x124>)
 8005690:	edd3 7a00 	vldr	s15, [r3]
 8005694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005698:	eddf 8a35 	vldr	s17, [pc, #212]	; 8005770 <adc_sb+0x128>
 800569c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80056a0:	ed9f 8a34 	vldr	s16, [pc, #208]	; 8005774 <adc_sb+0x12c>
 80056a4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 80056a8:	ee17 0a10 	vmov	r0, s14
 80056ac:	f7fa fef8 	bl	80004a0 <__aeabi_f2d>
 80056b0:	4606      	mov	r6, r0
 80056b2:	460f      	mov	r7, r1
 80056b4:	4b30      	ldr	r3, [pc, #192]	; (8005778 <adc_sb+0x130>)
 80056b6:	e9c3 6700 	strd	r6, r7, [r3]
	pa1 = vdd*pa1_raw/num_bits;
 80056ba:	4b30      	ldr	r3, [pc, #192]	; (800577c <adc_sb+0x134>)
 80056bc:	edd3 7a00 	vldr	s15, [r3]
 80056c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80056c8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 80056cc:	ee17 0a10 	vmov	r0, s14
 80056d0:	f7fa fee6 	bl	80004a0 <__aeabi_f2d>
 80056d4:	4604      	mov	r4, r0
 80056d6:	460d      	mov	r5, r1
 80056d8:	4b29      	ldr	r3, [pc, #164]	; (8005780 <adc_sb+0x138>)
 80056da:	e9c3 4500 	strd	r4, r5, [r3]
	volt = pa0*(R3+R4)/R4;
 80056de:	a31a      	add	r3, pc, #104	; (adr r3, 8005748 <adc_sb+0x100>)
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	4630      	mov	r0, r6
 80056e6:	4639      	mov	r1, r7
 80056e8:	f7fa ff2e 	bl	8000548 <__aeabi_dmul>
 80056ec:	a318      	add	r3, pc, #96	; (adr r3, 8005750 <adc_sb+0x108>)
 80056ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f2:	f7fb f853 	bl	800079c <__aeabi_ddiv>
 80056f6:	4b23      	ldr	r3, [pc, #140]	; (8005784 <adc_sb+0x13c>)
 80056f8:	e9c3 0100 	strd	r0, r1, [r3]
	curr = pa1/((1+R1/R2)*0.01*Rout);
 80056fc:	a316      	add	r3, pc, #88	; (adr r3, 8005758 <adc_sb+0x110>)
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	4620      	mov	r0, r4
 8005704:	4629      	mov	r1, r5
 8005706:	f7fb f849 	bl	800079c <__aeabi_ddiv>
 800570a:	4b1f      	ldr	r3, [pc, #124]	; (8005788 <adc_sb+0x140>)
 800570c:	e9c3 0100 	strd	r0, r1, [r3]
	tot_curr = tot_curr + curr;
 8005710:	4c1e      	ldr	r4, [pc, #120]	; (800578c <adc_sb+0x144>)
 8005712:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005716:	f7fa fd65 	bl	80001e4 <__adddf3>
 800571a:	e9c4 0100 	strd	r0, r1, [r4]
	sample++;
 800571e:	4a1c      	ldr	r2, [pc, #112]	; (8005790 <adc_sb+0x148>)
 8005720:	6813      	ldr	r3, [r2, #0]
 8005722:	3301      	adds	r3, #1
 8005724:	6013      	str	r3, [r2, #0]
}
 8005726:	ecbd 8b02 	vpop	{d8}
 800572a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pa0_raw = HAL_ADC_GetValue(&hadc1);
 800572c:	4620      	mov	r0, r4
 800572e:	f7fb fd53 	bl	80011d8 <HAL_ADC_GetValue>
 8005732:	4b0e      	ldr	r3, [pc, #56]	; (800576c <adc_sb+0x124>)
 8005734:	6018      	str	r0, [r3, #0]
 8005736:	e79a      	b.n	800566e <adc_sb+0x26>
		pa1_raw = HAL_ADC_GetValue(&hadc1);
 8005738:	4620      	mov	r0, r4
 800573a:	f7fb fd4d 	bl	80011d8 <HAL_ADC_GetValue>
 800573e:	4b0f      	ldr	r3, [pc, #60]	; (800577c <adc_sb+0x134>)
 8005740:	6018      	str	r0, [r3, #0]
 8005742:	e7a4      	b.n	800568e <adc_sb+0x46>
 8005744:	f3af 8000 	nop.w
 8005748:	00000000 	.word	0x00000000
 800574c:	40df0680 	.word	0x40df0680
 8005750:	00000000 	.word	0x00000000
 8005754:	40c31500 	.word	0x40c31500
 8005758:	87ae147b 	.word	0x87ae147b
 800575c:	403aeb43 	.word	0x403aeb43
 8005760:	20000264 	.word	0x20000264
 8005764:	200003d4 	.word	0x200003d4
 8005768:	2000027c 	.word	0x2000027c
 800576c:	20000560 	.word	0x20000560
 8005770:	40566666 	.word	0x40566666
 8005774:	437f0000 	.word	0x437f0000
 8005778:	20000330 	.word	0x20000330
 800577c:	200005d8 	.word	0x200005d8
 8005780:	20000338 	.word	0x20000338
 8005784:	20000370 	.word	0x20000370
 8005788:	200002c8 	.word	0x200002c8
 800578c:	20000360 	.word	0x20000360
 8005790:	20000350 	.word	0x20000350

08005794 <lcd_instr_write>:
{
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4604      	mov	r4, r0
	user_delay(1);
 8005798:	2001      	movs	r0, #1
 800579a:	f7ff f9f6 	bl	8004b8a <user_delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);//RS -> 0
 800579e:	4d34      	ldr	r5, [pc, #208]	; (8005870 <lcd_instr_write+0xdc>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057a6:	4628      	mov	r0, r5
 80057a8:	f7fc f8d0 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);//RNW -> 0
 80057ac:	2200      	movs	r2, #0
 80057ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057b2:	4628      	mov	r0, r5
 80057b4:	f7fc f8ca 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // E-> 1
 80057b8:	2201      	movs	r2, #1
 80057ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80057be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057c2:	f7fc f8c3 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, ((dbs&0b10000000)>>7) );//DB7
 80057c6:	09e2      	lsrs	r2, r4, #7
 80057c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057d0:	f7fc f8bc 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, ((dbs&0b01000000)>>6) );//DB6
 80057d4:	f3c4 1280 	ubfx	r2, r4, #6, #1
 80057d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057e0:	f7fc f8b4 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, ((dbs&0b00100000)>>5));//DB5
 80057e4:	f3c4 1240 	ubfx	r2, r4, #5, #1
 80057e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057f0:	f7fc f8ac 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, ((dbs&0b00010000)>>4));//DB4
 80057f4:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80057f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005800:	f7fc f8a4 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);//E -> 0
 8005804:	2200      	movs	r2, #0
 8005806:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800580a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800580e:	f7fc f89d 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // E-> 1
 8005812:	2201      	movs	r2, #1
 8005814:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800581c:	f7fc f896 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, ((dbs&0b00001000)>>3));//DB7
 8005820:	f3c4 02c0 	ubfx	r2, r4, #3, #1
 8005824:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800582c:	f7fc f88e 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, ((dbs&0b00000100)>>2));//DB6
 8005830:	f3c4 0280 	ubfx	r2, r4, #2, #1
 8005834:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800583c:	f7fc f886 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, ((dbs&0b00000010)>>1));//DB5
 8005840:	f3c4 0240 	ubfx	r2, r4, #1, #1
 8005844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800584c:	f7fc f87e 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, ((dbs&0b00000001)));//DB4
 8005850:	f004 0201 	and.w	r2, r4, #1
 8005854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800585c:	f7fc f876 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);//E -> 0
 8005860:	2200      	movs	r2, #0
 8005862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800586a:	f7fc f86f 	bl	800194c <HAL_GPIO_WritePin>
 800586e:	bd38      	pop	{r3, r4, r5, pc}
 8005870:	48000400 	.word	0x48000400

08005874 <lcd_init>:
{
 8005874:	b510      	push	{r4, lr}
	HAL_Delay(15);
 8005876:	200f      	movs	r0, #15
 8005878:	f7fb f9f8 	bl	8000c6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);//RS
 800587c:	4c7a      	ldr	r4, [pc, #488]	; (8005a68 <lcd_init+0x1f4>)
 800587e:	2200      	movs	r2, #0
 8005880:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005884:	4620      	mov	r0, r4
 8005886:	f7fc f861 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);//RNW
 800588a:	2200      	movs	r2, #0
 800588c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005890:	4620      	mov	r0, r4
 8005892:	f7fc f85b 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // E->1
 8005896:	2201      	movs	r2, #1
 8005898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800589c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058a0:	f7fc f854 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);//DB7
 80058a4:	2200      	movs	r2, #0
 80058a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058ae:	f7fc f84d 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);//DB6
 80058b2:	2200      	movs	r2, #0
 80058b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058bc:	f7fc f846 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);//DB5 = 1 -> 8-bit mode
 80058c0:	2201      	movs	r2, #1
 80058c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058ca:	f7fc f83f 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);//DB4 = 1 -> 2 lines
 80058ce:	2201      	movs	r2, #1
 80058d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058d8:	f7fc f838 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);//E -> 0
 80058dc:	2200      	movs	r2, #0
 80058de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058e6:	f7fc f831 	bl	800194c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80058ea:	2005      	movs	r0, #5
 80058ec:	f7fb f9be 	bl	8000c6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);//RS
 80058f0:	2200      	movs	r2, #0
 80058f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058f6:	4620      	mov	r0, r4
 80058f8:	f7fc f828 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);//RNW
 80058fc:	2200      	movs	r2, #0
 80058fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005902:	4620      	mov	r0, r4
 8005904:	f7fc f822 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // E->1
 8005908:	2201      	movs	r2, #1
 800590a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800590e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005912:	f7fc f81b 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);//DB7
 8005916:	2200      	movs	r2, #0
 8005918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800591c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005920:	f7fc f814 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);//DB6
 8005924:	2200      	movs	r2, #0
 8005926:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800592a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800592e:	f7fc f80d 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);//DB5 = 1 -> 8-bit mode
 8005932:	2201      	movs	r2, #1
 8005934:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800593c:	f7fc f806 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);//DB4 = 1 -> 2 lines
 8005940:	2201      	movs	r2, #1
 8005942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800594a:	f7fb ffff 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);//E -> 0
 800594e:	2200      	movs	r2, #0
 8005950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005958:	f7fb fff8 	bl	800194c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800595c:	2001      	movs	r0, #1
 800595e:	f7fb f985 	bl	8000c6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);//RS
 8005962:	2200      	movs	r2, #0
 8005964:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005968:	4620      	mov	r0, r4
 800596a:	f7fb ffef 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);//RNW
 800596e:	2200      	movs	r2, #0
 8005970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005974:	4620      	mov	r0, r4
 8005976:	f7fb ffe9 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // E->1
 800597a:	2201      	movs	r2, #1
 800597c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005984:	f7fb ffe2 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);//DB7
 8005988:	2200      	movs	r2, #0
 800598a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800598e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005992:	f7fb ffdb 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);//DB6
 8005996:	2200      	movs	r2, #0
 8005998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800599c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059a0:	f7fb ffd4 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);//DB5 = 1 -> 8-bit mode
 80059a4:	2201      	movs	r2, #1
 80059a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059ae:	f7fb ffcd 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);//DB4 = 1 -> 2 lines
 80059b2:	2201      	movs	r2, #1
 80059b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059bc:	f7fb ffc6 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);//E -> 0
 80059c0:	2200      	movs	r2, #0
 80059c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059ca:	f7fb ffbf 	bl	800194c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80059ce:	2001      	movs	r0, #1
 80059d0:	f7fb f94c 	bl	8000c6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);//RS
 80059d4:	2200      	movs	r2, #0
 80059d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059da:	4620      	mov	r0, r4
 80059dc:	f7fb ffb6 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);//RNW
 80059e0:	2200      	movs	r2, #0
 80059e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059e6:	4620      	mov	r0, r4
 80059e8:	f7fb ffb0 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // E-> 1
 80059ec:	2201      	movs	r2, #1
 80059ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059f6:	f7fb ffa9 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);//DB7
 80059fa:	2200      	movs	r2, #0
 80059fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a04:	f7fb ffa2 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);//DB6
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a12:	f7fb ff9b 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);//DB5 -> 1
 8005a16:	2201      	movs	r2, #1
 8005a18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a20:	f7fb ff94 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);//DB4
 8005a24:	2200      	movs	r2, #0
 8005a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a2e:	f7fb ff8d 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);//E -> 0
 8005a32:	2200      	movs	r2, #0
 8005a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a3c:	f7fb ff86 	bl	800194c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005a40:	2001      	movs	r0, #1
 8005a42:	f7fb f913 	bl	8000c6c <HAL_Delay>
	lcd_instr_write(0b00101000);
 8005a46:	2028      	movs	r0, #40	; 0x28
 8005a48:	f7ff fea4 	bl	8005794 <lcd_instr_write>
	lcd_instr_write(0b00001000);
 8005a4c:	2008      	movs	r0, #8
 8005a4e:	f7ff fea1 	bl	8005794 <lcd_instr_write>
	lcd_instr_write(0b00000001);
 8005a52:	2001      	movs	r0, #1
 8005a54:	f7ff fe9e 	bl	8005794 <lcd_instr_write>
	lcd_instr_write(0b00000110);
 8005a58:	2006      	movs	r0, #6
 8005a5a:	f7ff fe9b 	bl	8005794 <lcd_instr_write>
	lcd_instr_write(0b00001111);
 8005a5e:	200f      	movs	r0, #15
 8005a60:	f7ff fe98 	bl	8005794 <lcd_instr_write>
 8005a64:	bd10      	pop	{r4, pc}
 8005a66:	bf00      	nop
 8005a68:	48000400 	.word	0x48000400

08005a6c <lcd_data_write>:
{
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4604      	mov	r4, r0
	user_delay(1);
 8005a70:	2001      	movs	r0, #1
 8005a72:	f7ff f88a 	bl	8004b8a <user_delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);//RS -> 1
 8005a76:	4d34      	ldr	r5, [pc, #208]	; (8005b48 <lcd_data_write+0xdc>)
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a7e:	4628      	mov	r0, r5
 8005a80:	f7fb ff64 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);//RNW -> 0
 8005a84:	2200      	movs	r2, #0
 8005a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	f7fb ff5e 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // E-> 1
 8005a90:	2201      	movs	r2, #1
 8005a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a9a:	f7fb ff57 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, ((data&0b10000000)>>7) );//DB7
 8005a9e:	09e2      	lsrs	r2, r4, #7
 8005aa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005aa8:	f7fb ff50 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, ((data&0b01000000)>>6) );//DB6
 8005aac:	f3c4 1280 	ubfx	r2, r4, #6, #1
 8005ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ab8:	f7fb ff48 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, ((data&0b00100000)>>5));//DB5
 8005abc:	f3c4 1240 	ubfx	r2, r4, #5, #1
 8005ac0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ac8:	f7fb ff40 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, ((data&0b00010000)>>4));//DB4
 8005acc:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8005ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ad8:	f7fb ff38 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);//E -> 0
 8005adc:	2200      	movs	r2, #0
 8005ade:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ae6:	f7fb ff31 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // E-> 1
 8005aea:	2201      	movs	r2, #1
 8005aec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005af4:	f7fb ff2a 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, ((data&0b00001000)>>3));//DB7
 8005af8:	f3c4 02c0 	ubfx	r2, r4, #3, #1
 8005afc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b04:	f7fb ff22 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, ((data&0b00000100)>>2));//DB6
 8005b08:	f3c4 0280 	ubfx	r2, r4, #2, #1
 8005b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b14:	f7fb ff1a 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, ((data&0b00000010)>>1));//DB5
 8005b18:	f3c4 0240 	ubfx	r2, r4, #1, #1
 8005b1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b24:	f7fb ff12 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, ((data&0b00000001)));//DB4
 8005b28:	f004 0201 	and.w	r2, r4, #1
 8005b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b34:	f7fb ff0a 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);//E -> 0
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b42:	f7fb ff03 	bl	800194c <HAL_GPIO_WritePin>
 8005b46:	bd38      	pop	{r3, r4, r5, pc}
 8005b48:	48000400 	.word	0x48000400

08005b4c <lcd_out>:
{
 8005b4c:	b510      	push	{r4, lr}
	lcd_instr_write(1);
 8005b4e:	2001      	movs	r0, #1
 8005b50:	f7ff fe20 	bl	8005794 <lcd_instr_write>
	lcd_instr_write(128+0);
 8005b54:	2080      	movs	r0, #128	; 0x80
 8005b56:	f7ff fe1d 	bl	8005794 <lcd_instr_write>
	int n = 0;
 8005b5a:	2400      	movs	r4, #0
	while(n <= 4)
 8005b5c:	e001      	b.n	8005b62 <lcd_out+0x16>
				n = 6;
 8005b5e:	2406      	movs	r4, #6
		n++;
 8005b60:	3401      	adds	r4, #1
	while(n <= 4)
 8005b62:	2c04      	cmp	r4, #4
 8005b64:	dc0a      	bgt.n	8005b7c <lcd_out+0x30>
		if(comm[75+n] != ' ')
 8005b66:	f104 034b 	add.w	r3, r4, #75	; 0x4b
 8005b6a:	4a15      	ldr	r2, [pc, #84]	; (8005bc0 <lcd_out+0x74>)
 8005b6c:	5cd0      	ldrb	r0, [r2, r3]
 8005b6e:	2820      	cmp	r0, #32
 8005b70:	d0f6      	beq.n	8005b60 <lcd_out+0x14>
			if(comm[75+n] != '.')
 8005b72:	282e      	cmp	r0, #46	; 0x2e
 8005b74:	d0f3      	beq.n	8005b5e <lcd_out+0x12>
				lcd_data_write(comm[75+n]);
 8005b76:	f7ff ff79 	bl	8005a6c <lcd_data_write>
 8005b7a:	e7f1      	b.n	8005b60 <lcd_out+0x14>
	lcd_data_write('m');
 8005b7c:	206d      	movs	r0, #109	; 0x6d
 8005b7e:	f7ff ff75 	bl	8005a6c <lcd_data_write>
	lcd_instr_write(128+40+1);
 8005b82:	20a9      	movs	r0, #169	; 0xa9
 8005b84:	f7ff fe06 	bl	8005794 <lcd_instr_write>
	if(b > 0)
 8005b88:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <lcd_out+0x78>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	dd05      	ble.n	8005b9c <lcd_out+0x50>
		--b;
 8005b90:	3b01      	subs	r3, #1
 8005b92:	4a0c      	ldr	r2, [pc, #48]	; (8005bc4 <lcd_out+0x78>)
 8005b94:	6013      	str	r3, [r2, #0]
		lcd_data_write('B');
 8005b96:	2042      	movs	r0, #66	; 0x42
 8005b98:	f7ff ff68 	bl	8005a6c <lcd_data_write>
	lcd_instr_write(128+40+4);
 8005b9c:	20ac      	movs	r0, #172	; 0xac
 8005b9e:	f7ff fdf9 	bl	8005794 <lcd_instr_write>
	lcd_data_write(comm[25]);
 8005ba2:	4c07      	ldr	r4, [pc, #28]	; (8005bc0 <lcd_out+0x74>)
 8005ba4:	7e60      	ldrb	r0, [r4, #25]
 8005ba6:	f7ff ff61 	bl	8005a6c <lcd_data_write>
	lcd_data_write(comm[26]);
 8005baa:	7ea0      	ldrb	r0, [r4, #26]
 8005bac:	f7ff ff5e 	bl	8005a6c <lcd_data_write>
	lcd_data_write(comm[27]);
 8005bb0:	7ee0      	ldrb	r0, [r4, #27]
 8005bb2:	f7ff ff5b 	bl	8005a6c <lcd_data_write>
	lcd_data_write(0x43);
 8005bb6:	2043      	movs	r0, #67	; 0x43
 8005bb8:	f7ff ff58 	bl	8005a6c <lcd_data_write>
 8005bbc:	bd10      	pop	{r4, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000010 	.word	0x20000010
 8005bc4:	20000008 	.word	0x20000008

08005bc8 <stream_sensor_data_forced_mode>:
{
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	4604      	mov	r4, r0
    settings_sel = BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL;
 8005bcc:	200f      	movs	r0, #15
 8005bce:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <stream_sensor_data_forced_mode+0x2c>)
 8005bd0:	7018      	strb	r0, [r3, #0]
    bme280_set_sensor_settings(settings_sel, dev);
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	f7fe fcd0 	bl	8004578 <bme280_set_sensor_settings>
    bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
 8005bd8:	4621      	mov	r1, r4
 8005bda:	2001      	movs	r0, #1
 8005bdc:	f7fe fd06 	bl	80045ec <bme280_set_sensor_mode>
	dev->delay_ms(40);
 8005be0:	68e3      	ldr	r3, [r4, #12]
 8005be2:	2028      	movs	r0, #40	; 0x28
 8005be4:	4798      	blx	r3
	bme280_get_sensor_data(BME280_ALL, &comp_data, dev);
 8005be6:	4622      	mov	r2, r4
 8005be8:	4903      	ldr	r1, [pc, #12]	; (8005bf8 <stream_sensor_data_forced_mode+0x30>)
 8005bea:	2007      	movs	r0, #7
 8005bec:	f7fe fd75 	bl	80046da <bme280_get_sensor_data>
 8005bf0:	bd10      	pop	{r4, pc}
 8005bf2:	bf00      	nop
 8005bf4:	200005dc 	.word	0x200005dc
 8005bf8:	20000530 	.word	0x20000530

08005bfc <sensor_init>:
{
 8005bfc:	b538      	push	{r3, r4, r5, lr}
	if(HAL_I2C_IsDeviceReady(&hi2c1, (bme280_id<<1)&0xFE, 2, 100) == HAL_OK)
 8005bfe:	4b28      	ldr	r3, [pc, #160]	; (8005ca0 <sensor_init+0xa4>)
 8005c00:	7819      	ldrb	r1, [r3, #0]
 8005c02:	0049      	lsls	r1, r1, #1
 8005c04:	2364      	movs	r3, #100	; 0x64
 8005c06:	2202      	movs	r2, #2
 8005c08:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8005c0c:	4825      	ldr	r0, [pc, #148]	; (8005ca4 <sensor_init+0xa8>)
 8005c0e:	f7fc fc03 	bl	8002418 <HAL_I2C_IsDeviceReady>
 8005c12:	b158      	cbz	r0, 8005c2c <sensor_init+0x30>
	if(HAL_I2C_IsDeviceReady(&hi2c1, (lis2dh12_id<<1)&0xFE, 2, 100) == HAL_OK)
 8005c14:	4b24      	ldr	r3, [pc, #144]	; (8005ca8 <sensor_init+0xac>)
 8005c16:	7819      	ldrb	r1, [r3, #0]
 8005c18:	0049      	lsls	r1, r1, #1
 8005c1a:	2364      	movs	r3, #100	; 0x64
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8005c22:	4820      	ldr	r0, [pc, #128]	; (8005ca4 <sensor_init+0xa8>)
 8005c24:	f7fc fbf8 	bl	8002418 <HAL_I2C_IsDeviceReady>
 8005c28:	b1f0      	cbz	r0, 8005c68 <sensor_init+0x6c>
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
	    dev.dev_id = BME280_I2C_ADDR_PRIM; //Address = 0X76 (SDO -> GND)
 8005c2c:	4c1f      	ldr	r4, [pc, #124]	; (8005cac <sensor_init+0xb0>)
 8005c2e:	2376      	movs	r3, #118	; 0x76
 8005c30:	7063      	strb	r3, [r4, #1]
	    dev.intf = BME280_I2C_INTF; //Set I2C Interface
 8005c32:	2501      	movs	r5, #1
 8005c34:	70a5      	strb	r5, [r4, #2]
	    dev.read = user_i2c_read; //READ Function
 8005c36:	4b1e      	ldr	r3, [pc, #120]	; (8005cb0 <sensor_init+0xb4>)
 8005c38:	6063      	str	r3, [r4, #4]
	    dev.write = user_i2c_write; //WRITE Function
 8005c3a:	4b1e      	ldr	r3, [pc, #120]	; (8005cb4 <sensor_init+0xb8>)
 8005c3c:	60a3      	str	r3, [r4, #8]
	    dev.delay_ms = user_delay; //DELAY Function
 8005c3e:	4b1e      	ldr	r3, [pc, #120]	; (8005cb8 <sensor_init+0xbc>)
 8005c40:	60e3      	str	r3, [r4, #12]
	    bme280_init(&dev);
 8005c42:	4620      	mov	r0, r4
 8005c44:	f7fe fc47 	bl	80044d6 <bme280_init>
		dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8005c48:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
		dev.settings.osr_p = BME280_OVERSAMPLING_1X;
 8005c4c:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
		dev.settings.osr_t = BME280_OVERSAMPLING_1X;
 8005c50:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
		dev.settings.filter = BME280_FILTER_COEFF_OFF;
 8005c54:	2300      	movs	r3, #0
 8005c56:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		dev.settings.standby_time = BME280_STANDBY_TIME_500_MS;
 8005c5a:	2304      	movs	r3, #4
 8005c5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		stream_sensor_data_forced_mode(&dev);
 8005c60:	4620      	mov	r0, r4
 8005c62:	f7ff ffb1 	bl	8005bc8 <stream_sensor_data_forced_mode>
 8005c66:	e7d5      	b.n	8005c14 <sensor_init+0x18>
		dev_ctx.write_reg = platform_write;
 8005c68:	4c14      	ldr	r4, [pc, #80]	; (8005cbc <sensor_init+0xc0>)
 8005c6a:	4b15      	ldr	r3, [pc, #84]	; (8005cc0 <sensor_init+0xc4>)
 8005c6c:	6023      	str	r3, [r4, #0]
		dev_ctx.read_reg = platform_read;
 8005c6e:	4b15      	ldr	r3, [pc, #84]	; (8005cc4 <sensor_init+0xc8>)
 8005c70:	6063      	str	r3, [r4, #4]
		dev_ctx.handle = &hi2c1;
 8005c72:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <sensor_init+0xa8>)
 8005c74:	60a3      	str	r3, [r4, #8]
		lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8005c76:	2101      	movs	r1, #1
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f7fe fe19 	bl	80048b0 <lis2dh12_block_data_update_set>
		lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_10Hz);
 8005c7e:	2102      	movs	r1, #2
 8005c80:	4620      	mov	r0, r4
 8005c82:	f7fe fddd 	bl	8004840 <lis2dh12_data_rate_set>
		lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
 8005c86:	2100      	movs	r1, #0
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f7fe fdf5 	bl	8004878 <lis2dh12_full_scale_set>
		lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_DISABLE);
 8005c8e:	2100      	movs	r1, #0
 8005c90:	4620      	mov	r0, r4
 8005c92:	f7fe fd67 	bl	8004764 <lis2dh12_temperature_meas_set>
		lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_NM_10bit);
 8005c96:	2101      	movs	r1, #1
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f7fe fd7f 	bl	800479c <lis2dh12_operating_mode_set>
}
 8005c9e:	e7c4      	b.n	8005c2a <sensor_init+0x2e>
 8005ca0:	2000000c 	.word	0x2000000c
 8005ca4:	20000388 	.word	0x20000388
 8005ca8:	2000006b 	.word	0x2000006b
 8005cac:	200004e0 	.word	0x200004e0
 8005cb0:	08004ba1 	.word	0x08004ba1
 8005cb4:	08004be1 	.word	0x08004be1
 8005cb8:	08004b8b 	.word	0x08004b8b
 8005cbc:	20000524 	.word	0x20000524
 8005cc0:	08004c09 	.word	0x08004c09
 8005cc4:	08004c35 	.word	0x08004c35

08005cc8 <user_init>:
{
 8005cc8:	b508      	push	{r3, lr}
    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data, 1);
 8005cca:	2201      	movs	r2, #1
 8005ccc:	4905      	ldr	r1, [pc, #20]	; (8005ce4 <user_init+0x1c>)
 8005cce:	4806      	ldr	r0, [pc, #24]	; (8005ce8 <user_init+0x20>)
 8005cd0:	f7fd fb3d 	bl	800334e <HAL_UART_Receive_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 8005cd4:	4805      	ldr	r0, [pc, #20]	; (8005cec <user_init+0x24>)
 8005cd6:	f7fd f9bf 	bl	8003058 <HAL_TIM_Base_Start_IT>
    lcd_init();
 8005cda:	f7ff fdcb 	bl	8005874 <lcd_init>
    sensor_init();
 8005cde:	f7ff ff8d 	bl	8005bfc <sensor_init>
 8005ce2:	bd08      	pop	{r3, pc}
 8005ce4:	200005dd 	.word	0x200005dd
 8005ce8:	20000428 	.word	0x20000428
 8005cec:	20000498 	.word	0x20000498

08005cf0 <format_bme280>:
{
 8005cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pres = comp_data.pressure;
 8005cf4:	4b4f      	ldr	r3, [pc, #316]	; (8005e34 <format_bme280+0x144>)
 8005cf6:	e9d3 0100 	ldrd	r0, r1, [r3]
	temp = comp_data.temperature;
 8005cfa:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
 8005cfe:	4a4e      	ldr	r2, [pc, #312]	; (8005e38 <format_bme280+0x148>)
 8005d00:	e9c2 6700 	strd	r6, r7, [r2]
	humd = comp_data.humidity;
 8005d04:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8005d08:	4b4c      	ldr	r3, [pc, #304]	; (8005e3c <format_bme280+0x14c>)
 8005d0a:	e9c3 8900 	strd	r8, r9, [r3]
	pres /= 1000;
 8005d0e:	2200      	movs	r2, #0
 8005d10:	4b4b      	ldr	r3, [pc, #300]	; (8005e40 <format_bme280+0x150>)
 8005d12:	f7fa fd43 	bl	800079c <__aeabi_ddiv>
 8005d16:	4682      	mov	sl, r0
 8005d18:	468b      	mov	fp, r1
 8005d1a:	4b4a      	ldr	r3, [pc, #296]	; (8005e44 <format_bme280+0x154>)
 8005d1c:	e9c3 ab00 	strd	sl, fp, [r3]
	if(temp < 0)
 8005d20:	2200      	movs	r2, #0
 8005d22:	2300      	movs	r3, #0
 8005d24:	4630      	mov	r0, r6
 8005d26:	4639      	mov	r1, r7
 8005d28:	f7fa fe80 	bl	8000a2c <__aeabi_dcmplt>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	d17d      	bne.n	8005e2c <format_bme280+0x13c>
		comm[25] = ' ';
 8005d30:	2220      	movs	r2, #32
 8005d32:	4b45      	ldr	r3, [pc, #276]	; (8005e48 <format_bme280+0x158>)
 8005d34:	765a      	strb	r2, [r3, #25]
	comm[26] = (int)(temp/10.0) + 48;
 8005d36:	2200      	movs	r2, #0
 8005d38:	4b44      	ldr	r3, [pc, #272]	; (8005e4c <format_bme280+0x15c>)
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	f7fa fd2d 	bl	800079c <__aeabi_ddiv>
 8005d42:	f7fa feb1 	bl	8000aa8 <__aeabi_d2iz>
 8005d46:	3030      	adds	r0, #48	; 0x30
 8005d48:	4d3f      	ldr	r5, [pc, #252]	; (8005e48 <format_bme280+0x158>)
 8005d4a:	76a8      	strb	r0, [r5, #26]
	comm[27] = ((int)(temp))%10 + 48;
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	4639      	mov	r1, r7
 8005d50:	f7fa feaa 	bl	8000aa8 <__aeabi_d2iz>
 8005d54:	4e3e      	ldr	r6, [pc, #248]	; (8005e50 <format_bme280+0x160>)
 8005d56:	fb86 3200 	smull	r3, r2, r6, r0
 8005d5a:	17c3      	asrs	r3, r0, #31
 8005d5c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8005d60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005d64:	005a      	lsls	r2, r3, #1
 8005d66:	1a83      	subs	r3, r0, r2
 8005d68:	3330      	adds	r3, #48	; 0x30
 8005d6a:	76eb      	strb	r3, [r5, #27]
	comm[29] = (int)(humd/100.0) + 48;
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4b39      	ldr	r3, [pc, #228]	; (8005e54 <format_bme280+0x164>)
 8005d70:	4640      	mov	r0, r8
 8005d72:	4649      	mov	r1, r9
 8005d74:	f7fa fd12 	bl	800079c <__aeabi_ddiv>
 8005d78:	f7fa fe96 	bl	8000aa8 <__aeabi_d2iz>
 8005d7c:	3030      	adds	r0, #48	; 0x30
 8005d7e:	7768      	strb	r0, [r5, #29]
	comm[30] = (int)( ( (int)(humd) %100 )/10.0) + 48;
 8005d80:	4640      	mov	r0, r8
 8005d82:	4649      	mov	r1, r9
 8005d84:	f7fa fe90 	bl	8000aa8 <__aeabi_d2iz>
 8005d88:	4681      	mov	r9, r0
 8005d8a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8005e58 <format_bme280+0x168>
 8005d8e:	fb88 3000 	smull	r3, r0, r8, r0
 8005d92:	ea4f 74e9 	mov.w	r4, r9, asr #31
 8005d96:	ebc4 1060 	rsb	r0, r4, r0, asr #5
 8005d9a:	2764      	movs	r7, #100	; 0x64
 8005d9c:	fb07 9010 	mls	r0, r7, r0, r9
 8005da0:	f7fa fb6c 	bl	800047c <__aeabi_i2d>
 8005da4:	2200      	movs	r2, #0
 8005da6:	4b29      	ldr	r3, [pc, #164]	; (8005e4c <format_bme280+0x15c>)
 8005da8:	f7fa fcf8 	bl	800079c <__aeabi_ddiv>
 8005dac:	f7fa fe7c 	bl	8000aa8 <__aeabi_d2iz>
 8005db0:	3030      	adds	r0, #48	; 0x30
 8005db2:	77a8      	strb	r0, [r5, #30]
	comm[31] = (int)(((int)(humd)%10)) + 48;
 8005db4:	fb86 2309 	smull	r2, r3, r6, r9
 8005db8:	ebc4 03a3 	rsb	r3, r4, r3, asr #2
 8005dbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005dc0:	005a      	lsls	r2, r3, #1
 8005dc2:	eba9 0302 	sub.w	r3, r9, r2
 8005dc6:	3330      	adds	r3, #48	; 0x30
 8005dc8:	77eb      	strb	r3, [r5, #31]
	comm[33] = (int)(pres/100.0) + 48;
 8005dca:	2200      	movs	r2, #0
 8005dcc:	4b21      	ldr	r3, [pc, #132]	; (8005e54 <format_bme280+0x164>)
 8005dce:	4650      	mov	r0, sl
 8005dd0:	4659      	mov	r1, fp
 8005dd2:	f7fa fce3 	bl	800079c <__aeabi_ddiv>
 8005dd6:	f7fa fe67 	bl	8000aa8 <__aeabi_d2iz>
 8005dda:	3030      	adds	r0, #48	; 0x30
 8005ddc:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
	comm[34] = (int)( ( (int)(pres) %100 )/10.0) + 48;
 8005de0:	4650      	mov	r0, sl
 8005de2:	4659      	mov	r1, fp
 8005de4:	f7fa fe60 	bl	8000aa8 <__aeabi_d2iz>
 8005de8:	4681      	mov	r9, r0
 8005dea:	fb88 3000 	smull	r3, r0, r8, r0
 8005dee:	ea4f 74e9 	mov.w	r4, r9, asr #31
 8005df2:	ebc4 1060 	rsb	r0, r4, r0, asr #5
 8005df6:	fb07 9010 	mls	r0, r7, r0, r9
 8005dfa:	f7fa fb3f 	bl	800047c <__aeabi_i2d>
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <format_bme280+0x15c>)
 8005e02:	f7fa fccb 	bl	800079c <__aeabi_ddiv>
 8005e06:	f7fa fe4f 	bl	8000aa8 <__aeabi_d2iz>
 8005e0a:	3030      	adds	r0, #48	; 0x30
 8005e0c:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
	comm[35] = (int)(((int)(pres)%10)) + 48;
 8005e10:	fb86 2309 	smull	r2, r3, r6, r9
 8005e14:	ebc4 03a3 	rsb	r3, r4, r3, asr #2
 8005e18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e1c:	005a      	lsls	r2, r3, #1
 8005e1e:	eba9 0302 	sub.w	r3, r9, r2
 8005e22:	3330      	adds	r3, #48	; 0x30
 8005e24:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 8005e28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		comm[25] = '-';
 8005e2c:	222d      	movs	r2, #45	; 0x2d
 8005e2e:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <format_bme280+0x158>)
 8005e30:	765a      	strb	r2, [r3, #25]
 8005e32:	e780      	b.n	8005d36 <format_bme280+0x46>
 8005e34:	20000530 	.word	0x20000530
 8005e38:	20000568 	.word	0x20000568
 8005e3c:	20000550 	.word	0x20000550
 8005e40:	408f4000 	.word	0x408f4000
 8005e44:	200004d8 	.word	0x200004d8
 8005e48:	20000010 	.word	0x20000010
 8005e4c:	40240000 	.word	0x40240000
 8005e50:	66666667 	.word	0x66666667
 8005e54:	40590000 	.word	0x40590000
 8005e58:	51eb851f 	.word	0x51eb851f

08005e5c <stream_accelerometer_data>:

/*
 * SOURCED FROM ST Micro-electronics https://github.com/STMicroelectronics/STMems_Standard_C_drivers/tree/master/lis2dh12_STdC/example
 */
void stream_accelerometer_data(void)
{
 8005e5c:	b538      	push	{r3, r4, r5, lr}
  /*
   * Read samples in polling mode (no int)
   * Read output only if new value available
   */

  lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
 8005e5e:	4c16      	ldr	r4, [pc, #88]	; (8005eb8 <stream_accelerometer_data+0x5c>)
 8005e60:	4621      	mov	r1, r4
 8005e62:	4816      	ldr	r0, [pc, #88]	; (8005ebc <stream_accelerometer_data+0x60>)
 8005e64:	f7fe fd40 	bl	80048e8 <lis2dh12_xl_data_ready_get>

  if (reg.byte)
 8005e68:	7823      	ldrb	r3, [r4, #0]
 8005e6a:	b903      	cbnz	r3, 8005e6e <stream_accelerometer_data+0x12>
 8005e6c:	bd38      	pop	{r3, r4, r5, pc}
  {
	  /* Read accelerometer data */
	  memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 8005e6e:	4c14      	ldr	r4, [pc, #80]	; (8005ec0 <stream_accelerometer_data+0x64>)
 8005e70:	2300      	movs	r3, #0
 8005e72:	6023      	str	r3, [r4, #0]
 8005e74:	80a3      	strh	r3, [r4, #4]
	  lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
 8005e76:	4621      	mov	r1, r4
 8005e78:	4810      	ldr	r0, [pc, #64]	; (8005ebc <stream_accelerometer_data+0x60>)
 8005e7a:	f7fe fd44 	bl	8004906 <lis2dh12_acceleration_raw_get>

	  acceleration_mg[0] =
			  lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[0]);
 8005e7e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8005e82:	f7fe fc63 	bl	800474c <lis2dh12_from_fs2_hr_to_mg>
	  acceleration_mg[0] =
 8005e86:	4d0f      	ldr	r5, [pc, #60]	; (8005ec4 <stream_accelerometer_data+0x68>)
 8005e88:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005e8c:	ee17 3a90 	vmov	r3, s15
 8005e90:	802b      	strh	r3, [r5, #0]

	  acceleration_mg[1] =
			  lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
 8005e92:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8005e96:	f7fe fc59 	bl	800474c <lis2dh12_from_fs2_hr_to_mg>
	  acceleration_mg[1] =
 8005e9a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005e9e:	ee17 3a90 	vmov	r3, s15
 8005ea2:	806b      	strh	r3, [r5, #2]

	  acceleration_mg[2] =
			  lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
 8005ea4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8005ea8:	f7fe fc50 	bl	800474c <lis2dh12_from_fs2_hr_to_mg>
	  acceleration_mg[2] =
 8005eac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005eb0:	ee17 3a90 	vmov	r3, s15
 8005eb4:	80ab      	strh	r3, [r5, #4]
  }
}
 8005eb6:	e7d9      	b.n	8005e6c <stream_accelerometer_data+0x10>
 8005eb8:	20000520 	.word	0x20000520
 8005ebc:	20000524 	.word	0x20000524
 8005ec0:	200002d4 	.word	0x200002d4
 8005ec4:	20000648 	.word	0x20000648

08005ec8 <standardize_accel>:


void standardize_accel(void)
{
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eca:	ed2d 8b04 	vpush	{d8-d9}
	//++stndz;
	magn = pow(acceleration_mg[0], 2) + pow(acceleration_mg[1], 2) + pow(acceleration_mg[2], 2);
 8005ece:	4c56      	ldr	r4, [pc, #344]	; (8006028 <standardize_accel+0x160>)
 8005ed0:	ed9f 8b51 	vldr	d8, [pc, #324]	; 8006018 <standardize_accel+0x150>
 8005ed4:	f9b4 0000 	ldrsh.w	r0, [r4]
 8005ed8:	f7fa fad0 	bl	800047c <__aeabi_i2d>
 8005edc:	eeb0 1a48 	vmov.f32	s2, s16
 8005ee0:	eef0 1a68 	vmov.f32	s3, s17
 8005ee4:	ec41 0b10 	vmov	d0, r0, r1
 8005ee8:	f002 fb08 	bl	80084fc <pow>
 8005eec:	ec57 6b10 	vmov	r6, r7, d0
 8005ef0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8005ef4:	f7fa fac2 	bl	800047c <__aeabi_i2d>
 8005ef8:	eeb0 1a48 	vmov.f32	s2, s16
 8005efc:	eef0 1a68 	vmov.f32	s3, s17
 8005f00:	ec41 0b10 	vmov	d0, r0, r1
 8005f04:	f002 fafa 	bl	80084fc <pow>
 8005f08:	ec53 2b10 	vmov	r2, r3, d0
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	4639      	mov	r1, r7
 8005f10:	f7fa f968 	bl	80001e4 <__adddf3>
 8005f14:	4606      	mov	r6, r0
 8005f16:	460f      	mov	r7, r1
 8005f18:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8005f1c:	f7fa faae 	bl	800047c <__aeabi_i2d>
 8005f20:	eeb0 1a48 	vmov.f32	s2, s16
 8005f24:	eef0 1a68 	vmov.f32	s3, s17
 8005f28:	ec41 0b10 	vmov	d0, r0, r1
 8005f2c:	f002 fae6 	bl	80084fc <pow>
 8005f30:	ec53 2b10 	vmov	r2, r3, d0
 8005f34:	4630      	mov	r0, r6
 8005f36:	4639      	mov	r1, r7
 8005f38:	f7fa f954 	bl	80001e4 <__adddf3>
 8005f3c:	4d3b      	ldr	r5, [pc, #236]	; (800602c <standardize_accel+0x164>)
 8005f3e:	e9c5 0100 	strd	r0, r1, [r5]
	magn = pow(magn, 0.5);
 8005f42:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8006020 <standardize_accel+0x158>
 8005f46:	ec41 0b10 	vmov	d0, r0, r1
 8005f4a:	f002 fad7 	bl	80084fc <pow>
 8005f4e:	ec57 6b10 	vmov	r6, r7, d0
 8005f52:	ed85 0b00 	vstr	d0, [r5]

	accx  = (float)(-1*acceleration_mg[2]/magn);
 8005f56:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8005f5a:	4240      	negs	r0, r0
 8005f5c:	f7fa fa8e 	bl	800047c <__aeabi_i2d>
 8005f60:	4632      	mov	r2, r6
 8005f62:	463b      	mov	r3, r7
 8005f64:	f7fa fc1a 	bl	800079c <__aeabi_ddiv>
 8005f68:	f7fa fde6 	bl	8000b38 <__aeabi_d2f>
 8005f6c:	ee09 0a90 	vmov	s19, r0
 8005f70:	4b2f      	ldr	r3, [pc, #188]	; (8006030 <standardize_accel+0x168>)
 8005f72:	6018      	str	r0, [r3, #0]
	accy  = (float)(acceleration_mg[1]/magn);
 8005f74:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8005f78:	f7fa fa80 	bl	800047c <__aeabi_i2d>
 8005f7c:	4632      	mov	r2, r6
 8005f7e:	463b      	mov	r3, r7
 8005f80:	f7fa fc0c 	bl	800079c <__aeabi_ddiv>
 8005f84:	f7fa fdd8 	bl	8000b38 <__aeabi_d2f>
 8005f88:	ee09 0a10 	vmov	s18, r0
 8005f8c:	4b29      	ldr	r3, [pc, #164]	; (8006034 <standardize_accel+0x16c>)
 8005f8e:	6018      	str	r0, [r3, #0]
	accz  = (float)(-1*acceleration_mg[0]/magn);
 8005f90:	f9b4 0000 	ldrsh.w	r0, [r4]
 8005f94:	4240      	negs	r0, r0
 8005f96:	f7fa fa71 	bl	800047c <__aeabi_i2d>
 8005f9a:	4632      	mov	r2, r6
 8005f9c:	463b      	mov	r3, r7
 8005f9e:	f7fa fbfd 	bl	800079c <__aeabi_ddiv>
 8005fa2:	f7fa fdc9 	bl	8000b38 <__aeabi_d2f>
 8005fa6:	ee08 0a90 	vmov	s17, r0
 8005faa:	4b23      	ldr	r3, [pc, #140]	; (8006038 <standardize_accel+0x170>)
 8005fac:	6018      	str	r0, [r3, #0]

	stnd_x = round((accx)*1000);
 8005fae:	ed9f 8a23 	vldr	s16, [pc, #140]	; 800603c <standardize_accel+0x174>
 8005fb2:	ee69 7a88 	vmul.f32	s15, s19, s16
 8005fb6:	ee17 0a90 	vmov	r0, s15
 8005fba:	f7fa fa71 	bl	80004a0 <__aeabi_f2d>
 8005fbe:	ec41 0b10 	vmov	d0, r0, r1
 8005fc2:	f002 fa55 	bl	8008470 <round>
 8005fc6:	ec51 0b10 	vmov	r0, r1, d0
 8005fca:	f7fa fd6d 	bl	8000aa8 <__aeabi_d2iz>
 8005fce:	4b1c      	ldr	r3, [pc, #112]	; (8006040 <standardize_accel+0x178>)
 8005fd0:	6018      	str	r0, [r3, #0]
	stnd_y = round((accy)*1000);
 8005fd2:	ee69 7a08 	vmul.f32	s15, s18, s16
 8005fd6:	ee17 0a90 	vmov	r0, s15
 8005fda:	f7fa fa61 	bl	80004a0 <__aeabi_f2d>
 8005fde:	ec41 0b10 	vmov	d0, r0, r1
 8005fe2:	f002 fa45 	bl	8008470 <round>
 8005fe6:	ec51 0b10 	vmov	r0, r1, d0
 8005fea:	f7fa fd5d 	bl	8000aa8 <__aeabi_d2iz>
 8005fee:	4b15      	ldr	r3, [pc, #84]	; (8006044 <standardize_accel+0x17c>)
 8005ff0:	6018      	str	r0, [r3, #0]
	stnd_z = round((accz)*1000);
 8005ff2:	ee68 7a88 	vmul.f32	s15, s17, s16
 8005ff6:	ee17 0a90 	vmov	r0, s15
 8005ffa:	f7fa fa51 	bl	80004a0 <__aeabi_f2d>
 8005ffe:	ec41 0b10 	vmov	d0, r0, r1
 8006002:	f002 fa35 	bl	8008470 <round>
 8006006:	ec51 0b10 	vmov	r0, r1, d0
 800600a:	f7fa fd4d 	bl	8000aa8 <__aeabi_d2iz>
 800600e:	4b0e      	ldr	r3, [pc, #56]	; (8006048 <standardize_accel+0x180>)
 8006010:	6018      	str	r0, [r3, #0]
		total_x = 0;
		total_y = 0;
		total_z = 0;
	}
	*/
}
 8006012:	ecbd 8b04 	vpop	{d8-d9}
 8006016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006018:	00000000 	.word	0x00000000
 800601c:	40000000 	.word	0x40000000
 8006020:	00000000 	.word	0x00000000
 8006024:	3fe00000 	.word	0x3fe00000
 8006028:	20000648 	.word	0x20000648
 800602c:	20000548 	.word	0x20000548
 8006030:	20000654 	.word	0x20000654
 8006034:	20000570 	.word	0x20000570
 8006038:	20000644 	.word	0x20000644
 800603c:	447a0000 	.word	0x447a0000
 8006040:	2000055c 	.word	0x2000055c
 8006044:	20000650 	.word	0x20000650
 8006048:	20000558 	.word	0x20000558

0800604c <format_accel>:


void format_accel(void)
{
 800604c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(stnd_x < 0)
 800604e:	4b59      	ldr	r3, [pc, #356]	; (80061b4 <format_accel+0x168>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f2c0 8096 	blt.w	8006184 <format_accel+0x138>
		comm[37] = '-';
		stnd_x = -1*stnd_x;
	}
	else
	{
		comm[37] = ' ';
 8006058:	2220      	movs	r2, #32
 800605a:	4b57      	ldr	r3, [pc, #348]	; (80061b8 <format_accel+0x16c>)
 800605c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	}

	if(stnd_y < 0)
 8006060:	4b56      	ldr	r3, [pc, #344]	; (80061bc <format_accel+0x170>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	f2c0 8095 	blt.w	8006194 <format_accel+0x148>
		comm[42] = '-';
		stnd_y = -1*stnd_y;
	}
	else
	{
		comm[42] = ' ';
 800606a:	2220      	movs	r2, #32
 800606c:	4b52      	ldr	r3, [pc, #328]	; (80061b8 <format_accel+0x16c>)
 800606e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	}

	if(stnd_z < 0)
 8006072:	4b53      	ldr	r3, [pc, #332]	; (80061c0 <format_accel+0x174>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f2c0 8094 	blt.w	80061a4 <format_accel+0x158>
		comm[47] = '-';
		stnd_z = -1*stnd_z;
	}
	else
	{
		comm[47] = ' ';
 800607c:	2220      	movs	r2, #32
 800607e:	4b4e      	ldr	r3, [pc, #312]	; (80061b8 <format_accel+0x16c>)
 8006080:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	if(stnd_x >= 1000)
 8006084:	4b4b      	ldr	r3, [pc, #300]	; (80061b4 <format_accel+0x168>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800608c:	db03      	blt.n	8006096 <format_accel+0x4a>
	{
		stnd_x = 999;
 800608e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006092:	4b48      	ldr	r3, [pc, #288]	; (80061b4 <format_accel+0x168>)
 8006094:	601a      	str	r2, [r3, #0]
	}

	if(stnd_y >= 1000)
 8006096:	4b49      	ldr	r3, [pc, #292]	; (80061bc <format_accel+0x170>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800609e:	db03      	blt.n	80060a8 <format_accel+0x5c>
	{
		stnd_y = 999;
 80060a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80060a4:	4b45      	ldr	r3, [pc, #276]	; (80061bc <format_accel+0x170>)
 80060a6:	601a      	str	r2, [r3, #0]
	}

	if(stnd_z >= 1000)
 80060a8:	4b45      	ldr	r3, [pc, #276]	; (80061c0 <format_accel+0x174>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060b0:	db03      	blt.n	80060ba <format_accel+0x6e>
	{
		stnd_z = 999;
 80060b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80060b6:	4b42      	ldr	r3, [pc, #264]	; (80061c0 <format_accel+0x174>)
 80060b8:	601a      	str	r2, [r3, #0]
	}

	comm[38] = (int)(stnd_x/100) + 48;
 80060ba:	4b3e      	ldr	r3, [pc, #248]	; (80061b4 <format_accel+0x168>)
 80060bc:	681e      	ldr	r6, [r3, #0]
 80060be:	4c41      	ldr	r4, [pc, #260]	; (80061c4 <format_accel+0x178>)
 80060c0:	fb84 3006 	smull	r3, r0, r4, r6
 80060c4:	17f2      	asrs	r2, r6, #31
 80060c6:	ebc2 1060 	rsb	r0, r2, r0, asr #5
 80060ca:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80060ce:	493a      	ldr	r1, [pc, #232]	; (80061b8 <format_accel+0x16c>)
 80060d0:	f881 3026 	strb.w	r3, [r1, #38]	; 0x26
	comm[39] = (int)((stnd_x%100)/10) + 48;
 80060d4:	2564      	movs	r5, #100	; 0x64
 80060d6:	fb05 6310 	mls	r3, r5, r0, r6
 80060da:	483b      	ldr	r0, [pc, #236]	; (80061c8 <format_accel+0x17c>)
 80060dc:	fb80 e703 	smull	lr, r7, r0, r3
 80060e0:	17db      	asrs	r3, r3, #31
 80060e2:	ebc3 03a7 	rsb	r3, r3, r7, asr #2
 80060e6:	3330      	adds	r3, #48	; 0x30
 80060e8:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
	comm[40] = stnd_x%10 + 48;
 80060ec:	fb80 7306 	smull	r7, r3, r0, r6
 80060f0:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 80060f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80060f8:	0053      	lsls	r3, r2, #1
 80060fa:	1af2      	subs	r2, r6, r3
 80060fc:	3230      	adds	r2, #48	; 0x30
 80060fe:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28

	comm[43] = (int)(stnd_y/100) + 48;
 8006102:	4b2e      	ldr	r3, [pc, #184]	; (80061bc <format_accel+0x170>)
 8006104:	681e      	ldr	r6, [r3, #0]
 8006106:	fb84 3706 	smull	r3, r7, r4, r6
 800610a:	17f2      	asrs	r2, r6, #31
 800610c:	ebc2 1767 	rsb	r7, r2, r7, asr #5
 8006110:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006114:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
	comm[44] = (int)((stnd_y%100)/10) + 48;
 8006118:	fb05 6317 	mls	r3, r5, r7, r6
 800611c:	fb80 e703 	smull	lr, r7, r0, r3
 8006120:	17db      	asrs	r3, r3, #31
 8006122:	ebc3 03a7 	rsb	r3, r3, r7, asr #2
 8006126:	3330      	adds	r3, #48	; 0x30
 8006128:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
	comm[45] = stnd_y%10 + 48;
 800612c:	fb80 7306 	smull	r7, r3, r0, r6
 8006130:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 8006134:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006138:	0053      	lsls	r3, r2, #1
 800613a:	1af2      	subs	r2, r6, r3
 800613c:	3230      	adds	r2, #48	; 0x30
 800613e:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d

	comm[48] = (int)(stnd_z/100) + 48;
 8006142:	4b1f      	ldr	r3, [pc, #124]	; (80061c0 <format_accel+0x174>)
 8006144:	681e      	ldr	r6, [r3, #0]
 8006146:	fb84 3406 	smull	r3, r4, r4, r6
 800614a:	17f3      	asrs	r3, r6, #31
 800614c:	ebc3 1464 	rsb	r4, r3, r4, asr #5
 8006150:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8006154:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
	comm[49] = (int)((stnd_z%100)/10) + 48;
 8006158:	fb05 6214 	mls	r2, r5, r4, r6
 800615c:	fb80 5402 	smull	r5, r4, r0, r2
 8006160:	17d2      	asrs	r2, r2, #31
 8006162:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 8006166:	3230      	adds	r2, #48	; 0x30
 8006168:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
	comm[50] = stnd_z%10 + 48;
 800616c:	fb80 2006 	smull	r2, r0, r0, r6
 8006170:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 8006174:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006178:	005a      	lsls	r2, r3, #1
 800617a:	1ab3      	subs	r3, r6, r2
 800617c:	3330      	adds	r3, #48	; 0x30
 800617e:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
 8006182:	bdf0      	pop	{r4, r5, r6, r7, pc}
		comm[37] = '-';
 8006184:	212d      	movs	r1, #45	; 0x2d
 8006186:	4a0c      	ldr	r2, [pc, #48]	; (80061b8 <format_accel+0x16c>)
 8006188:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
		stnd_x = -1*stnd_x;
 800618c:	425b      	negs	r3, r3
 800618e:	4a09      	ldr	r2, [pc, #36]	; (80061b4 <format_accel+0x168>)
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	e765      	b.n	8006060 <format_accel+0x14>
		comm[42] = '-';
 8006194:	212d      	movs	r1, #45	; 0x2d
 8006196:	4a08      	ldr	r2, [pc, #32]	; (80061b8 <format_accel+0x16c>)
 8006198:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
		stnd_y = -1*stnd_y;
 800619c:	425b      	negs	r3, r3
 800619e:	4a07      	ldr	r2, [pc, #28]	; (80061bc <format_accel+0x170>)
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	e766      	b.n	8006072 <format_accel+0x26>
		comm[47] = '-';
 80061a4:	212d      	movs	r1, #45	; 0x2d
 80061a6:	4a04      	ldr	r2, [pc, #16]	; (80061b8 <format_accel+0x16c>)
 80061a8:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
		stnd_z = -1*stnd_z;
 80061ac:	425b      	negs	r3, r3
 80061ae:	4a04      	ldr	r2, [pc, #16]	; (80061c0 <format_accel+0x174>)
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	e767      	b.n	8006084 <format_accel+0x38>
 80061b4:	2000055c 	.word	0x2000055c
 80061b8:	20000010 	.word	0x20000010
 80061bc:	20000650 	.word	0x20000650
 80061c0:	20000558 	.word	0x20000558
 80061c4:	51eb851f 	.word	0x51eb851f
 80061c8:	66666667 	.word	0x66666667

080061cc <display>:
{
 80061cc:	b538      	push	{r3, r4, r5, lr}
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data, 1);
 80061ce:	2201      	movs	r2, #1
 80061d0:	4920      	ldr	r1, [pc, #128]	; (8006254 <display+0x88>)
 80061d2:	4821      	ldr	r0, [pc, #132]	; (8006258 <display+0x8c>)
 80061d4:	f7fd f8bb 	bl	800334e <HAL_UART_Receive_IT>
	if(one_sec_msg == true)
 80061d8:	4b20      	ldr	r3, [pc, #128]	; (800625c <display+0x90>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	b903      	cbnz	r3, 80061e0 <display+0x14>
 80061de:	bd38      	pop	{r3, r4, r5, pc}
			++count;
 80061e0:	4a1f      	ldr	r2, [pc, #124]	; (8006260 <display+0x94>)
 80061e2:	6813      	ldr	r3, [r2, #0]
 80061e4:	3301      	adds	r3, #1
 80061e6:	6013      	str	r3, [r2, #0]
			stream_sensor_data_forced_mode(&dev);
 80061e8:	481e      	ldr	r0, [pc, #120]	; (8006264 <display+0x98>)
 80061ea:	f7ff fced 	bl	8005bc8 <stream_sensor_data_forced_mode>
			stream_accelerometer_data();
 80061ee:	f7ff fe35 	bl	8005e5c <stream_accelerometer_data>
			standardize_accel();
 80061f2:	f7ff fe69 	bl	8005ec8 <standardize_accel>
			avg_curr = tot_curr/sample;
 80061f6:	4d1c      	ldr	r5, [pc, #112]	; (8006268 <display+0x9c>)
 80061f8:	4c1c      	ldr	r4, [pc, #112]	; (800626c <display+0xa0>)
 80061fa:	6820      	ldr	r0, [r4, #0]
 80061fc:	f7fa f93e 	bl	800047c <__aeabi_i2d>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006208:	f7fa fac8 	bl	800079c <__aeabi_ddiv>
 800620c:	4b18      	ldr	r3, [pc, #96]	; (8006270 <display+0xa4>)
 800620e:	e9c3 0100 	strd	r0, r1, [r3]
			tot_curr = 0;
 8006212:	2200      	movs	r2, #0
 8006214:	2300      	movs	r3, #0
 8006216:	e9c5 2300 	strd	r2, r3, [r5]
			sample = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	6023      	str	r3, [r4, #0]
			format_count();
 800621e:	f7ff f83f 	bl	80052a0 <format_count>
			format_power();
 8006222:	f7ff f8eb 	bl	80053fc <format_power>
			format_bme280();
 8006226:	f7ff fd63 	bl	8005cf0 <format_bme280>
			format_accel();
 800622a:	f7ff ff0f 	bl	800604c <format_accel>
			if(burn == false)
 800622e:	4b11      	ldr	r3, [pc, #68]	; (8006274 <display+0xa8>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	b163      	cbz	r3, 800624e <display+0x82>
			lcd_out();
 8006234:	f7ff fc8a 	bl	8005b4c <lcd_out>
			HAL_UART_Transmit(&huart1, (uint8_t*)comm, 91, 1000);
 8006238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800623c:	225b      	movs	r2, #91	; 0x5b
 800623e:	490e      	ldr	r1, [pc, #56]	; (8006278 <display+0xac>)
 8006240:	4805      	ldr	r0, [pc, #20]	; (8006258 <display+0x8c>)
 8006242:	f7fd fa58 	bl	80036f6 <HAL_UART_Transmit>
			one_sec_msg = false;
 8006246:	2200      	movs	r2, #0
 8006248:	4b04      	ldr	r3, [pc, #16]	; (800625c <display+0x90>)
 800624a:	701a      	strb	r2, [r3, #0]
}
 800624c:	e7c7      	b.n	80061de <display+0x12>
				burn_signal();
 800624e:	f7ff f98f 	bl	8005570 <burn_signal>
 8006252:	e7ef      	b.n	8006234 <display+0x68>
 8006254:	200005dd 	.word	0x200005dd
 8006258:	20000428 	.word	0x20000428
 800625c:	20000328 	.word	0x20000328
 8006260:	200002c4 	.word	0x200002c4
 8006264:	200004e0 	.word	0x200004e0
 8006268:	20000360 	.word	0x20000360
 800626c:	20000350 	.word	0x20000350
 8006270:	200002b0 	.word	0x200002b0
 8006274:	200002b8 	.word	0x200002b8
 8006278:	20000010 	.word	0x20000010

0800627c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800627c:	b500      	push	{lr}
 800627e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006280:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <HAL_MspInit+0x48>)
 8006282:	699a      	ldr	r2, [r3, #24]
 8006284:	f042 0201 	orr.w	r2, r2, #1
 8006288:	619a      	str	r2, [r3, #24]
 800628a:	699a      	ldr	r2, [r3, #24]
 800628c:	f002 0201 	and.w	r2, r2, #1
 8006290:	9200      	str	r2, [sp, #0]
 8006292:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006294:	69da      	ldr	r2, [r3, #28]
 8006296:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800629a:	61da      	str	r2, [r3, #28]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80062a6:	2007      	movs	r0, #7
 80062a8:	f7fb f9fa 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80062ac:	2200      	movs	r2, #0
 80062ae:	4611      	mov	r1, r2
 80062b0:	2051      	movs	r0, #81	; 0x51
 80062b2:	f7fb fa07 	bl	80016c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80062b6:	2051      	movs	r0, #81	; 0x51
 80062b8:	f7fb fa36 	bl	8001728 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062bc:	b003      	add	sp, #12
 80062be:	f85d fb04 	ldr.w	pc, [sp], #4
 80062c2:	bf00      	nop
 80062c4:	40021000 	.word	0x40021000

080062c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80062c8:	b500      	push	{lr}
 80062ca:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062cc:	2300      	movs	r3, #0
 80062ce:	9303      	str	r3, [sp, #12]
 80062d0:	9304      	str	r3, [sp, #16]
 80062d2:	9305      	str	r3, [sp, #20]
 80062d4:	9306      	str	r3, [sp, #24]
 80062d6:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80062d8:	6803      	ldr	r3, [r0, #0]
 80062da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062de:	d002      	beq.n	80062e6 <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80062e0:	b009      	add	sp, #36	; 0x24
 80062e2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC12_CLK_ENABLE();
 80062e6:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80062ea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80062ee:	695a      	ldr	r2, [r3, #20]
 80062f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80062f4:	615a      	str	r2, [r3, #20]
 80062f6:	695a      	ldr	r2, [r3, #20]
 80062f8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80062fc:	9201      	str	r2, [sp, #4]
 80062fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006300:	695a      	ldr	r2, [r3, #20]
 8006302:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006306:	615a      	str	r2, [r3, #20]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630e:	9302      	str	r3, [sp, #8]
 8006310:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006312:	2303      	movs	r3, #3
 8006314:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006316:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006318:	a903      	add	r1, sp, #12
 800631a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800631e:	f7fb fa4b 	bl	80017b8 <HAL_GPIO_Init>
}
 8006322:	e7dd      	b.n	80062e0 <HAL_ADC_MspInit+0x18>

08006324 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006324:	b510      	push	{r4, lr}
 8006326:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006328:	2300      	movs	r3, #0
 800632a:	9303      	str	r3, [sp, #12]
 800632c:	9304      	str	r3, [sp, #16]
 800632e:	9305      	str	r3, [sp, #20]
 8006330:	9306      	str	r3, [sp, #24]
 8006332:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8006334:	6802      	ldr	r2, [r0, #0]
 8006336:	4b13      	ldr	r3, [pc, #76]	; (8006384 <HAL_I2C_MspInit+0x60>)
 8006338:	429a      	cmp	r2, r3
 800633a:	d001      	beq.n	8006340 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800633c:	b008      	add	sp, #32
 800633e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006340:	4c11      	ldr	r4, [pc, #68]	; (8006388 <HAL_I2C_MspInit+0x64>)
 8006342:	6963      	ldr	r3, [r4, #20]
 8006344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006348:	6163      	str	r3, [r4, #20]
 800634a:	6963      	ldr	r3, [r4, #20]
 800634c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006354:	23c0      	movs	r3, #192	; 0xc0
 8006356:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006358:	2312      	movs	r3, #18
 800635a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800635c:	2301      	movs	r3, #1
 800635e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006360:	2303      	movs	r3, #3
 8006362:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006364:	2304      	movs	r3, #4
 8006366:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006368:	a903      	add	r1, sp, #12
 800636a:	4808      	ldr	r0, [pc, #32]	; (800638c <HAL_I2C_MspInit+0x68>)
 800636c:	f7fb fa24 	bl	80017b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006370:	69e3      	ldr	r3, [r4, #28]
 8006372:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006376:	61e3      	str	r3, [r4, #28]
 8006378:	69e3      	ldr	r3, [r4, #28]
 800637a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800637e:	9302      	str	r3, [sp, #8]
 8006380:	9b02      	ldr	r3, [sp, #8]
}
 8006382:	e7db      	b.n	800633c <HAL_I2C_MspInit+0x18>
 8006384:	40005400 	.word	0x40005400
 8006388:	40021000 	.word	0x40021000
 800638c:	48000400 	.word	0x48000400

08006390 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8006390:	6802      	ldr	r2, [r0, #0]
 8006392:	4b0e      	ldr	r3, [pc, #56]	; (80063cc <HAL_TIM_Base_MspInit+0x3c>)
 8006394:	429a      	cmp	r2, r3
 8006396:	d000      	beq.n	800639a <HAL_TIM_Base_MspInit+0xa>
 8006398:	4770      	bx	lr
{
 800639a:	b500      	push	{lr}
 800639c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800639e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80063a2:	69da      	ldr	r2, [r3, #28]
 80063a4:	f042 0210 	orr.w	r2, r2, #16
 80063a8:	61da      	str	r2, [r3, #28]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	f003 0310 	and.w	r3, r3, #16
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80063b4:	2200      	movs	r2, #0
 80063b6:	4611      	mov	r1, r2
 80063b8:	2036      	movs	r0, #54	; 0x36
 80063ba:	f7fb f983 	bl	80016c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80063be:	2036      	movs	r0, #54	; 0x36
 80063c0:	f7fb f9b2 	bl	8001728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80063c4:	b003      	add	sp, #12
 80063c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80063ca:	bf00      	nop
 80063cc:	40001000 	.word	0x40001000

080063d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80063d0:	b500      	push	{lr}
 80063d2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063d4:	2300      	movs	r3, #0
 80063d6:	9303      	str	r3, [sp, #12]
 80063d8:	9304      	str	r3, [sp, #16]
 80063da:	9305      	str	r3, [sp, #20]
 80063dc:	9306      	str	r3, [sp, #24]
 80063de:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80063e0:	6802      	ldr	r2, [r0, #0]
 80063e2:	4b17      	ldr	r3, [pc, #92]	; (8006440 <HAL_UART_MspInit+0x70>)
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d002      	beq.n	80063ee <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80063e8:	b009      	add	sp, #36	; 0x24
 80063ea:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80063ee:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80063f2:	699a      	ldr	r2, [r3, #24]
 80063f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063f8:	619a      	str	r2, [r3, #24]
 80063fa:	699a      	ldr	r2, [r3, #24]
 80063fc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006400:	9201      	str	r2, [sp, #4]
 8006402:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006404:	695a      	ldr	r2, [r3, #20]
 8006406:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800640a:	615a      	str	r2, [r3, #20]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006412:	9302      	str	r3, [sp, #8]
 8006414:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006416:	2330      	movs	r3, #48	; 0x30
 8006418:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800641a:	2302      	movs	r3, #2
 800641c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800641e:	2303      	movs	r3, #3
 8006420:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006422:	2307      	movs	r3, #7
 8006424:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006426:	a903      	add	r1, sp, #12
 8006428:	4806      	ldr	r0, [pc, #24]	; (8006444 <HAL_UART_MspInit+0x74>)
 800642a:	f7fb f9c5 	bl	80017b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800642e:	2200      	movs	r2, #0
 8006430:	4611      	mov	r1, r2
 8006432:	2025      	movs	r0, #37	; 0x25
 8006434:	f7fb f946 	bl	80016c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006438:	2025      	movs	r0, #37	; 0x25
 800643a:	f7fb f975 	bl	8001728 <HAL_NVIC_EnableIRQ>
}
 800643e:	e7d3      	b.n	80063e8 <HAL_UART_MspInit+0x18>
 8006440:	40013800 	.word	0x40013800
 8006444:	48000800 	.word	0x48000800

08006448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006448:	4770      	bx	lr

0800644a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800644a:	e7fe      	b.n	800644a <HardFault_Handler>

0800644c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800644c:	e7fe      	b.n	800644c <MemManage_Handler>

0800644e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800644e:	e7fe      	b.n	800644e <BusFault_Handler>

08006450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006450:	e7fe      	b.n	8006450 <UsageFault_Handler>

08006452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006452:	4770      	bx	lr

08006454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006454:	4770      	bx	lr

08006456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006456:	4770      	bx	lr

08006458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006458:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800645a:	f7fa fbf5 	bl	8000c48 <HAL_IncTick>
 800645e:	bd08      	pop	{r3, pc}

08006460 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8006460:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006462:	4802      	ldr	r0, [pc, #8]	; (800646c <USART1_IRQHandler+0xc>)
 8006464:	f7fd faa0 	bl	80039a8 <HAL_UART_IRQHandler>
 8006468:	bd08      	pop	{r3, pc}
 800646a:	bf00      	nop
 800646c:	20000428 	.word	0x20000428

08006470 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8006470:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006472:	4802      	ldr	r0, [pc, #8]	; (800647c <TIM6_DAC1_IRQHandler+0xc>)
 8006474:	f7fc fe00 	bl	8003078 <HAL_TIM_IRQHandler>
 8006478:	bd08      	pop	{r3, pc}
 800647a:	bf00      	nop
 800647c:	20000498 	.word	0x20000498

08006480 <FPU_IRQHandler>:

/**
  * @brief This function handles Floating point unit interrupt.
  */
void FPU_IRQHandler(void)
{
 8006480:	4770      	bx	lr
	...

08006484 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8006484:	b508      	push	{r3, lr}
 8006486:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006488:	4a0b      	ldr	r2, [pc, #44]	; (80064b8 <_sbrk+0x34>)
 800648a:	6812      	ldr	r2, [r2, #0]
 800648c:	b142      	cbz	r2, 80064a0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800648e:	4a0a      	ldr	r2, [pc, #40]	; (80064b8 <_sbrk+0x34>)
 8006490:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8006492:	4403      	add	r3, r0
 8006494:	466a      	mov	r2, sp
 8006496:	4293      	cmp	r3, r2
 8006498:	d806      	bhi.n	80064a8 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800649a:	4a07      	ldr	r2, [pc, #28]	; (80064b8 <_sbrk+0x34>)
 800649c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800649e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80064a0:	4906      	ldr	r1, [pc, #24]	; (80064bc <_sbrk+0x38>)
 80064a2:	4a05      	ldr	r2, [pc, #20]	; (80064b8 <_sbrk+0x34>)
 80064a4:	6011      	str	r1, [r2, #0]
 80064a6:	e7f2      	b.n	800648e <_sbrk+0xa>
		errno = ENOMEM;
 80064a8:	f000 f86a 	bl	8006580 <__errno>
 80064ac:	230c      	movs	r3, #12
 80064ae:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80064b0:	f04f 30ff 	mov.w	r0, #4294967295
 80064b4:	bd08      	pop	{r3, pc}
 80064b6:	bf00      	nop
 80064b8:	20000378 	.word	0x20000378
 80064bc:	200002da 	.word	0x200002da

080064c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064c0:	4915      	ldr	r1, [pc, #84]	; (8006518 <SystemInit+0x58>)
 80064c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80064c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80064ce:	4b13      	ldr	r3, [pc, #76]	; (800651c <SystemInit+0x5c>)
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80064d8:	6858      	ldr	r0, [r3, #4]
 80064da:	4a11      	ldr	r2, [pc, #68]	; (8006520 <SystemInit+0x60>)
 80064dc:	4002      	ands	r2, r0
 80064de:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80064e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80064ea:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80064f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80064fa:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80064fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fe:	f022 020f 	bic.w	r2, r2, #15
 8006502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8006504:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006506:	4a07      	ldr	r2, [pc, #28]	; (8006524 <SystemInit+0x64>)
 8006508:	4002      	ands	r2, r0
 800650a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800650c:	2200      	movs	r2, #0
 800650e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006510:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006514:	608b      	str	r3, [r1, #8]
 8006516:	4770      	bx	lr
 8006518:	e000ed00 	.word	0xe000ed00
 800651c:	40021000 	.word	0x40021000
 8006520:	f87fc00c 	.word	0xf87fc00c
 8006524:	ff00fccc 	.word	0xff00fccc

08006528 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006560 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800652c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800652e:	e003      	b.n	8006538 <LoopCopyDataInit>

08006530 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006530:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006532:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006534:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006536:	3104      	adds	r1, #4

08006538 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006538:	480b      	ldr	r0, [pc, #44]	; (8006568 <LoopForever+0xa>)
	ldr	r3, =_edata
 800653a:	4b0c      	ldr	r3, [pc, #48]	; (800656c <LoopForever+0xe>)
	adds	r2, r0, r1
 800653c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800653e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006540:	d3f6      	bcc.n	8006530 <CopyDataInit>
	ldr	r2, =_sbss
 8006542:	4a0b      	ldr	r2, [pc, #44]	; (8006570 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006544:	e002      	b.n	800654c <LoopFillZerobss>

08006546 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006546:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006548:	f842 3b04 	str.w	r3, [r2], #4

0800654c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800654c:	4b09      	ldr	r3, [pc, #36]	; (8006574 <LoopForever+0x16>)
	cmp	r2, r3
 800654e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006550:	d3f9      	bcc.n	8006546 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006552:	f7ff ffb5 	bl	80064c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006556:	f000 f819 	bl	800658c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800655a:	f7fe fafc 	bl	8004b56 <main>

0800655e <LoopForever>:

LoopForever:
    b LoopForever
 800655e:	e7fe      	b.n	800655e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006560:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8006564:	080098e0 	.word	0x080098e0
	ldr	r0, =_sdata
 8006568:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800656c:	20000244 	.word	0x20000244
	ldr	r2, =_sbss
 8006570:	20000248 	.word	0x20000248
	ldr	r3, = _ebss
 8006574:	2000065c 	.word	0x2000065c

08006578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006578:	e7fe      	b.n	8006578 <ADC1_2_IRQHandler>

0800657a <atof>:
 800657a:	2100      	movs	r1, #0
 800657c:	f000 be78 	b.w	8007270 <strtod>

08006580 <__errno>:
 8006580:	4b01      	ldr	r3, [pc, #4]	; (8006588 <__errno+0x8>)
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20000070 	.word	0x20000070

0800658c <__libc_init_array>:
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	4e0d      	ldr	r6, [pc, #52]	; (80065c4 <__libc_init_array+0x38>)
 8006590:	4c0d      	ldr	r4, [pc, #52]	; (80065c8 <__libc_init_array+0x3c>)
 8006592:	1ba4      	subs	r4, r4, r6
 8006594:	10a4      	asrs	r4, r4, #2
 8006596:	2500      	movs	r5, #0
 8006598:	42a5      	cmp	r5, r4
 800659a:	d109      	bne.n	80065b0 <__libc_init_array+0x24>
 800659c:	4e0b      	ldr	r6, [pc, #44]	; (80065cc <__libc_init_array+0x40>)
 800659e:	4c0c      	ldr	r4, [pc, #48]	; (80065d0 <__libc_init_array+0x44>)
 80065a0:	f003 f812 	bl	80095c8 <_init>
 80065a4:	1ba4      	subs	r4, r4, r6
 80065a6:	10a4      	asrs	r4, r4, #2
 80065a8:	2500      	movs	r5, #0
 80065aa:	42a5      	cmp	r5, r4
 80065ac:	d105      	bne.n	80065ba <__libc_init_array+0x2e>
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065b4:	4798      	blx	r3
 80065b6:	3501      	adds	r5, #1
 80065b8:	e7ee      	b.n	8006598 <__libc_init_array+0xc>
 80065ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065be:	4798      	blx	r3
 80065c0:	3501      	adds	r5, #1
 80065c2:	e7f2      	b.n	80065aa <__libc_init_array+0x1e>
 80065c4:	080098d8 	.word	0x080098d8
 80065c8:	080098d8 	.word	0x080098d8
 80065cc:	080098d8 	.word	0x080098d8
 80065d0:	080098dc 	.word	0x080098dc

080065d4 <memset>:
 80065d4:	4402      	add	r2, r0
 80065d6:	4603      	mov	r3, r0
 80065d8:	4293      	cmp	r3, r2
 80065da:	d100      	bne.n	80065de <memset+0xa>
 80065dc:	4770      	bx	lr
 80065de:	f803 1b01 	strb.w	r1, [r3], #1
 80065e2:	e7f9      	b.n	80065d8 <memset+0x4>

080065e4 <strchr>:
 80065e4:	b2c9      	uxtb	r1, r1
 80065e6:	4603      	mov	r3, r0
 80065e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ec:	b11a      	cbz	r2, 80065f6 <strchr+0x12>
 80065ee:	4291      	cmp	r1, r2
 80065f0:	d1f9      	bne.n	80065e6 <strchr+0x2>
 80065f2:	4618      	mov	r0, r3
 80065f4:	4770      	bx	lr
 80065f6:	2900      	cmp	r1, #0
 80065f8:	bf0c      	ite	eq
 80065fa:	4618      	moveq	r0, r3
 80065fc:	2000      	movne	r0, #0
 80065fe:	4770      	bx	lr

08006600 <strcpy>:
 8006600:	4603      	mov	r3, r0
 8006602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006606:	f803 2b01 	strb.w	r2, [r3], #1
 800660a:	2a00      	cmp	r2, #0
 800660c:	d1f9      	bne.n	8006602 <strcpy+0x2>
 800660e:	4770      	bx	lr

08006610 <strncpy>:
 8006610:	b570      	push	{r4, r5, r6, lr}
 8006612:	4604      	mov	r4, r0
 8006614:	b902      	cbnz	r2, 8006618 <strncpy+0x8>
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	4623      	mov	r3, r4
 800661a:	f811 5b01 	ldrb.w	r5, [r1], #1
 800661e:	f803 5b01 	strb.w	r5, [r3], #1
 8006622:	1e56      	subs	r6, r2, #1
 8006624:	b91d      	cbnz	r5, 800662e <strncpy+0x1e>
 8006626:	4414      	add	r4, r2
 8006628:	42a3      	cmp	r3, r4
 800662a:	d103      	bne.n	8006634 <strncpy+0x24>
 800662c:	bd70      	pop	{r4, r5, r6, pc}
 800662e:	461c      	mov	r4, r3
 8006630:	4632      	mov	r2, r6
 8006632:	e7ef      	b.n	8006614 <strncpy+0x4>
 8006634:	f803 5b01 	strb.w	r5, [r3], #1
 8006638:	e7f6      	b.n	8006628 <strncpy+0x18>

0800663a <strrchr>:
 800663a:	b538      	push	{r3, r4, r5, lr}
 800663c:	4603      	mov	r3, r0
 800663e:	460d      	mov	r5, r1
 8006640:	b151      	cbz	r1, 8006658 <strrchr+0x1e>
 8006642:	2400      	movs	r4, #0
 8006644:	4629      	mov	r1, r5
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff ffcc 	bl	80065e4 <strchr>
 800664c:	b908      	cbnz	r0, 8006652 <strrchr+0x18>
 800664e:	4620      	mov	r0, r4
 8006650:	bd38      	pop	{r3, r4, r5, pc}
 8006652:	1c43      	adds	r3, r0, #1
 8006654:	4604      	mov	r4, r0
 8006656:	e7f5      	b.n	8006644 <strrchr+0xa>
 8006658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800665c:	f7ff bfc2 	b.w	80065e4 <strchr>

08006660 <sulp>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	4604      	mov	r4, r0
 8006664:	460d      	mov	r5, r1
 8006666:	ec45 4b10 	vmov	d0, r4, r5
 800666a:	4616      	mov	r6, r2
 800666c:	f001 fcaa 	bl	8007fc4 <__ulp>
 8006670:	ec51 0b10 	vmov	r0, r1, d0
 8006674:	b17e      	cbz	r6, 8006696 <sulp+0x36>
 8006676:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800667a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800667e:	2b00      	cmp	r3, #0
 8006680:	dd09      	ble.n	8006696 <sulp+0x36>
 8006682:	051b      	lsls	r3, r3, #20
 8006684:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006688:	2400      	movs	r4, #0
 800668a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800668e:	4622      	mov	r2, r4
 8006690:	462b      	mov	r3, r5
 8006692:	f7f9 ff59 	bl	8000548 <__aeabi_dmul>
 8006696:	bd70      	pop	{r4, r5, r6, pc}

08006698 <_strtod_l>:
 8006698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	b09f      	sub	sp, #124	; 0x7c
 800669e:	4698      	mov	r8, r3
 80066a0:	9004      	str	r0, [sp, #16]
 80066a2:	2300      	movs	r3, #0
 80066a4:	4640      	mov	r0, r8
 80066a6:	460c      	mov	r4, r1
 80066a8:	9215      	str	r2, [sp, #84]	; 0x54
 80066aa:	931a      	str	r3, [sp, #104]	; 0x68
 80066ac:	f001 f9aa 	bl	8007a04 <__localeconv_l>
 80066b0:	4607      	mov	r7, r0
 80066b2:	6800      	ldr	r0, [r0, #0]
 80066b4:	f7f9 fd88 	bl	80001c8 <strlen>
 80066b8:	f04f 0a00 	mov.w	sl, #0
 80066bc:	4605      	mov	r5, r0
 80066be:	f04f 0b00 	mov.w	fp, #0
 80066c2:	9419      	str	r4, [sp, #100]	; 0x64
 80066c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066c6:	781a      	ldrb	r2, [r3, #0]
 80066c8:	2a0d      	cmp	r2, #13
 80066ca:	d833      	bhi.n	8006734 <_strtod_l+0x9c>
 80066cc:	2a09      	cmp	r2, #9
 80066ce:	d237      	bcs.n	8006740 <_strtod_l+0xa8>
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	d03f      	beq.n	8006754 <_strtod_l+0xbc>
 80066d4:	2300      	movs	r3, #0
 80066d6:	9309      	str	r3, [sp, #36]	; 0x24
 80066d8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80066da:	7833      	ldrb	r3, [r6, #0]
 80066dc:	2b30      	cmp	r3, #48	; 0x30
 80066de:	f040 8103 	bne.w	80068e8 <_strtod_l+0x250>
 80066e2:	7873      	ldrb	r3, [r6, #1]
 80066e4:	2b58      	cmp	r3, #88	; 0x58
 80066e6:	d001      	beq.n	80066ec <_strtod_l+0x54>
 80066e8:	2b78      	cmp	r3, #120	; 0x78
 80066ea:	d16b      	bne.n	80067c4 <_strtod_l+0x12c>
 80066ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	ab1a      	add	r3, sp, #104	; 0x68
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	f8cd 8008 	str.w	r8, [sp, #8]
 80066f8:	ab1b      	add	r3, sp, #108	; 0x6c
 80066fa:	4aad      	ldr	r2, [pc, #692]	; (80069b0 <_strtod_l+0x318>)
 80066fc:	9804      	ldr	r0, [sp, #16]
 80066fe:	a919      	add	r1, sp, #100	; 0x64
 8006700:	f000 feaa 	bl	8007458 <__gethex>
 8006704:	f010 0407 	ands.w	r4, r0, #7
 8006708:	4605      	mov	r5, r0
 800670a:	d005      	beq.n	8006718 <_strtod_l+0x80>
 800670c:	2c06      	cmp	r4, #6
 800670e:	d12b      	bne.n	8006768 <_strtod_l+0xd0>
 8006710:	3601      	adds	r6, #1
 8006712:	2300      	movs	r3, #0
 8006714:	9619      	str	r6, [sp, #100]	; 0x64
 8006716:	9309      	str	r3, [sp, #36]	; 0x24
 8006718:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800671a:	2b00      	cmp	r3, #0
 800671c:	f040 8590 	bne.w	8007240 <_strtod_l+0xba8>
 8006720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006722:	b1e3      	cbz	r3, 800675e <_strtod_l+0xc6>
 8006724:	4652      	mov	r2, sl
 8006726:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800672a:	ec43 2b10 	vmov	d0, r2, r3
 800672e:	b01f      	add	sp, #124	; 0x7c
 8006730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006734:	2a2b      	cmp	r2, #43	; 0x2b
 8006736:	d006      	beq.n	8006746 <_strtod_l+0xae>
 8006738:	2a2d      	cmp	r2, #45	; 0x2d
 800673a:	d013      	beq.n	8006764 <_strtod_l+0xcc>
 800673c:	2a20      	cmp	r2, #32
 800673e:	d1c9      	bne.n	80066d4 <_strtod_l+0x3c>
 8006740:	3301      	adds	r3, #1
 8006742:	9319      	str	r3, [sp, #100]	; 0x64
 8006744:	e7be      	b.n	80066c4 <_strtod_l+0x2c>
 8006746:	2200      	movs	r2, #0
 8006748:	9209      	str	r2, [sp, #36]	; 0x24
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	9219      	str	r2, [sp, #100]	; 0x64
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1c1      	bne.n	80066d8 <_strtod_l+0x40>
 8006754:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006756:	9419      	str	r4, [sp, #100]	; 0x64
 8006758:	2b00      	cmp	r3, #0
 800675a:	f040 856f 	bne.w	800723c <_strtod_l+0xba4>
 800675e:	4652      	mov	r2, sl
 8006760:	465b      	mov	r3, fp
 8006762:	e7e2      	b.n	800672a <_strtod_l+0x92>
 8006764:	2201      	movs	r2, #1
 8006766:	e7ef      	b.n	8006748 <_strtod_l+0xb0>
 8006768:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800676a:	b13a      	cbz	r2, 800677c <_strtod_l+0xe4>
 800676c:	2135      	movs	r1, #53	; 0x35
 800676e:	a81c      	add	r0, sp, #112	; 0x70
 8006770:	f001 fd19 	bl	80081a6 <__copybits>
 8006774:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006776:	9804      	ldr	r0, [sp, #16]
 8006778:	f001 f997 	bl	8007aaa <_Bfree>
 800677c:	3c01      	subs	r4, #1
 800677e:	2c04      	cmp	r4, #4
 8006780:	d808      	bhi.n	8006794 <_strtod_l+0xfc>
 8006782:	e8df f004 	tbb	[pc, r4]
 8006786:	030c      	.short	0x030c
 8006788:	1a17      	.short	0x1a17
 800678a:	0c          	.byte	0x0c
 800678b:	00          	.byte	0x00
 800678c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8006790:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8006794:	0729      	lsls	r1, r5, #28
 8006796:	d5bf      	bpl.n	8006718 <_strtod_l+0x80>
 8006798:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800679c:	e7bc      	b.n	8006718 <_strtod_l+0x80>
 800679e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067a0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80067a2:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80067a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80067aa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80067ae:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80067b2:	e7ef      	b.n	8006794 <_strtod_l+0xfc>
 80067b4:	f8df b204 	ldr.w	fp, [pc, #516]	; 80069bc <_strtod_l+0x324>
 80067b8:	e7ec      	b.n	8006794 <_strtod_l+0xfc>
 80067ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80067be:	f04f 3aff 	mov.w	sl, #4294967295
 80067c2:	e7e7      	b.n	8006794 <_strtod_l+0xfc>
 80067c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	9219      	str	r2, [sp, #100]	; 0x64
 80067ca:	785b      	ldrb	r3, [r3, #1]
 80067cc:	2b30      	cmp	r3, #48	; 0x30
 80067ce:	d0f9      	beq.n	80067c4 <_strtod_l+0x12c>
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0a1      	beq.n	8006718 <_strtod_l+0x80>
 80067d4:	2301      	movs	r3, #1
 80067d6:	f04f 0900 	mov.w	r9, #0
 80067da:	9308      	str	r3, [sp, #32]
 80067dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067de:	930a      	str	r3, [sp, #40]	; 0x28
 80067e0:	f8cd 901c 	str.w	r9, [sp, #28]
 80067e4:	f8cd 9018 	str.w	r9, [sp, #24]
 80067e8:	220a      	movs	r2, #10
 80067ea:	9819      	ldr	r0, [sp, #100]	; 0x64
 80067ec:	7806      	ldrb	r6, [r0, #0]
 80067ee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80067f2:	b2d9      	uxtb	r1, r3
 80067f4:	2909      	cmp	r1, #9
 80067f6:	d979      	bls.n	80068ec <_strtod_l+0x254>
 80067f8:	462a      	mov	r2, r5
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	f001 fd8a 	bl	8008314 <strncmp>
 8006800:	2800      	cmp	r0, #0
 8006802:	f000 8082 	beq.w	800690a <_strtod_l+0x272>
 8006806:	2000      	movs	r0, #0
 8006808:	9d06      	ldr	r5, [sp, #24]
 800680a:	4633      	mov	r3, r6
 800680c:	4602      	mov	r2, r0
 800680e:	4601      	mov	r1, r0
 8006810:	2b65      	cmp	r3, #101	; 0x65
 8006812:	d002      	beq.n	800681a <_strtod_l+0x182>
 8006814:	2b45      	cmp	r3, #69	; 0x45
 8006816:	f040 80e8 	bne.w	80069ea <_strtod_l+0x352>
 800681a:	b925      	cbnz	r5, 8006826 <_strtod_l+0x18e>
 800681c:	b910      	cbnz	r0, 8006824 <_strtod_l+0x18c>
 800681e:	9b08      	ldr	r3, [sp, #32]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d097      	beq.n	8006754 <_strtod_l+0xbc>
 8006824:	2500      	movs	r5, #0
 8006826:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8006828:	1c63      	adds	r3, r4, #1
 800682a:	9319      	str	r3, [sp, #100]	; 0x64
 800682c:	7863      	ldrb	r3, [r4, #1]
 800682e:	2b2b      	cmp	r3, #43	; 0x2b
 8006830:	f000 80c8 	beq.w	80069c4 <_strtod_l+0x32c>
 8006834:	2b2d      	cmp	r3, #45	; 0x2d
 8006836:	f000 80cb 	beq.w	80069d0 <_strtod_l+0x338>
 800683a:	2600      	movs	r6, #0
 800683c:	9605      	str	r6, [sp, #20]
 800683e:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006842:	2e09      	cmp	r6, #9
 8006844:	f200 80d0 	bhi.w	80069e8 <_strtod_l+0x350>
 8006848:	2b30      	cmp	r3, #48	; 0x30
 800684a:	f000 80c3 	beq.w	80069d4 <_strtod_l+0x33c>
 800684e:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8006852:	2e08      	cmp	r6, #8
 8006854:	f200 80c9 	bhi.w	80069ea <_strtod_l+0x352>
 8006858:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800685c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800685e:	f04f 0c0a 	mov.w	ip, #10
 8006862:	461f      	mov	r7, r3
 8006864:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006866:	1c5e      	adds	r6, r3, #1
 8006868:	9619      	str	r6, [sp, #100]	; 0x64
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006870:	f1b8 0f09 	cmp.w	r8, #9
 8006874:	f240 80b3 	bls.w	80069de <_strtod_l+0x346>
 8006878:	1bf6      	subs	r6, r6, r7
 800687a:	2e08      	cmp	r6, #8
 800687c:	f644 681f 	movw	r8, #19999	; 0x4e1f
 8006880:	dc02      	bgt.n	8006888 <_strtod_l+0x1f0>
 8006882:	45f0      	cmp	r8, lr
 8006884:	bfa8      	it	ge
 8006886:	46f0      	movge	r8, lr
 8006888:	9e05      	ldr	r6, [sp, #20]
 800688a:	b10e      	cbz	r6, 8006890 <_strtod_l+0x1f8>
 800688c:	f1c8 0800 	rsb	r8, r8, #0
 8006890:	2d00      	cmp	r5, #0
 8006892:	f040 80d0 	bne.w	8006a36 <_strtod_l+0x39e>
 8006896:	2800      	cmp	r0, #0
 8006898:	f47f af3e 	bne.w	8006718 <_strtod_l+0x80>
 800689c:	9a08      	ldr	r2, [sp, #32]
 800689e:	2a00      	cmp	r2, #0
 80068a0:	f47f af3a 	bne.w	8006718 <_strtod_l+0x80>
 80068a4:	2900      	cmp	r1, #0
 80068a6:	f47f af55 	bne.w	8006754 <_strtod_l+0xbc>
 80068aa:	2b4e      	cmp	r3, #78	; 0x4e
 80068ac:	f000 80a6 	beq.w	80069fc <_strtod_l+0x364>
 80068b0:	f300 809e 	bgt.w	80069f0 <_strtod_l+0x358>
 80068b4:	2b49      	cmp	r3, #73	; 0x49
 80068b6:	f47f af4d 	bne.w	8006754 <_strtod_l+0xbc>
 80068ba:	493e      	ldr	r1, [pc, #248]	; (80069b4 <_strtod_l+0x31c>)
 80068bc:	a819      	add	r0, sp, #100	; 0x64
 80068be:	f000 fffb 	bl	80078b8 <__match>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f43f af46 	beq.w	8006754 <_strtod_l+0xbc>
 80068c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068ca:	493b      	ldr	r1, [pc, #236]	; (80069b8 <_strtod_l+0x320>)
 80068cc:	3b01      	subs	r3, #1
 80068ce:	a819      	add	r0, sp, #100	; 0x64
 80068d0:	9319      	str	r3, [sp, #100]	; 0x64
 80068d2:	f000 fff1 	bl	80078b8 <__match>
 80068d6:	b910      	cbnz	r0, 80068de <_strtod_l+0x246>
 80068d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068da:	3301      	adds	r3, #1
 80068dc:	9319      	str	r3, [sp, #100]	; 0x64
 80068de:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 80069bc <_strtod_l+0x324>
 80068e2:	f04f 0a00 	mov.w	sl, #0
 80068e6:	e717      	b.n	8006718 <_strtod_l+0x80>
 80068e8:	2300      	movs	r3, #0
 80068ea:	e774      	b.n	80067d6 <_strtod_l+0x13e>
 80068ec:	9906      	ldr	r1, [sp, #24]
 80068ee:	2908      	cmp	r1, #8
 80068f0:	bfdd      	ittte	le
 80068f2:	9907      	ldrle	r1, [sp, #28]
 80068f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80068f8:	9307      	strle	r3, [sp, #28]
 80068fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80068fe:	9b06      	ldr	r3, [sp, #24]
 8006900:	3001      	adds	r0, #1
 8006902:	3301      	adds	r3, #1
 8006904:	9306      	str	r3, [sp, #24]
 8006906:	9019      	str	r0, [sp, #100]	; 0x64
 8006908:	e76f      	b.n	80067ea <_strtod_l+0x152>
 800690a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800690c:	195a      	adds	r2, r3, r5
 800690e:	9219      	str	r2, [sp, #100]	; 0x64
 8006910:	9a06      	ldr	r2, [sp, #24]
 8006912:	5d5b      	ldrb	r3, [r3, r5]
 8006914:	2a00      	cmp	r2, #0
 8006916:	d148      	bne.n	80069aa <_strtod_l+0x312>
 8006918:	4610      	mov	r0, r2
 800691a:	2b30      	cmp	r3, #48	; 0x30
 800691c:	d02a      	beq.n	8006974 <_strtod_l+0x2dc>
 800691e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006922:	2a08      	cmp	r2, #8
 8006924:	f200 8491 	bhi.w	800724a <_strtod_l+0xbb2>
 8006928:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800692a:	920a      	str	r2, [sp, #40]	; 0x28
 800692c:	4602      	mov	r2, r0
 800692e:	2000      	movs	r0, #0
 8006930:	4605      	mov	r5, r0
 8006932:	3b30      	subs	r3, #48	; 0x30
 8006934:	f100 0101 	add.w	r1, r0, #1
 8006938:	d011      	beq.n	800695e <_strtod_l+0x2c6>
 800693a:	440a      	add	r2, r1
 800693c:	eb00 0c05 	add.w	ip, r0, r5
 8006940:	4629      	mov	r1, r5
 8006942:	260a      	movs	r6, #10
 8006944:	4561      	cmp	r1, ip
 8006946:	d11b      	bne.n	8006980 <_strtod_l+0x2e8>
 8006948:	4428      	add	r0, r5
 800694a:	2808      	cmp	r0, #8
 800694c:	f100 0501 	add.w	r5, r0, #1
 8006950:	dc25      	bgt.n	800699e <_strtod_l+0x306>
 8006952:	9807      	ldr	r0, [sp, #28]
 8006954:	210a      	movs	r1, #10
 8006956:	fb01 3300 	mla	r3, r1, r0, r3
 800695a:	9307      	str	r3, [sp, #28]
 800695c:	2100      	movs	r1, #0
 800695e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006960:	1c58      	adds	r0, r3, #1
 8006962:	9019      	str	r0, [sp, #100]	; 0x64
 8006964:	785b      	ldrb	r3, [r3, #1]
 8006966:	4608      	mov	r0, r1
 8006968:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800696c:	2909      	cmp	r1, #9
 800696e:	d9e0      	bls.n	8006932 <_strtod_l+0x29a>
 8006970:	2101      	movs	r1, #1
 8006972:	e74d      	b.n	8006810 <_strtod_l+0x178>
 8006974:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	9219      	str	r2, [sp, #100]	; 0x64
 800697a:	3001      	adds	r0, #1
 800697c:	785b      	ldrb	r3, [r3, #1]
 800697e:	e7cc      	b.n	800691a <_strtod_l+0x282>
 8006980:	3101      	adds	r1, #1
 8006982:	f101 3eff 	add.w	lr, r1, #4294967295
 8006986:	f1be 0f08 	cmp.w	lr, #8
 800698a:	dc03      	bgt.n	8006994 <_strtod_l+0x2fc>
 800698c:	9f07      	ldr	r7, [sp, #28]
 800698e:	4377      	muls	r7, r6
 8006990:	9707      	str	r7, [sp, #28]
 8006992:	e7d7      	b.n	8006944 <_strtod_l+0x2ac>
 8006994:	2910      	cmp	r1, #16
 8006996:	bfd8      	it	le
 8006998:	fb06 f909 	mulle.w	r9, r6, r9
 800699c:	e7d2      	b.n	8006944 <_strtod_l+0x2ac>
 800699e:	2d10      	cmp	r5, #16
 80069a0:	bfdc      	itt	le
 80069a2:	210a      	movle	r1, #10
 80069a4:	fb01 3909 	mlale	r9, r1, r9, r3
 80069a8:	e7d8      	b.n	800695c <_strtod_l+0x2c4>
 80069aa:	4602      	mov	r2, r0
 80069ac:	9d06      	ldr	r5, [sp, #24]
 80069ae:	e7db      	b.n	8006968 <_strtod_l+0x2d0>
 80069b0:	0800962c 	.word	0x0800962c
 80069b4:	08009620 	.word	0x08009620
 80069b8:	08009623 	.word	0x08009623
 80069bc:	7ff00000 	.word	0x7ff00000
 80069c0:	2101      	movs	r1, #1
 80069c2:	e72b      	b.n	800681c <_strtod_l+0x184>
 80069c4:	2300      	movs	r3, #0
 80069c6:	9305      	str	r3, [sp, #20]
 80069c8:	1ca3      	adds	r3, r4, #2
 80069ca:	9319      	str	r3, [sp, #100]	; 0x64
 80069cc:	78a3      	ldrb	r3, [r4, #2]
 80069ce:	e736      	b.n	800683e <_strtod_l+0x1a6>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e7f8      	b.n	80069c6 <_strtod_l+0x32e>
 80069d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069d6:	1c5e      	adds	r6, r3, #1
 80069d8:	9619      	str	r6, [sp, #100]	; 0x64
 80069da:	785b      	ldrb	r3, [r3, #1]
 80069dc:	e734      	b.n	8006848 <_strtod_l+0x1b0>
 80069de:	fb0c 3e0e 	mla	lr, ip, lr, r3
 80069e2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80069e6:	e73d      	b.n	8006864 <_strtod_l+0x1cc>
 80069e8:	9419      	str	r4, [sp, #100]	; 0x64
 80069ea:	f04f 0800 	mov.w	r8, #0
 80069ee:	e74f      	b.n	8006890 <_strtod_l+0x1f8>
 80069f0:	2b69      	cmp	r3, #105	; 0x69
 80069f2:	f43f af62 	beq.w	80068ba <_strtod_l+0x222>
 80069f6:	2b6e      	cmp	r3, #110	; 0x6e
 80069f8:	f47f aeac 	bne.w	8006754 <_strtod_l+0xbc>
 80069fc:	4988      	ldr	r1, [pc, #544]	; (8006c20 <_strtod_l+0x588>)
 80069fe:	a819      	add	r0, sp, #100	; 0x64
 8006a00:	f000 ff5a 	bl	80078b8 <__match>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	f43f aea5 	beq.w	8006754 <_strtod_l+0xbc>
 8006a0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b28      	cmp	r3, #40	; 0x28
 8006a10:	d10e      	bne.n	8006a30 <_strtod_l+0x398>
 8006a12:	aa1c      	add	r2, sp, #112	; 0x70
 8006a14:	4983      	ldr	r1, [pc, #524]	; (8006c24 <_strtod_l+0x58c>)
 8006a16:	a819      	add	r0, sp, #100	; 0x64
 8006a18:	f000 ff61 	bl	80078de <__hexnan>
 8006a1c:	2805      	cmp	r0, #5
 8006a1e:	d107      	bne.n	8006a30 <_strtod_l+0x398>
 8006a20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a22:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8006a26:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006a2a:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006a2e:	e673      	b.n	8006718 <_strtod_l+0x80>
 8006a30:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006c34 <_strtod_l+0x59c>
 8006a34:	e755      	b.n	80068e2 <_strtod_l+0x24a>
 8006a36:	9b06      	ldr	r3, [sp, #24]
 8006a38:	9807      	ldr	r0, [sp, #28]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bf08      	it	eq
 8006a3e:	462b      	moveq	r3, r5
 8006a40:	2d10      	cmp	r5, #16
 8006a42:	462c      	mov	r4, r5
 8006a44:	eba8 0802 	sub.w	r8, r8, r2
 8006a48:	bfa8      	it	ge
 8006a4a:	2410      	movge	r4, #16
 8006a4c:	9306      	str	r3, [sp, #24]
 8006a4e:	f7f9 fd05 	bl	800045c <__aeabi_ui2d>
 8006a52:	2c09      	cmp	r4, #9
 8006a54:	4682      	mov	sl, r0
 8006a56:	468b      	mov	fp, r1
 8006a58:	dd13      	ble.n	8006a82 <_strtod_l+0x3ea>
 8006a5a:	4b73      	ldr	r3, [pc, #460]	; (8006c28 <_strtod_l+0x590>)
 8006a5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a60:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006a64:	f7f9 fd70 	bl	8000548 <__aeabi_dmul>
 8006a68:	4606      	mov	r6, r0
 8006a6a:	4648      	mov	r0, r9
 8006a6c:	460f      	mov	r7, r1
 8006a6e:	f7f9 fcf5 	bl	800045c <__aeabi_ui2d>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4630      	mov	r0, r6
 8006a78:	4639      	mov	r1, r7
 8006a7a:	f7f9 fbb3 	bl	80001e4 <__adddf3>
 8006a7e:	4682      	mov	sl, r0
 8006a80:	468b      	mov	fp, r1
 8006a82:	2d0f      	cmp	r5, #15
 8006a84:	dc36      	bgt.n	8006af4 <_strtod_l+0x45c>
 8006a86:	f1b8 0f00 	cmp.w	r8, #0
 8006a8a:	f43f ae45 	beq.w	8006718 <_strtod_l+0x80>
 8006a8e:	dd24      	ble.n	8006ada <_strtod_l+0x442>
 8006a90:	f1b8 0f16 	cmp.w	r8, #22
 8006a94:	dc0b      	bgt.n	8006aae <_strtod_l+0x416>
 8006a96:	4d64      	ldr	r5, [pc, #400]	; (8006c28 <_strtod_l+0x590>)
 8006a98:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 8006a9c:	e9d8 0100 	ldrd	r0, r1, [r8]
 8006aa0:	4652      	mov	r2, sl
 8006aa2:	465b      	mov	r3, fp
 8006aa4:	f7f9 fd50 	bl	8000548 <__aeabi_dmul>
 8006aa8:	4682      	mov	sl, r0
 8006aaa:	468b      	mov	fp, r1
 8006aac:	e634      	b.n	8006718 <_strtod_l+0x80>
 8006aae:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006ab2:	4598      	cmp	r8, r3
 8006ab4:	dc1e      	bgt.n	8006af4 <_strtod_l+0x45c>
 8006ab6:	4c5c      	ldr	r4, [pc, #368]	; (8006c28 <_strtod_l+0x590>)
 8006ab8:	f1c5 050f 	rsb	r5, r5, #15
 8006abc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006ac0:	eba8 0505 	sub.w	r5, r8, r5
 8006ac4:	4652      	mov	r2, sl
 8006ac6:	465b      	mov	r3, fp
 8006ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006acc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006ad0:	f7f9 fd3a 	bl	8000548 <__aeabi_dmul>
 8006ad4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006ad8:	e7e4      	b.n	8006aa4 <_strtod_l+0x40c>
 8006ada:	f118 0f16 	cmn.w	r8, #22
 8006ade:	db09      	blt.n	8006af4 <_strtod_l+0x45c>
 8006ae0:	4d51      	ldr	r5, [pc, #324]	; (8006c28 <_strtod_l+0x590>)
 8006ae2:	eba5 08c8 	sub.w	r8, r5, r8, lsl #3
 8006ae6:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006aea:	4650      	mov	r0, sl
 8006aec:	4659      	mov	r1, fp
 8006aee:	f7f9 fe55 	bl	800079c <__aeabi_ddiv>
 8006af2:	e7d9      	b.n	8006aa8 <_strtod_l+0x410>
 8006af4:	1b2c      	subs	r4, r5, r4
 8006af6:	4444      	add	r4, r8
 8006af8:	2c00      	cmp	r4, #0
 8006afa:	dd70      	ble.n	8006bde <_strtod_l+0x546>
 8006afc:	f014 030f 	ands.w	r3, r4, #15
 8006b00:	d00a      	beq.n	8006b18 <_strtod_l+0x480>
 8006b02:	4949      	ldr	r1, [pc, #292]	; (8006c28 <_strtod_l+0x590>)
 8006b04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b08:	4652      	mov	r2, sl
 8006b0a:	465b      	mov	r3, fp
 8006b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b10:	f7f9 fd1a 	bl	8000548 <__aeabi_dmul>
 8006b14:	4682      	mov	sl, r0
 8006b16:	468b      	mov	fp, r1
 8006b18:	f034 040f 	bics.w	r4, r4, #15
 8006b1c:	d050      	beq.n	8006bc0 <_strtod_l+0x528>
 8006b1e:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8006b22:	dd23      	ble.n	8006b6c <_strtod_l+0x4d4>
 8006b24:	2400      	movs	r4, #0
 8006b26:	4625      	mov	r5, r4
 8006b28:	9407      	str	r4, [sp, #28]
 8006b2a:	9406      	str	r4, [sp, #24]
 8006b2c:	9a04      	ldr	r2, [sp, #16]
 8006b2e:	f8df b108 	ldr.w	fp, [pc, #264]	; 8006c38 <_strtod_l+0x5a0>
 8006b32:	2322      	movs	r3, #34	; 0x22
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	f04f 0a00 	mov.w	sl, #0
 8006b3a:	9b07      	ldr	r3, [sp, #28]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f43f adeb 	beq.w	8006718 <_strtod_l+0x80>
 8006b42:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006b44:	9804      	ldr	r0, [sp, #16]
 8006b46:	f000 ffb0 	bl	8007aaa <_Bfree>
 8006b4a:	9906      	ldr	r1, [sp, #24]
 8006b4c:	9804      	ldr	r0, [sp, #16]
 8006b4e:	f000 ffac 	bl	8007aaa <_Bfree>
 8006b52:	4629      	mov	r1, r5
 8006b54:	9804      	ldr	r0, [sp, #16]
 8006b56:	f000 ffa8 	bl	8007aaa <_Bfree>
 8006b5a:	9907      	ldr	r1, [sp, #28]
 8006b5c:	9804      	ldr	r0, [sp, #16]
 8006b5e:	f000 ffa4 	bl	8007aaa <_Bfree>
 8006b62:	4621      	mov	r1, r4
 8006b64:	9804      	ldr	r0, [sp, #16]
 8006b66:	f000 ffa0 	bl	8007aaa <_Bfree>
 8006b6a:	e5d5      	b.n	8006718 <_strtod_l+0x80>
 8006b6c:	4e2f      	ldr	r6, [pc, #188]	; (8006c2c <_strtod_l+0x594>)
 8006b6e:	2300      	movs	r3, #0
 8006b70:	1124      	asrs	r4, r4, #4
 8006b72:	4650      	mov	r0, sl
 8006b74:	4659      	mov	r1, fp
 8006b76:	4699      	mov	r9, r3
 8006b78:	4637      	mov	r7, r6
 8006b7a:	2c01      	cmp	r4, #1
 8006b7c:	dc23      	bgt.n	8006bc6 <_strtod_l+0x52e>
 8006b7e:	b10b      	cbz	r3, 8006b84 <_strtod_l+0x4ec>
 8006b80:	4682      	mov	sl, r0
 8006b82:	468b      	mov	fp, r1
 8006b84:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006b88:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
 8006b8c:	4652      	mov	r2, sl
 8006b8e:	465b      	mov	r3, fp
 8006b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b94:	f7f9 fcd8 	bl	8000548 <__aeabi_dmul>
 8006b98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b9c:	468b      	mov	fp, r1
 8006b9e:	460a      	mov	r2, r1
 8006ba0:	0d1b      	lsrs	r3, r3, #20
 8006ba2:	4923      	ldr	r1, [pc, #140]	; (8006c30 <_strtod_l+0x598>)
 8006ba4:	051b      	lsls	r3, r3, #20
 8006ba6:	428b      	cmp	r3, r1
 8006ba8:	4682      	mov	sl, r0
 8006baa:	d8bb      	bhi.n	8006b24 <_strtod_l+0x48c>
 8006bac:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006bb0:	428b      	cmp	r3, r1
 8006bb2:	bf86      	itte	hi
 8006bb4:	f8df b084 	ldrhi.w	fp, [pc, #132]	; 8006c3c <_strtod_l+0x5a4>
 8006bb8:	f04f 3aff 	movhi.w	sl, #4294967295
 8006bbc:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	9305      	str	r3, [sp, #20]
 8006bc4:	e06d      	b.n	8006ca2 <_strtod_l+0x60a>
 8006bc6:	07e2      	lsls	r2, r4, #31
 8006bc8:	d504      	bpl.n	8006bd4 <_strtod_l+0x53c>
 8006bca:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006bce:	f7f9 fcbb 	bl	8000548 <__aeabi_dmul>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	f109 0901 	add.w	r9, r9, #1
 8006bd8:	1064      	asrs	r4, r4, #1
 8006bda:	3608      	adds	r6, #8
 8006bdc:	e7cd      	b.n	8006b7a <_strtod_l+0x4e2>
 8006bde:	d0ef      	beq.n	8006bc0 <_strtod_l+0x528>
 8006be0:	4264      	negs	r4, r4
 8006be2:	f014 020f 	ands.w	r2, r4, #15
 8006be6:	d00a      	beq.n	8006bfe <_strtod_l+0x566>
 8006be8:	4b0f      	ldr	r3, [pc, #60]	; (8006c28 <_strtod_l+0x590>)
 8006bea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bee:	4650      	mov	r0, sl
 8006bf0:	4659      	mov	r1, fp
 8006bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf6:	f7f9 fdd1 	bl	800079c <__aeabi_ddiv>
 8006bfa:	4682      	mov	sl, r0
 8006bfc:	468b      	mov	fp, r1
 8006bfe:	1124      	asrs	r4, r4, #4
 8006c00:	d0de      	beq.n	8006bc0 <_strtod_l+0x528>
 8006c02:	2c1f      	cmp	r4, #31
 8006c04:	dd1c      	ble.n	8006c40 <_strtod_l+0x5a8>
 8006c06:	2400      	movs	r4, #0
 8006c08:	4625      	mov	r5, r4
 8006c0a:	9407      	str	r4, [sp, #28]
 8006c0c:	9406      	str	r4, [sp, #24]
 8006c0e:	9a04      	ldr	r2, [sp, #16]
 8006c10:	2322      	movs	r3, #34	; 0x22
 8006c12:	f04f 0a00 	mov.w	sl, #0
 8006c16:	f04f 0b00 	mov.w	fp, #0
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	e78d      	b.n	8006b3a <_strtod_l+0x4a2>
 8006c1e:	bf00      	nop
 8006c20:	08009629 	.word	0x08009629
 8006c24:	08009640 	.word	0x08009640
 8006c28:	080096b8 	.word	0x080096b8
 8006c2c:	08009690 	.word	0x08009690
 8006c30:	7ca00000 	.word	0x7ca00000
 8006c34:	fff80000 	.word	0xfff80000
 8006c38:	7ff00000 	.word	0x7ff00000
 8006c3c:	7fefffff 	.word	0x7fefffff
 8006c40:	f014 0310 	ands.w	r3, r4, #16
 8006c44:	bf18      	it	ne
 8006c46:	236a      	movne	r3, #106	; 0x6a
 8006c48:	4ea0      	ldr	r6, [pc, #640]	; (8006ecc <_strtod_l+0x834>)
 8006c4a:	9305      	str	r3, [sp, #20]
 8006c4c:	4650      	mov	r0, sl
 8006c4e:	4659      	mov	r1, fp
 8006c50:	2300      	movs	r3, #0
 8006c52:	2c00      	cmp	r4, #0
 8006c54:	f300 8106 	bgt.w	8006e64 <_strtod_l+0x7cc>
 8006c58:	b10b      	cbz	r3, 8006c5e <_strtod_l+0x5c6>
 8006c5a:	4682      	mov	sl, r0
 8006c5c:	468b      	mov	fp, r1
 8006c5e:	9b05      	ldr	r3, [sp, #20]
 8006c60:	b1bb      	cbz	r3, 8006c92 <_strtod_l+0x5fa>
 8006c62:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006c66:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	4659      	mov	r1, fp
 8006c6e:	dd10      	ble.n	8006c92 <_strtod_l+0x5fa>
 8006c70:	2b1f      	cmp	r3, #31
 8006c72:	f340 8101 	ble.w	8006e78 <_strtod_l+0x7e0>
 8006c76:	2b34      	cmp	r3, #52	; 0x34
 8006c78:	bfde      	ittt	le
 8006c7a:	3b20      	suble	r3, #32
 8006c7c:	f04f 32ff 	movle.w	r2, #4294967295
 8006c80:	fa02 f303 	lslle.w	r3, r2, r3
 8006c84:	f04f 0a00 	mov.w	sl, #0
 8006c88:	bfcc      	ite	gt
 8006c8a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006c8e:	ea03 0b01 	andle.w	fp, r3, r1
 8006c92:	2200      	movs	r2, #0
 8006c94:	2300      	movs	r3, #0
 8006c96:	4650      	mov	r0, sl
 8006c98:	4659      	mov	r1, fp
 8006c9a:	f7f9 febd 	bl	8000a18 <__aeabi_dcmpeq>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d1b1      	bne.n	8006c06 <_strtod_l+0x56e>
 8006ca2:	9b07      	ldr	r3, [sp, #28]
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	9a06      	ldr	r2, [sp, #24]
 8006ca8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006caa:	9804      	ldr	r0, [sp, #16]
 8006cac:	462b      	mov	r3, r5
 8006cae:	f000 ff4e 	bl	8007b4e <__s2b>
 8006cb2:	9007      	str	r0, [sp, #28]
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	f43f af35 	beq.w	8006b24 <_strtod_l+0x48c>
 8006cba:	f1b8 0f00 	cmp.w	r8, #0
 8006cbe:	f1c8 0300 	rsb	r3, r8, #0
 8006cc2:	bfa8      	it	ge
 8006cc4:	2300      	movge	r3, #0
 8006cc6:	930e      	str	r3, [sp, #56]	; 0x38
 8006cc8:	2400      	movs	r4, #0
 8006cca:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 8006cce:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cd0:	4625      	mov	r5, r4
 8006cd2:	9b07      	ldr	r3, [sp, #28]
 8006cd4:	9804      	ldr	r0, [sp, #16]
 8006cd6:	6859      	ldr	r1, [r3, #4]
 8006cd8:	f000 feb3 	bl	8007a42 <_Balloc>
 8006cdc:	9006      	str	r0, [sp, #24]
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	f43f af24 	beq.w	8006b2c <_strtod_l+0x494>
 8006ce4:	9b07      	ldr	r3, [sp, #28]
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	3202      	adds	r2, #2
 8006cea:	f103 010c 	add.w	r1, r3, #12
 8006cee:	0092      	lsls	r2, r2, #2
 8006cf0:	300c      	adds	r0, #12
 8006cf2:	f000 fe9b 	bl	8007a2c <memcpy>
 8006cf6:	aa1c      	add	r2, sp, #112	; 0x70
 8006cf8:	a91b      	add	r1, sp, #108	; 0x6c
 8006cfa:	ec4b ab10 	vmov	d0, sl, fp
 8006cfe:	9804      	ldr	r0, [sp, #16]
 8006d00:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006d04:	f001 f9d4 	bl	80080b0 <__d2b>
 8006d08:	901a      	str	r0, [sp, #104]	; 0x68
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	f43f af0e 	beq.w	8006b2c <_strtod_l+0x494>
 8006d10:	2101      	movs	r1, #1
 8006d12:	9804      	ldr	r0, [sp, #16]
 8006d14:	f000 ffa7 	bl	8007c66 <__i2b>
 8006d18:	4605      	mov	r5, r0
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	f43f af06 	beq.w	8006b2c <_strtod_l+0x494>
 8006d20:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006d22:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006d24:	2e00      	cmp	r6, #0
 8006d26:	bfab      	itete	ge
 8006d28:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006d2a:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 8006d2c:	9f0f      	ldrge	r7, [sp, #60]	; 0x3c
 8006d2e:	f8dd 8038 	ldrlt.w	r8, [sp, #56]	; 0x38
 8006d32:	bfac      	ite	ge
 8006d34:	eb03 0806 	addge.w	r8, r3, r6
 8006d38:	1b9f      	sublt	r7, r3, r6
 8006d3a:	9b05      	ldr	r3, [sp, #20]
 8006d3c:	1af6      	subs	r6, r6, r3
 8006d3e:	4416      	add	r6, r2
 8006d40:	4b63      	ldr	r3, [pc, #396]	; (8006ed0 <_strtod_l+0x838>)
 8006d42:	3e01      	subs	r6, #1
 8006d44:	429e      	cmp	r6, r3
 8006d46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006d4a:	f280 80a8 	bge.w	8006e9e <_strtod_l+0x806>
 8006d4e:	1b9b      	subs	r3, r3, r6
 8006d50:	2b1f      	cmp	r3, #31
 8006d52:	eba2 0203 	sub.w	r2, r2, r3
 8006d56:	f04f 0901 	mov.w	r9, #1
 8006d5a:	f300 8094 	bgt.w	8006e86 <_strtod_l+0x7ee>
 8006d5e:	fa09 f303 	lsl.w	r3, r9, r3
 8006d62:	9314      	str	r3, [sp, #80]	; 0x50
 8006d64:	2600      	movs	r6, #0
 8006d66:	eb08 0902 	add.w	r9, r8, r2
 8006d6a:	9b05      	ldr	r3, [sp, #20]
 8006d6c:	45c8      	cmp	r8, r9
 8006d6e:	4417      	add	r7, r2
 8006d70:	441f      	add	r7, r3
 8006d72:	4643      	mov	r3, r8
 8006d74:	bfa8      	it	ge
 8006d76:	464b      	movge	r3, r9
 8006d78:	42bb      	cmp	r3, r7
 8006d7a:	bfa8      	it	ge
 8006d7c:	463b      	movge	r3, r7
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bfc2      	ittt	gt
 8006d82:	eba9 0903 	subgt.w	r9, r9, r3
 8006d86:	1aff      	subgt	r7, r7, r3
 8006d88:	eba8 0803 	subgt.w	r8, r8, r3
 8006d8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d8e:	b1bb      	cbz	r3, 8006dc0 <_strtod_l+0x728>
 8006d90:	4629      	mov	r1, r5
 8006d92:	461a      	mov	r2, r3
 8006d94:	9804      	ldr	r0, [sp, #16]
 8006d96:	f000 fffd 	bl	8007d94 <__pow5mult>
 8006d9a:	4605      	mov	r5, r0
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	f43f aec5 	beq.w	8006b2c <_strtod_l+0x494>
 8006da2:	4601      	mov	r1, r0
 8006da4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006da6:	9804      	ldr	r0, [sp, #16]
 8006da8:	f000 ff66 	bl	8007c78 <__multiply>
 8006dac:	9008      	str	r0, [sp, #32]
 8006dae:	2800      	cmp	r0, #0
 8006db0:	f43f aebc 	beq.w	8006b2c <_strtod_l+0x494>
 8006db4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006db6:	9804      	ldr	r0, [sp, #16]
 8006db8:	f000 fe77 	bl	8007aaa <_Bfree>
 8006dbc:	9b08      	ldr	r3, [sp, #32]
 8006dbe:	931a      	str	r3, [sp, #104]	; 0x68
 8006dc0:	f1b9 0f00 	cmp.w	r9, #0
 8006dc4:	dc6f      	bgt.n	8006ea6 <_strtod_l+0x80e>
 8006dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d175      	bne.n	8006eb8 <_strtod_l+0x820>
 8006dcc:	2f00      	cmp	r7, #0
 8006dce:	dd08      	ble.n	8006de2 <_strtod_l+0x74a>
 8006dd0:	463a      	mov	r2, r7
 8006dd2:	9906      	ldr	r1, [sp, #24]
 8006dd4:	9804      	ldr	r0, [sp, #16]
 8006dd6:	f001 f82b 	bl	8007e30 <__lshift>
 8006dda:	9006      	str	r0, [sp, #24]
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	f43f aea5 	beq.w	8006b2c <_strtod_l+0x494>
 8006de2:	f1b8 0f00 	cmp.w	r8, #0
 8006de6:	dd08      	ble.n	8006dfa <_strtod_l+0x762>
 8006de8:	4629      	mov	r1, r5
 8006dea:	4642      	mov	r2, r8
 8006dec:	9804      	ldr	r0, [sp, #16]
 8006dee:	f001 f81f 	bl	8007e30 <__lshift>
 8006df2:	4605      	mov	r5, r0
 8006df4:	2800      	cmp	r0, #0
 8006df6:	f43f ae99 	beq.w	8006b2c <_strtod_l+0x494>
 8006dfa:	9a06      	ldr	r2, [sp, #24]
 8006dfc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006dfe:	9804      	ldr	r0, [sp, #16]
 8006e00:	f001 f881 	bl	8007f06 <__mdiff>
 8006e04:	4604      	mov	r4, r0
 8006e06:	2800      	cmp	r0, #0
 8006e08:	f43f ae90 	beq.w	8006b2c <_strtod_l+0x494>
 8006e0c:	68c3      	ldr	r3, [r0, #12]
 8006e0e:	9308      	str	r3, [sp, #32]
 8006e10:	2300      	movs	r3, #0
 8006e12:	60c3      	str	r3, [r0, #12]
 8006e14:	4629      	mov	r1, r5
 8006e16:	f001 f85c 	bl	8007ed2 <__mcmp>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	da5a      	bge.n	8006ed4 <_strtod_l+0x83c>
 8006e1e:	9b08      	ldr	r3, [sp, #32]
 8006e20:	b9e3      	cbnz	r3, 8006e5c <_strtod_l+0x7c4>
 8006e22:	f1ba 0f00 	cmp.w	sl, #0
 8006e26:	d119      	bne.n	8006e5c <_strtod_l+0x7c4>
 8006e28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e2c:	b9b3      	cbnz	r3, 8006e5c <_strtod_l+0x7c4>
 8006e2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e32:	0d1b      	lsrs	r3, r3, #20
 8006e34:	051b      	lsls	r3, r3, #20
 8006e36:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006e3a:	d90f      	bls.n	8006e5c <_strtod_l+0x7c4>
 8006e3c:	6963      	ldr	r3, [r4, #20]
 8006e3e:	b913      	cbnz	r3, 8006e46 <_strtod_l+0x7ae>
 8006e40:	6923      	ldr	r3, [r4, #16]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	dd0a      	ble.n	8006e5c <_strtod_l+0x7c4>
 8006e46:	4621      	mov	r1, r4
 8006e48:	2201      	movs	r2, #1
 8006e4a:	9804      	ldr	r0, [sp, #16]
 8006e4c:	f000 fff0 	bl	8007e30 <__lshift>
 8006e50:	4629      	mov	r1, r5
 8006e52:	4604      	mov	r4, r0
 8006e54:	f001 f83d 	bl	8007ed2 <__mcmp>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	dc6c      	bgt.n	8006f36 <_strtod_l+0x89e>
 8006e5c:	9b05      	ldr	r3, [sp, #20]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d176      	bne.n	8006f50 <_strtod_l+0x8b8>
 8006e62:	e66e      	b.n	8006b42 <_strtod_l+0x4aa>
 8006e64:	07e2      	lsls	r2, r4, #31
 8006e66:	d504      	bpl.n	8006e72 <_strtod_l+0x7da>
 8006e68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e6c:	f7f9 fb6c 	bl	8000548 <__aeabi_dmul>
 8006e70:	2301      	movs	r3, #1
 8006e72:	1064      	asrs	r4, r4, #1
 8006e74:	3608      	adds	r6, #8
 8006e76:	e6ec      	b.n	8006c52 <_strtod_l+0x5ba>
 8006e78:	f04f 32ff 	mov.w	r2, #4294967295
 8006e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e80:	ea03 0a0a 	and.w	sl, r3, sl
 8006e84:	e705      	b.n	8006c92 <_strtod_l+0x5fa>
 8006e86:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006e8a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006e8e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006e92:	36e2      	adds	r6, #226	; 0xe2
 8006e94:	fa09 f606 	lsl.w	r6, r9, r6
 8006e98:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8006e9c:	e763      	b.n	8006d66 <_strtod_l+0x6ce>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	2600      	movs	r6, #0
 8006ea2:	9314      	str	r3, [sp, #80]	; 0x50
 8006ea4:	e75f      	b.n	8006d66 <_strtod_l+0x6ce>
 8006ea6:	464a      	mov	r2, r9
 8006ea8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006eaa:	9804      	ldr	r0, [sp, #16]
 8006eac:	f000 ffc0 	bl	8007e30 <__lshift>
 8006eb0:	901a      	str	r0, [sp, #104]	; 0x68
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d187      	bne.n	8006dc6 <_strtod_l+0x72e>
 8006eb6:	e639      	b.n	8006b2c <_strtod_l+0x494>
 8006eb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006eba:	9906      	ldr	r1, [sp, #24]
 8006ebc:	9804      	ldr	r0, [sp, #16]
 8006ebe:	f000 ff69 	bl	8007d94 <__pow5mult>
 8006ec2:	9006      	str	r0, [sp, #24]
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d181      	bne.n	8006dcc <_strtod_l+0x734>
 8006ec8:	e630      	b.n	8006b2c <_strtod_l+0x494>
 8006eca:	bf00      	nop
 8006ecc:	08009658 	.word	0x08009658
 8006ed0:	fffffc02 	.word	0xfffffc02
 8006ed4:	f040 8086 	bne.w	8006fe4 <_strtod_l+0x94c>
 8006ed8:	9a08      	ldr	r2, [sp, #32]
 8006eda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ede:	b332      	cbz	r2, 8006f2e <_strtod_l+0x896>
 8006ee0:	4aad      	ldr	r2, [pc, #692]	; (8007198 <_strtod_l+0xb00>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	4659      	mov	r1, fp
 8006ee6:	d152      	bne.n	8006f8e <_strtod_l+0x8f6>
 8006ee8:	9b05      	ldr	r3, [sp, #20]
 8006eea:	4650      	mov	r0, sl
 8006eec:	b1d3      	cbz	r3, 8006f24 <_strtod_l+0x88c>
 8006eee:	4aab      	ldr	r2, [pc, #684]	; (800719c <_strtod_l+0xb04>)
 8006ef0:	400a      	ands	r2, r1
 8006ef2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006ef6:	f04f 37ff 	mov.w	r7, #4294967295
 8006efa:	d816      	bhi.n	8006f2a <_strtod_l+0x892>
 8006efc:	0d12      	lsrs	r2, r2, #20
 8006efe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006f02:	fa07 f303 	lsl.w	r3, r7, r3
 8006f06:	4283      	cmp	r3, r0
 8006f08:	d141      	bne.n	8006f8e <_strtod_l+0x8f6>
 8006f0a:	4aa5      	ldr	r2, [pc, #660]	; (80071a0 <_strtod_l+0xb08>)
 8006f0c:	4291      	cmp	r1, r2
 8006f0e:	d102      	bne.n	8006f16 <_strtod_l+0x87e>
 8006f10:	3301      	adds	r3, #1
 8006f12:	f43f ae0b 	beq.w	8006b2c <_strtod_l+0x494>
 8006f16:	4ba1      	ldr	r3, [pc, #644]	; (800719c <_strtod_l+0xb04>)
 8006f18:	400b      	ands	r3, r1
 8006f1a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006f1e:	f04f 0a00 	mov.w	sl, #0
 8006f22:	e79b      	b.n	8006e5c <_strtod_l+0x7c4>
 8006f24:	f04f 33ff 	mov.w	r3, #4294967295
 8006f28:	e7ed      	b.n	8006f06 <_strtod_l+0x86e>
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	e7eb      	b.n	8006f06 <_strtod_l+0x86e>
 8006f2e:	bb73      	cbnz	r3, 8006f8e <_strtod_l+0x8f6>
 8006f30:	f1ba 0f00 	cmp.w	sl, #0
 8006f34:	d12b      	bne.n	8006f8e <_strtod_l+0x8f6>
 8006f36:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f3a:	9a05      	ldr	r2, [sp, #20]
 8006f3c:	0d1b      	lsrs	r3, r3, #20
 8006f3e:	051b      	lsls	r3, r3, #20
 8006f40:	b1e2      	cbz	r2, 8006f7c <_strtod_l+0x8e4>
 8006f42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006f46:	dc19      	bgt.n	8006f7c <_strtod_l+0x8e4>
 8006f48:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8006f4c:	f77f ae5f 	ble.w	8006c0e <_strtod_l+0x576>
 8006f50:	4b94      	ldr	r3, [pc, #592]	; (80071a4 <_strtod_l+0xb0c>)
 8006f52:	930d      	str	r3, [sp, #52]	; 0x34
 8006f54:	2300      	movs	r3, #0
 8006f56:	930c      	str	r3, [sp, #48]	; 0x30
 8006f58:	4650      	mov	r0, sl
 8006f5a:	4659      	mov	r1, fp
 8006f5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f60:	f7f9 faf2 	bl	8000548 <__aeabi_dmul>
 8006f64:	4682      	mov	sl, r0
 8006f66:	468b      	mov	fp, r1
 8006f68:	2900      	cmp	r1, #0
 8006f6a:	f47f adea 	bne.w	8006b42 <_strtod_l+0x4aa>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	f47f ade7 	bne.w	8006b42 <_strtod_l+0x4aa>
 8006f74:	9a04      	ldr	r2, [sp, #16]
 8006f76:	2322      	movs	r3, #34	; 0x22
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	e5e2      	b.n	8006b42 <_strtod_l+0x4aa>
 8006f7c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006f80:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006f84:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006f88:	f04f 3aff 	mov.w	sl, #4294967295
 8006f8c:	e766      	b.n	8006e5c <_strtod_l+0x7c4>
 8006f8e:	b19e      	cbz	r6, 8006fb8 <_strtod_l+0x920>
 8006f90:	ea16 0f0b 	tst.w	r6, fp
 8006f94:	f43f af62 	beq.w	8006e5c <_strtod_l+0x7c4>
 8006f98:	9b08      	ldr	r3, [sp, #32]
 8006f9a:	9a05      	ldr	r2, [sp, #20]
 8006f9c:	4650      	mov	r0, sl
 8006f9e:	4659      	mov	r1, fp
 8006fa0:	b173      	cbz	r3, 8006fc0 <_strtod_l+0x928>
 8006fa2:	f7ff fb5d 	bl	8006660 <sulp>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006fae:	f7f9 f919 	bl	80001e4 <__adddf3>
 8006fb2:	4682      	mov	sl, r0
 8006fb4:	468b      	mov	fp, r1
 8006fb6:	e751      	b.n	8006e5c <_strtod_l+0x7c4>
 8006fb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fba:	ea13 0f0a 	tst.w	r3, sl
 8006fbe:	e7e9      	b.n	8006f94 <_strtod_l+0x8fc>
 8006fc0:	f7ff fb4e 	bl	8006660 <sulp>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006fcc:	f7f9 f908 	bl	80001e0 <__aeabi_dsub>
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	4682      	mov	sl, r0
 8006fd6:	468b      	mov	fp, r1
 8006fd8:	f7f9 fd1e 	bl	8000a18 <__aeabi_dcmpeq>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	f47f ae16 	bne.w	8006c0e <_strtod_l+0x576>
 8006fe2:	e73b      	b.n	8006e5c <_strtod_l+0x7c4>
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f001 f8b1 	bl	800814e <__ratio>
 8006fec:	ec57 6b10 	vmov	r6, r7, d0
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ff6:	ee10 0a10 	vmov	r0, s0
 8006ffa:	4639      	mov	r1, r7
 8006ffc:	f7f9 fd20 	bl	8000a40 <__aeabi_dcmple>
 8007000:	2800      	cmp	r0, #0
 8007002:	d074      	beq.n	80070ee <_strtod_l+0xa56>
 8007004:	9b08      	ldr	r3, [sp, #32]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d046      	beq.n	8007098 <_strtod_l+0xa00>
 800700a:	f8df 919c 	ldr.w	r9, [pc, #412]	; 80071a8 <_strtod_l+0xb10>
 800700e:	f04f 0800 	mov.w	r8, #0
 8007012:	4f65      	ldr	r7, [pc, #404]	; (80071a8 <_strtod_l+0xb10>)
 8007014:	2600      	movs	r6, #0
 8007016:	4b61      	ldr	r3, [pc, #388]	; (800719c <_strtod_l+0xb04>)
 8007018:	ea0b 0303 	and.w	r3, fp, r3
 800701c:	9314      	str	r3, [sp, #80]	; 0x50
 800701e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007020:	4b62      	ldr	r3, [pc, #392]	; (80071ac <_strtod_l+0xb14>)
 8007022:	429a      	cmp	r2, r3
 8007024:	f040 80ca 	bne.w	80071bc <_strtod_l+0xb24>
 8007028:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800702c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007030:	ec4b ab10 	vmov	d0, sl, fp
 8007034:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007038:	f000 ffc4 	bl	8007fc4 <__ulp>
 800703c:	4640      	mov	r0, r8
 800703e:	ec53 2b10 	vmov	r2, r3, d0
 8007042:	4649      	mov	r1, r9
 8007044:	f7f9 fa80 	bl	8000548 <__aeabi_dmul>
 8007048:	4652      	mov	r2, sl
 800704a:	465b      	mov	r3, fp
 800704c:	f7f9 f8ca 	bl	80001e4 <__adddf3>
 8007050:	4a52      	ldr	r2, [pc, #328]	; (800719c <_strtod_l+0xb04>)
 8007052:	4b57      	ldr	r3, [pc, #348]	; (80071b0 <_strtod_l+0xb18>)
 8007054:	400a      	ands	r2, r1
 8007056:	429a      	cmp	r2, r3
 8007058:	4682      	mov	sl, r0
 800705a:	d95c      	bls.n	8007116 <_strtod_l+0xa7e>
 800705c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800705e:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 8007062:	429a      	cmp	r2, r3
 8007064:	d103      	bne.n	800706e <_strtod_l+0x9d6>
 8007066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007068:	3301      	adds	r3, #1
 800706a:	f43f ad5f 	beq.w	8006b2c <_strtod_l+0x494>
 800706e:	f8df b130 	ldr.w	fp, [pc, #304]	; 80071a0 <_strtod_l+0xb08>
 8007072:	f04f 3aff 	mov.w	sl, #4294967295
 8007076:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007078:	9804      	ldr	r0, [sp, #16]
 800707a:	f000 fd16 	bl	8007aaa <_Bfree>
 800707e:	9906      	ldr	r1, [sp, #24]
 8007080:	9804      	ldr	r0, [sp, #16]
 8007082:	f000 fd12 	bl	8007aaa <_Bfree>
 8007086:	4629      	mov	r1, r5
 8007088:	9804      	ldr	r0, [sp, #16]
 800708a:	f000 fd0e 	bl	8007aaa <_Bfree>
 800708e:	4621      	mov	r1, r4
 8007090:	9804      	ldr	r0, [sp, #16]
 8007092:	f000 fd0a 	bl	8007aaa <_Bfree>
 8007096:	e61c      	b.n	8006cd2 <_strtod_l+0x63a>
 8007098:	f1ba 0f00 	cmp.w	sl, #0
 800709c:	d118      	bne.n	80070d0 <_strtod_l+0xa38>
 800709e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070a2:	b9e3      	cbnz	r3, 80070de <_strtod_l+0xa46>
 80070a4:	2200      	movs	r2, #0
 80070a6:	4b40      	ldr	r3, [pc, #256]	; (80071a8 <_strtod_l+0xb10>)
 80070a8:	4630      	mov	r0, r6
 80070aa:	4639      	mov	r1, r7
 80070ac:	f7f9 fcbe 	bl	8000a2c <__aeabi_dcmplt>
 80070b0:	b9d0      	cbnz	r0, 80070e8 <_strtod_l+0xa50>
 80070b2:	4630      	mov	r0, r6
 80070b4:	4639      	mov	r1, r7
 80070b6:	2200      	movs	r2, #0
 80070b8:	4b3e      	ldr	r3, [pc, #248]	; (80071b4 <_strtod_l+0xb1c>)
 80070ba:	f7f9 fa45 	bl	8000548 <__aeabi_dmul>
 80070be:	4606      	mov	r6, r0
 80070c0:	460f      	mov	r7, r1
 80070c2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80070c6:	9616      	str	r6, [sp, #88]	; 0x58
 80070c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80070ca:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
 80070ce:	e7a2      	b.n	8007016 <_strtod_l+0x97e>
 80070d0:	f1ba 0f01 	cmp.w	sl, #1
 80070d4:	d103      	bne.n	80070de <_strtod_l+0xa46>
 80070d6:	f1bb 0f00 	cmp.w	fp, #0
 80070da:	f43f ad98 	beq.w	8006c0e <_strtod_l+0x576>
 80070de:	f04f 0800 	mov.w	r8, #0
 80070e2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80071b8 <_strtod_l+0xb20>
 80070e6:	e794      	b.n	8007012 <_strtod_l+0x97a>
 80070e8:	2600      	movs	r6, #0
 80070ea:	4f32      	ldr	r7, [pc, #200]	; (80071b4 <_strtod_l+0xb1c>)
 80070ec:	e7e9      	b.n	80070c2 <_strtod_l+0xa2a>
 80070ee:	4b31      	ldr	r3, [pc, #196]	; (80071b4 <_strtod_l+0xb1c>)
 80070f0:	4630      	mov	r0, r6
 80070f2:	4639      	mov	r1, r7
 80070f4:	2200      	movs	r2, #0
 80070f6:	f7f9 fa27 	bl	8000548 <__aeabi_dmul>
 80070fa:	9b08      	ldr	r3, [sp, #32]
 80070fc:	4606      	mov	r6, r0
 80070fe:	460f      	mov	r7, r1
 8007100:	b933      	cbnz	r3, 8007110 <_strtod_l+0xa78>
 8007102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007106:	9010      	str	r0, [sp, #64]	; 0x40
 8007108:	9311      	str	r3, [sp, #68]	; 0x44
 800710a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800710e:	e782      	b.n	8007016 <_strtod_l+0x97e>
 8007110:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007114:	e7f9      	b.n	800710a <_strtod_l+0xa72>
 8007116:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 800711a:	9b05      	ldr	r3, [sp, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1aa      	bne.n	8007076 <_strtod_l+0x9de>
 8007120:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007124:	0d1b      	lsrs	r3, r3, #20
 8007126:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007128:	051b      	lsls	r3, r3, #20
 800712a:	429a      	cmp	r2, r3
 800712c:	46d8      	mov	r8, fp
 800712e:	d1a2      	bne.n	8007076 <_strtod_l+0x9de>
 8007130:	4639      	mov	r1, r7
 8007132:	4630      	mov	r0, r6
 8007134:	f7f9 fcb8 	bl	8000aa8 <__aeabi_d2iz>
 8007138:	f7f9 f9a0 	bl	800047c <__aeabi_i2d>
 800713c:	460b      	mov	r3, r1
 800713e:	4602      	mov	r2, r0
 8007140:	4639      	mov	r1, r7
 8007142:	4630      	mov	r0, r6
 8007144:	f7f9 f84c 	bl	80001e0 <__aeabi_dsub>
 8007148:	9b08      	ldr	r3, [sp, #32]
 800714a:	4606      	mov	r6, r0
 800714c:	460f      	mov	r7, r1
 800714e:	b933      	cbnz	r3, 800715e <_strtod_l+0xac6>
 8007150:	f1ba 0f00 	cmp.w	sl, #0
 8007154:	d103      	bne.n	800715e <_strtod_l+0xac6>
 8007156:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800715a:	2b00      	cmp	r3, #0
 800715c:	d068      	beq.n	8007230 <_strtod_l+0xb98>
 800715e:	a30a      	add	r3, pc, #40	; (adr r3, 8007188 <_strtod_l+0xaf0>)
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	f7f9 fc60 	bl	8000a2c <__aeabi_dcmplt>
 800716c:	2800      	cmp	r0, #0
 800716e:	f47f ace8 	bne.w	8006b42 <_strtod_l+0x4aa>
 8007172:	a307      	add	r3, pc, #28	; (adr r3, 8007190 <_strtod_l+0xaf8>)
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	4630      	mov	r0, r6
 800717a:	4639      	mov	r1, r7
 800717c:	f7f9 fc74 	bl	8000a68 <__aeabi_dcmpgt>
 8007180:	2800      	cmp	r0, #0
 8007182:	f43f af78 	beq.w	8007076 <_strtod_l+0x9de>
 8007186:	e4dc      	b.n	8006b42 <_strtod_l+0x4aa>
 8007188:	94a03595 	.word	0x94a03595
 800718c:	3fdfffff 	.word	0x3fdfffff
 8007190:	35afe535 	.word	0x35afe535
 8007194:	3fe00000 	.word	0x3fe00000
 8007198:	000fffff 	.word	0x000fffff
 800719c:	7ff00000 	.word	0x7ff00000
 80071a0:	7fefffff 	.word	0x7fefffff
 80071a4:	39500000 	.word	0x39500000
 80071a8:	3ff00000 	.word	0x3ff00000
 80071ac:	7fe00000 	.word	0x7fe00000
 80071b0:	7c9fffff 	.word	0x7c9fffff
 80071b4:	3fe00000 	.word	0x3fe00000
 80071b8:	bff00000 	.word	0xbff00000
 80071bc:	9b05      	ldr	r3, [sp, #20]
 80071be:	b31b      	cbz	r3, 8007208 <_strtod_l+0xb70>
 80071c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80071c6:	d81f      	bhi.n	8007208 <_strtod_l+0xb70>
 80071c8:	a325      	add	r3, pc, #148	; (adr r3, 8007260 <_strtod_l+0xbc8>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	4630      	mov	r0, r6
 80071d0:	4639      	mov	r1, r7
 80071d2:	f7f9 fc35 	bl	8000a40 <__aeabi_dcmple>
 80071d6:	b190      	cbz	r0, 80071fe <_strtod_l+0xb66>
 80071d8:	4639      	mov	r1, r7
 80071da:	4630      	mov	r0, r6
 80071dc:	f7f9 fc8c 	bl	8000af8 <__aeabi_d2uiz>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	bf08      	it	eq
 80071e4:	2001      	moveq	r0, #1
 80071e6:	f7f9 f939 	bl	800045c <__aeabi_ui2d>
 80071ea:	9b08      	ldr	r3, [sp, #32]
 80071ec:	4606      	mov	r6, r0
 80071ee:	460f      	mov	r7, r1
 80071f0:	b9db      	cbnz	r3, 800722a <_strtod_l+0xb92>
 80071f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071f6:	9012      	str	r0, [sp, #72]	; 0x48
 80071f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80071fa:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
 80071fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007200:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 8007204:	eba3 0902 	sub.w	r9, r3, r2
 8007208:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800720c:	f000 feda 	bl	8007fc4 <__ulp>
 8007210:	4640      	mov	r0, r8
 8007212:	ec53 2b10 	vmov	r2, r3, d0
 8007216:	4649      	mov	r1, r9
 8007218:	f7f9 f996 	bl	8000548 <__aeabi_dmul>
 800721c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007220:	f7f8 ffe0 	bl	80001e4 <__adddf3>
 8007224:	4682      	mov	sl, r0
 8007226:	468b      	mov	fp, r1
 8007228:	e777      	b.n	800711a <_strtod_l+0xa82>
 800722a:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800722e:	e7e4      	b.n	80071fa <_strtod_l+0xb62>
 8007230:	a30d      	add	r3, pc, #52	; (adr r3, 8007268 <_strtod_l+0xbd0>)
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	f7f9 fbf9 	bl	8000a2c <__aeabi_dcmplt>
 800723a:	e7a1      	b.n	8007180 <_strtod_l+0xae8>
 800723c:	2300      	movs	r3, #0
 800723e:	9309      	str	r3, [sp, #36]	; 0x24
 8007240:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007242:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	f7ff ba6b 	b.w	8006720 <_strtod_l+0x88>
 800724a:	2b65      	cmp	r3, #101	; 0x65
 800724c:	f04f 0200 	mov.w	r2, #0
 8007250:	f43f abb6 	beq.w	80069c0 <_strtod_l+0x328>
 8007254:	4615      	mov	r5, r2
 8007256:	2101      	movs	r1, #1
 8007258:	f7ff badc 	b.w	8006814 <_strtod_l+0x17c>
 800725c:	f3af 8000 	nop.w
 8007260:	ffc00000 	.word	0xffc00000
 8007264:	41dfffff 	.word	0x41dfffff
 8007268:	94a03595 	.word	0x94a03595
 800726c:	3fcfffff 	.word	0x3fcfffff

08007270 <strtod>:
 8007270:	4b07      	ldr	r3, [pc, #28]	; (8007290 <strtod+0x20>)
 8007272:	4a08      	ldr	r2, [pc, #32]	; (8007294 <strtod+0x24>)
 8007274:	b410      	push	{r4}
 8007276:	681c      	ldr	r4, [r3, #0]
 8007278:	6a23      	ldr	r3, [r4, #32]
 800727a:	2b00      	cmp	r3, #0
 800727c:	bf08      	it	eq
 800727e:	4613      	moveq	r3, r2
 8007280:	460a      	mov	r2, r1
 8007282:	4601      	mov	r1, r0
 8007284:	4620      	mov	r0, r4
 8007286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800728a:	f7ff ba05 	b.w	8006698 <_strtod_l>
 800728e:	bf00      	nop
 8007290:	20000070 	.word	0x20000070
 8007294:	200000d4 	.word	0x200000d4

08007298 <_strtol_l.isra.0>:
 8007298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800729c:	4680      	mov	r8, r0
 800729e:	4689      	mov	r9, r1
 80072a0:	4692      	mov	sl, r2
 80072a2:	461f      	mov	r7, r3
 80072a4:	468b      	mov	fp, r1
 80072a6:	465d      	mov	r5, fp
 80072a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80072aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072ae:	f000 fba6 	bl	80079fe <__locale_ctype_ptr_l>
 80072b2:	4420      	add	r0, r4
 80072b4:	7846      	ldrb	r6, [r0, #1]
 80072b6:	f016 0608 	ands.w	r6, r6, #8
 80072ba:	d10b      	bne.n	80072d4 <_strtol_l.isra.0+0x3c>
 80072bc:	2c2d      	cmp	r4, #45	; 0x2d
 80072be:	d10b      	bne.n	80072d8 <_strtol_l.isra.0+0x40>
 80072c0:	782c      	ldrb	r4, [r5, #0]
 80072c2:	2601      	movs	r6, #1
 80072c4:	f10b 0502 	add.w	r5, fp, #2
 80072c8:	b167      	cbz	r7, 80072e4 <_strtol_l.isra.0+0x4c>
 80072ca:	2f10      	cmp	r7, #16
 80072cc:	d114      	bne.n	80072f8 <_strtol_l.isra.0+0x60>
 80072ce:	2c30      	cmp	r4, #48	; 0x30
 80072d0:	d00a      	beq.n	80072e8 <_strtol_l.isra.0+0x50>
 80072d2:	e011      	b.n	80072f8 <_strtol_l.isra.0+0x60>
 80072d4:	46ab      	mov	fp, r5
 80072d6:	e7e6      	b.n	80072a6 <_strtol_l.isra.0+0xe>
 80072d8:	2c2b      	cmp	r4, #43	; 0x2b
 80072da:	bf04      	itt	eq
 80072dc:	782c      	ldrbeq	r4, [r5, #0]
 80072de:	f10b 0502 	addeq.w	r5, fp, #2
 80072e2:	e7f1      	b.n	80072c8 <_strtol_l.isra.0+0x30>
 80072e4:	2c30      	cmp	r4, #48	; 0x30
 80072e6:	d127      	bne.n	8007338 <_strtol_l.isra.0+0xa0>
 80072e8:	782b      	ldrb	r3, [r5, #0]
 80072ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80072ee:	2b58      	cmp	r3, #88	; 0x58
 80072f0:	d14b      	bne.n	800738a <_strtol_l.isra.0+0xf2>
 80072f2:	786c      	ldrb	r4, [r5, #1]
 80072f4:	2710      	movs	r7, #16
 80072f6:	3502      	adds	r5, #2
 80072f8:	2e00      	cmp	r6, #0
 80072fa:	bf0c      	ite	eq
 80072fc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007300:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007304:	2200      	movs	r2, #0
 8007306:	fbb1 fef7 	udiv	lr, r1, r7
 800730a:	4610      	mov	r0, r2
 800730c:	fb07 1c1e 	mls	ip, r7, lr, r1
 8007310:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007314:	2b09      	cmp	r3, #9
 8007316:	d811      	bhi.n	800733c <_strtol_l.isra.0+0xa4>
 8007318:	461c      	mov	r4, r3
 800731a:	42a7      	cmp	r7, r4
 800731c:	dd1d      	ble.n	800735a <_strtol_l.isra.0+0xc2>
 800731e:	1c53      	adds	r3, r2, #1
 8007320:	d007      	beq.n	8007332 <_strtol_l.isra.0+0x9a>
 8007322:	4586      	cmp	lr, r0
 8007324:	d316      	bcc.n	8007354 <_strtol_l.isra.0+0xbc>
 8007326:	d101      	bne.n	800732c <_strtol_l.isra.0+0x94>
 8007328:	45a4      	cmp	ip, r4
 800732a:	db13      	blt.n	8007354 <_strtol_l.isra.0+0xbc>
 800732c:	fb00 4007 	mla	r0, r0, r7, r4
 8007330:	2201      	movs	r2, #1
 8007332:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007336:	e7eb      	b.n	8007310 <_strtol_l.isra.0+0x78>
 8007338:	270a      	movs	r7, #10
 800733a:	e7dd      	b.n	80072f8 <_strtol_l.isra.0+0x60>
 800733c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007340:	2b19      	cmp	r3, #25
 8007342:	d801      	bhi.n	8007348 <_strtol_l.isra.0+0xb0>
 8007344:	3c37      	subs	r4, #55	; 0x37
 8007346:	e7e8      	b.n	800731a <_strtol_l.isra.0+0x82>
 8007348:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800734c:	2b19      	cmp	r3, #25
 800734e:	d804      	bhi.n	800735a <_strtol_l.isra.0+0xc2>
 8007350:	3c57      	subs	r4, #87	; 0x57
 8007352:	e7e2      	b.n	800731a <_strtol_l.isra.0+0x82>
 8007354:	f04f 32ff 	mov.w	r2, #4294967295
 8007358:	e7eb      	b.n	8007332 <_strtol_l.isra.0+0x9a>
 800735a:	1c53      	adds	r3, r2, #1
 800735c:	d108      	bne.n	8007370 <_strtol_l.isra.0+0xd8>
 800735e:	2322      	movs	r3, #34	; 0x22
 8007360:	f8c8 3000 	str.w	r3, [r8]
 8007364:	4608      	mov	r0, r1
 8007366:	f1ba 0f00 	cmp.w	sl, #0
 800736a:	d107      	bne.n	800737c <_strtol_l.isra.0+0xe4>
 800736c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007370:	b106      	cbz	r6, 8007374 <_strtol_l.isra.0+0xdc>
 8007372:	4240      	negs	r0, r0
 8007374:	f1ba 0f00 	cmp.w	sl, #0
 8007378:	d00c      	beq.n	8007394 <_strtol_l.isra.0+0xfc>
 800737a:	b122      	cbz	r2, 8007386 <_strtol_l.isra.0+0xee>
 800737c:	3d01      	subs	r5, #1
 800737e:	f8ca 5000 	str.w	r5, [sl]
 8007382:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007386:	464d      	mov	r5, r9
 8007388:	e7f9      	b.n	800737e <_strtol_l.isra.0+0xe6>
 800738a:	2430      	movs	r4, #48	; 0x30
 800738c:	2f00      	cmp	r7, #0
 800738e:	d1b3      	bne.n	80072f8 <_strtol_l.isra.0+0x60>
 8007390:	2708      	movs	r7, #8
 8007392:	e7b1      	b.n	80072f8 <_strtol_l.isra.0+0x60>
 8007394:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007398 <strtol>:
 8007398:	4b08      	ldr	r3, [pc, #32]	; (80073bc <strtol+0x24>)
 800739a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800739c:	681c      	ldr	r4, [r3, #0]
 800739e:	4d08      	ldr	r5, [pc, #32]	; (80073c0 <strtol+0x28>)
 80073a0:	6a23      	ldr	r3, [r4, #32]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	bf08      	it	eq
 80073a6:	462b      	moveq	r3, r5
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	4613      	mov	r3, r2
 80073ac:	460a      	mov	r2, r1
 80073ae:	4601      	mov	r1, r0
 80073b0:	4620      	mov	r0, r4
 80073b2:	f7ff ff71 	bl	8007298 <_strtol_l.isra.0>
 80073b6:	b003      	add	sp, #12
 80073b8:	bd30      	pop	{r4, r5, pc}
 80073ba:	bf00      	nop
 80073bc:	20000070 	.word	0x20000070
 80073c0:	200000d4 	.word	0x200000d4

080073c4 <rshift>:
 80073c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073c6:	6906      	ldr	r6, [r0, #16]
 80073c8:	114b      	asrs	r3, r1, #5
 80073ca:	42b3      	cmp	r3, r6
 80073cc:	f100 0514 	add.w	r5, r0, #20
 80073d0:	da2b      	bge.n	800742a <rshift+0x66>
 80073d2:	f011 011f 	ands.w	r1, r1, #31
 80073d6:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80073da:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80073de:	d108      	bne.n	80073f2 <rshift+0x2e>
 80073e0:	4629      	mov	r1, r5
 80073e2:	42b2      	cmp	r2, r6
 80073e4:	460b      	mov	r3, r1
 80073e6:	d210      	bcs.n	800740a <rshift+0x46>
 80073e8:	f852 3b04 	ldr.w	r3, [r2], #4
 80073ec:	f841 3b04 	str.w	r3, [r1], #4
 80073f0:	e7f7      	b.n	80073e2 <rshift+0x1e>
 80073f2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 80073f6:	f1c1 0e20 	rsb	lr, r1, #32
 80073fa:	3204      	adds	r2, #4
 80073fc:	40cc      	lsrs	r4, r1
 80073fe:	462b      	mov	r3, r5
 8007400:	42b2      	cmp	r2, r6
 8007402:	d308      	bcc.n	8007416 <rshift+0x52>
 8007404:	601c      	str	r4, [r3, #0]
 8007406:	b104      	cbz	r4, 800740a <rshift+0x46>
 8007408:	3304      	adds	r3, #4
 800740a:	1b5b      	subs	r3, r3, r5
 800740c:	109b      	asrs	r3, r3, #2
 800740e:	6103      	str	r3, [r0, #16]
 8007410:	b903      	cbnz	r3, 8007414 <rshift+0x50>
 8007412:	6143      	str	r3, [r0, #20]
 8007414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007416:	6817      	ldr	r7, [r2, #0]
 8007418:	fa07 f70e 	lsl.w	r7, r7, lr
 800741c:	433c      	orrs	r4, r7
 800741e:	f843 4b04 	str.w	r4, [r3], #4
 8007422:	f852 4b04 	ldr.w	r4, [r2], #4
 8007426:	40cc      	lsrs	r4, r1
 8007428:	e7ea      	b.n	8007400 <rshift+0x3c>
 800742a:	462b      	mov	r3, r5
 800742c:	e7ed      	b.n	800740a <rshift+0x46>

0800742e <__hexdig_fun>:
 800742e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007432:	2b09      	cmp	r3, #9
 8007434:	d802      	bhi.n	800743c <__hexdig_fun+0xe>
 8007436:	3820      	subs	r0, #32
 8007438:	b2c0      	uxtb	r0, r0
 800743a:	4770      	bx	lr
 800743c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007440:	2b05      	cmp	r3, #5
 8007442:	d801      	bhi.n	8007448 <__hexdig_fun+0x1a>
 8007444:	3847      	subs	r0, #71	; 0x47
 8007446:	e7f7      	b.n	8007438 <__hexdig_fun+0xa>
 8007448:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800744c:	2b05      	cmp	r3, #5
 800744e:	d801      	bhi.n	8007454 <__hexdig_fun+0x26>
 8007450:	3827      	subs	r0, #39	; 0x27
 8007452:	e7f1      	b.n	8007438 <__hexdig_fun+0xa>
 8007454:	2000      	movs	r0, #0
 8007456:	4770      	bx	lr

08007458 <__gethex>:
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	b08b      	sub	sp, #44	; 0x2c
 800745e:	468a      	mov	sl, r1
 8007460:	9002      	str	r0, [sp, #8]
 8007462:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007464:	9306      	str	r3, [sp, #24]
 8007466:	4690      	mov	r8, r2
 8007468:	f000 facc 	bl	8007a04 <__localeconv_l>
 800746c:	6803      	ldr	r3, [r0, #0]
 800746e:	9303      	str	r3, [sp, #12]
 8007470:	4618      	mov	r0, r3
 8007472:	f7f8 fea9 	bl	80001c8 <strlen>
 8007476:	9b03      	ldr	r3, [sp, #12]
 8007478:	9001      	str	r0, [sp, #4]
 800747a:	4403      	add	r3, r0
 800747c:	f04f 0b00 	mov.w	fp, #0
 8007480:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007484:	9307      	str	r3, [sp, #28]
 8007486:	f8da 3000 	ldr.w	r3, [sl]
 800748a:	3302      	adds	r3, #2
 800748c:	461f      	mov	r7, r3
 800748e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007492:	2830      	cmp	r0, #48	; 0x30
 8007494:	d06c      	beq.n	8007570 <__gethex+0x118>
 8007496:	f7ff ffca 	bl	800742e <__hexdig_fun>
 800749a:	4604      	mov	r4, r0
 800749c:	2800      	cmp	r0, #0
 800749e:	d16a      	bne.n	8007576 <__gethex+0x11e>
 80074a0:	9a01      	ldr	r2, [sp, #4]
 80074a2:	9903      	ldr	r1, [sp, #12]
 80074a4:	4638      	mov	r0, r7
 80074a6:	f000 ff35 	bl	8008314 <strncmp>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d166      	bne.n	800757c <__gethex+0x124>
 80074ae:	9b01      	ldr	r3, [sp, #4]
 80074b0:	5cf8      	ldrb	r0, [r7, r3]
 80074b2:	18fe      	adds	r6, r7, r3
 80074b4:	f7ff ffbb 	bl	800742e <__hexdig_fun>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d062      	beq.n	8007582 <__gethex+0x12a>
 80074bc:	4633      	mov	r3, r6
 80074be:	7818      	ldrb	r0, [r3, #0]
 80074c0:	2830      	cmp	r0, #48	; 0x30
 80074c2:	461f      	mov	r7, r3
 80074c4:	f103 0301 	add.w	r3, r3, #1
 80074c8:	d0f9      	beq.n	80074be <__gethex+0x66>
 80074ca:	f7ff ffb0 	bl	800742e <__hexdig_fun>
 80074ce:	fab0 f580 	clz	r5, r0
 80074d2:	096d      	lsrs	r5, r5, #5
 80074d4:	4634      	mov	r4, r6
 80074d6:	f04f 0b01 	mov.w	fp, #1
 80074da:	463a      	mov	r2, r7
 80074dc:	4616      	mov	r6, r2
 80074de:	3201      	adds	r2, #1
 80074e0:	7830      	ldrb	r0, [r6, #0]
 80074e2:	f7ff ffa4 	bl	800742e <__hexdig_fun>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d1f8      	bne.n	80074dc <__gethex+0x84>
 80074ea:	9a01      	ldr	r2, [sp, #4]
 80074ec:	9903      	ldr	r1, [sp, #12]
 80074ee:	4630      	mov	r0, r6
 80074f0:	f000 ff10 	bl	8008314 <strncmp>
 80074f4:	b950      	cbnz	r0, 800750c <__gethex+0xb4>
 80074f6:	b954      	cbnz	r4, 800750e <__gethex+0xb6>
 80074f8:	9b01      	ldr	r3, [sp, #4]
 80074fa:	18f4      	adds	r4, r6, r3
 80074fc:	4622      	mov	r2, r4
 80074fe:	4616      	mov	r6, r2
 8007500:	3201      	adds	r2, #1
 8007502:	7830      	ldrb	r0, [r6, #0]
 8007504:	f7ff ff93 	bl	800742e <__hexdig_fun>
 8007508:	2800      	cmp	r0, #0
 800750a:	d1f8      	bne.n	80074fe <__gethex+0xa6>
 800750c:	b10c      	cbz	r4, 8007512 <__gethex+0xba>
 800750e:	1ba4      	subs	r4, r4, r6
 8007510:	00a4      	lsls	r4, r4, #2
 8007512:	7833      	ldrb	r3, [r6, #0]
 8007514:	2b50      	cmp	r3, #80	; 0x50
 8007516:	d001      	beq.n	800751c <__gethex+0xc4>
 8007518:	2b70      	cmp	r3, #112	; 0x70
 800751a:	d140      	bne.n	800759e <__gethex+0x146>
 800751c:	7873      	ldrb	r3, [r6, #1]
 800751e:	2b2b      	cmp	r3, #43	; 0x2b
 8007520:	d035      	beq.n	800758e <__gethex+0x136>
 8007522:	2b2d      	cmp	r3, #45	; 0x2d
 8007524:	d02f      	beq.n	8007586 <__gethex+0x12e>
 8007526:	1c71      	adds	r1, r6, #1
 8007528:	f04f 0900 	mov.w	r9, #0
 800752c:	7808      	ldrb	r0, [r1, #0]
 800752e:	f7ff ff7e 	bl	800742e <__hexdig_fun>
 8007532:	1e43      	subs	r3, r0, #1
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b18      	cmp	r3, #24
 8007538:	d831      	bhi.n	800759e <__gethex+0x146>
 800753a:	f1a0 0210 	sub.w	r2, r0, #16
 800753e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007542:	f7ff ff74 	bl	800742e <__hexdig_fun>
 8007546:	1e43      	subs	r3, r0, #1
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b18      	cmp	r3, #24
 800754c:	d922      	bls.n	8007594 <__gethex+0x13c>
 800754e:	f1b9 0f00 	cmp.w	r9, #0
 8007552:	d000      	beq.n	8007556 <__gethex+0xfe>
 8007554:	4252      	negs	r2, r2
 8007556:	4414      	add	r4, r2
 8007558:	f8ca 1000 	str.w	r1, [sl]
 800755c:	b30d      	cbz	r5, 80075a2 <__gethex+0x14a>
 800755e:	f1bb 0f00 	cmp.w	fp, #0
 8007562:	bf14      	ite	ne
 8007564:	2700      	movne	r7, #0
 8007566:	2706      	moveq	r7, #6
 8007568:	4638      	mov	r0, r7
 800756a:	b00b      	add	sp, #44	; 0x2c
 800756c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007570:	f10b 0b01 	add.w	fp, fp, #1
 8007574:	e78a      	b.n	800748c <__gethex+0x34>
 8007576:	2500      	movs	r5, #0
 8007578:	462c      	mov	r4, r5
 800757a:	e7ae      	b.n	80074da <__gethex+0x82>
 800757c:	463e      	mov	r6, r7
 800757e:	2501      	movs	r5, #1
 8007580:	e7c7      	b.n	8007512 <__gethex+0xba>
 8007582:	4604      	mov	r4, r0
 8007584:	e7fb      	b.n	800757e <__gethex+0x126>
 8007586:	f04f 0901 	mov.w	r9, #1
 800758a:	1cb1      	adds	r1, r6, #2
 800758c:	e7ce      	b.n	800752c <__gethex+0xd4>
 800758e:	f04f 0900 	mov.w	r9, #0
 8007592:	e7fa      	b.n	800758a <__gethex+0x132>
 8007594:	230a      	movs	r3, #10
 8007596:	fb03 0202 	mla	r2, r3, r2, r0
 800759a:	3a10      	subs	r2, #16
 800759c:	e7cf      	b.n	800753e <__gethex+0xe6>
 800759e:	4631      	mov	r1, r6
 80075a0:	e7da      	b.n	8007558 <__gethex+0x100>
 80075a2:	1bf3      	subs	r3, r6, r7
 80075a4:	3b01      	subs	r3, #1
 80075a6:	4629      	mov	r1, r5
 80075a8:	2b07      	cmp	r3, #7
 80075aa:	dc49      	bgt.n	8007640 <__gethex+0x1e8>
 80075ac:	9802      	ldr	r0, [sp, #8]
 80075ae:	f000 fa48 	bl	8007a42 <_Balloc>
 80075b2:	9b01      	ldr	r3, [sp, #4]
 80075b4:	f100 0914 	add.w	r9, r0, #20
 80075b8:	f04f 0b00 	mov.w	fp, #0
 80075bc:	f1c3 0301 	rsb	r3, r3, #1
 80075c0:	4605      	mov	r5, r0
 80075c2:	f8cd 9010 	str.w	r9, [sp, #16]
 80075c6:	46da      	mov	sl, fp
 80075c8:	9308      	str	r3, [sp, #32]
 80075ca:	42b7      	cmp	r7, r6
 80075cc:	d33b      	bcc.n	8007646 <__gethex+0x1ee>
 80075ce:	9804      	ldr	r0, [sp, #16]
 80075d0:	f840 ab04 	str.w	sl, [r0], #4
 80075d4:	eba0 0009 	sub.w	r0, r0, r9
 80075d8:	1080      	asrs	r0, r0, #2
 80075da:	6128      	str	r0, [r5, #16]
 80075dc:	0147      	lsls	r7, r0, #5
 80075de:	4650      	mov	r0, sl
 80075e0:	f000 faf3 	bl	8007bca <__hi0bits>
 80075e4:	f8d8 6000 	ldr.w	r6, [r8]
 80075e8:	1a3f      	subs	r7, r7, r0
 80075ea:	42b7      	cmp	r7, r6
 80075ec:	dd64      	ble.n	80076b8 <__gethex+0x260>
 80075ee:	1bbf      	subs	r7, r7, r6
 80075f0:	4639      	mov	r1, r7
 80075f2:	4628      	mov	r0, r5
 80075f4:	f000 fdf1 	bl	80081da <__any_on>
 80075f8:	4682      	mov	sl, r0
 80075fa:	b178      	cbz	r0, 800761c <__gethex+0x1c4>
 80075fc:	1e7b      	subs	r3, r7, #1
 80075fe:	1159      	asrs	r1, r3, #5
 8007600:	f003 021f 	and.w	r2, r3, #31
 8007604:	f04f 0a01 	mov.w	sl, #1
 8007608:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800760c:	fa0a f202 	lsl.w	r2, sl, r2
 8007610:	420a      	tst	r2, r1
 8007612:	d003      	beq.n	800761c <__gethex+0x1c4>
 8007614:	4553      	cmp	r3, sl
 8007616:	dc46      	bgt.n	80076a6 <__gethex+0x24e>
 8007618:	f04f 0a02 	mov.w	sl, #2
 800761c:	4639      	mov	r1, r7
 800761e:	4628      	mov	r0, r5
 8007620:	f7ff fed0 	bl	80073c4 <rshift>
 8007624:	443c      	add	r4, r7
 8007626:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800762a:	429c      	cmp	r4, r3
 800762c:	dd52      	ble.n	80076d4 <__gethex+0x27c>
 800762e:	4629      	mov	r1, r5
 8007630:	9802      	ldr	r0, [sp, #8]
 8007632:	f000 fa3a 	bl	8007aaa <_Bfree>
 8007636:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007638:	2300      	movs	r3, #0
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	27a3      	movs	r7, #163	; 0xa3
 800763e:	e793      	b.n	8007568 <__gethex+0x110>
 8007640:	3101      	adds	r1, #1
 8007642:	105b      	asrs	r3, r3, #1
 8007644:	e7b0      	b.n	80075a8 <__gethex+0x150>
 8007646:	1e73      	subs	r3, r6, #1
 8007648:	9305      	str	r3, [sp, #20]
 800764a:	9a07      	ldr	r2, [sp, #28]
 800764c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007650:	4293      	cmp	r3, r2
 8007652:	d018      	beq.n	8007686 <__gethex+0x22e>
 8007654:	f1bb 0f20 	cmp.w	fp, #32
 8007658:	d107      	bne.n	800766a <__gethex+0x212>
 800765a:	9b04      	ldr	r3, [sp, #16]
 800765c:	f8c3 a000 	str.w	sl, [r3]
 8007660:	3304      	adds	r3, #4
 8007662:	f04f 0a00 	mov.w	sl, #0
 8007666:	9304      	str	r3, [sp, #16]
 8007668:	46d3      	mov	fp, sl
 800766a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800766e:	f7ff fede 	bl	800742e <__hexdig_fun>
 8007672:	f000 000f 	and.w	r0, r0, #15
 8007676:	fa00 f00b 	lsl.w	r0, r0, fp
 800767a:	ea4a 0a00 	orr.w	sl, sl, r0
 800767e:	f10b 0b04 	add.w	fp, fp, #4
 8007682:	9b05      	ldr	r3, [sp, #20]
 8007684:	e00d      	b.n	80076a2 <__gethex+0x24a>
 8007686:	9b05      	ldr	r3, [sp, #20]
 8007688:	9a08      	ldr	r2, [sp, #32]
 800768a:	4413      	add	r3, r2
 800768c:	429f      	cmp	r7, r3
 800768e:	d8e1      	bhi.n	8007654 <__gethex+0x1fc>
 8007690:	4618      	mov	r0, r3
 8007692:	9a01      	ldr	r2, [sp, #4]
 8007694:	9903      	ldr	r1, [sp, #12]
 8007696:	9309      	str	r3, [sp, #36]	; 0x24
 8007698:	f000 fe3c 	bl	8008314 <strncmp>
 800769c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769e:	2800      	cmp	r0, #0
 80076a0:	d1d8      	bne.n	8007654 <__gethex+0x1fc>
 80076a2:	461e      	mov	r6, r3
 80076a4:	e791      	b.n	80075ca <__gethex+0x172>
 80076a6:	1eb9      	subs	r1, r7, #2
 80076a8:	4628      	mov	r0, r5
 80076aa:	f000 fd96 	bl	80081da <__any_on>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d0b2      	beq.n	8007618 <__gethex+0x1c0>
 80076b2:	f04f 0a03 	mov.w	sl, #3
 80076b6:	e7b1      	b.n	800761c <__gethex+0x1c4>
 80076b8:	da09      	bge.n	80076ce <__gethex+0x276>
 80076ba:	1bf7      	subs	r7, r6, r7
 80076bc:	4629      	mov	r1, r5
 80076be:	463a      	mov	r2, r7
 80076c0:	9802      	ldr	r0, [sp, #8]
 80076c2:	f000 fbb5 	bl	8007e30 <__lshift>
 80076c6:	1be4      	subs	r4, r4, r7
 80076c8:	4605      	mov	r5, r0
 80076ca:	f100 0914 	add.w	r9, r0, #20
 80076ce:	f04f 0a00 	mov.w	sl, #0
 80076d2:	e7a8      	b.n	8007626 <__gethex+0x1ce>
 80076d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80076d8:	4284      	cmp	r4, r0
 80076da:	da6a      	bge.n	80077b2 <__gethex+0x35a>
 80076dc:	1b04      	subs	r4, r0, r4
 80076de:	42a6      	cmp	r6, r4
 80076e0:	dc2e      	bgt.n	8007740 <__gethex+0x2e8>
 80076e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d022      	beq.n	8007730 <__gethex+0x2d8>
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d024      	beq.n	8007738 <__gethex+0x2e0>
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d115      	bne.n	800771e <__gethex+0x2c6>
 80076f2:	42a6      	cmp	r6, r4
 80076f4:	d113      	bne.n	800771e <__gethex+0x2c6>
 80076f6:	2e01      	cmp	r6, #1
 80076f8:	dc0b      	bgt.n	8007712 <__gethex+0x2ba>
 80076fa:	9a06      	ldr	r2, [sp, #24]
 80076fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	2301      	movs	r3, #1
 8007704:	612b      	str	r3, [r5, #16]
 8007706:	f8c9 3000 	str.w	r3, [r9]
 800770a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800770c:	2762      	movs	r7, #98	; 0x62
 800770e:	601d      	str	r5, [r3, #0]
 8007710:	e72a      	b.n	8007568 <__gethex+0x110>
 8007712:	1e71      	subs	r1, r6, #1
 8007714:	4628      	mov	r0, r5
 8007716:	f000 fd60 	bl	80081da <__any_on>
 800771a:	2800      	cmp	r0, #0
 800771c:	d1ed      	bne.n	80076fa <__gethex+0x2a2>
 800771e:	4629      	mov	r1, r5
 8007720:	9802      	ldr	r0, [sp, #8]
 8007722:	f000 f9c2 	bl	8007aaa <_Bfree>
 8007726:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007728:	2300      	movs	r3, #0
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	2750      	movs	r7, #80	; 0x50
 800772e:	e71b      	b.n	8007568 <__gethex+0x110>
 8007730:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0e1      	beq.n	80076fa <__gethex+0x2a2>
 8007736:	e7f2      	b.n	800771e <__gethex+0x2c6>
 8007738:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1dd      	bne.n	80076fa <__gethex+0x2a2>
 800773e:	e7ee      	b.n	800771e <__gethex+0x2c6>
 8007740:	1e67      	subs	r7, r4, #1
 8007742:	f1ba 0f00 	cmp.w	sl, #0
 8007746:	d131      	bne.n	80077ac <__gethex+0x354>
 8007748:	b127      	cbz	r7, 8007754 <__gethex+0x2fc>
 800774a:	4639      	mov	r1, r7
 800774c:	4628      	mov	r0, r5
 800774e:	f000 fd44 	bl	80081da <__any_on>
 8007752:	4682      	mov	sl, r0
 8007754:	117a      	asrs	r2, r7, #5
 8007756:	2301      	movs	r3, #1
 8007758:	f007 071f 	and.w	r7, r7, #31
 800775c:	fa03 f707 	lsl.w	r7, r3, r7
 8007760:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007764:	4621      	mov	r1, r4
 8007766:	421f      	tst	r7, r3
 8007768:	4628      	mov	r0, r5
 800776a:	bf18      	it	ne
 800776c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007770:	1b36      	subs	r6, r6, r4
 8007772:	f7ff fe27 	bl	80073c4 <rshift>
 8007776:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800777a:	2702      	movs	r7, #2
 800777c:	f1ba 0f00 	cmp.w	sl, #0
 8007780:	d045      	beq.n	800780e <__gethex+0x3b6>
 8007782:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007786:	2b02      	cmp	r3, #2
 8007788:	d015      	beq.n	80077b6 <__gethex+0x35e>
 800778a:	2b03      	cmp	r3, #3
 800778c:	d017      	beq.n	80077be <__gethex+0x366>
 800778e:	2b01      	cmp	r3, #1
 8007790:	d109      	bne.n	80077a6 <__gethex+0x34e>
 8007792:	f01a 0f02 	tst.w	sl, #2
 8007796:	d006      	beq.n	80077a6 <__gethex+0x34e>
 8007798:	f8d9 3000 	ldr.w	r3, [r9]
 800779c:	ea4a 0a03 	orr.w	sl, sl, r3
 80077a0:	f01a 0f01 	tst.w	sl, #1
 80077a4:	d10e      	bne.n	80077c4 <__gethex+0x36c>
 80077a6:	f047 0710 	orr.w	r7, r7, #16
 80077aa:	e030      	b.n	800780e <__gethex+0x3b6>
 80077ac:	f04f 0a01 	mov.w	sl, #1
 80077b0:	e7d0      	b.n	8007754 <__gethex+0x2fc>
 80077b2:	2701      	movs	r7, #1
 80077b4:	e7e2      	b.n	800777c <__gethex+0x324>
 80077b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077b8:	f1c3 0301 	rsb	r3, r3, #1
 80077bc:	9315      	str	r3, [sp, #84]	; 0x54
 80077be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d0f0      	beq.n	80077a6 <__gethex+0x34e>
 80077c4:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80077c8:	f105 0314 	add.w	r3, r5, #20
 80077cc:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80077d0:	eb03 010a 	add.w	r1, r3, sl
 80077d4:	2000      	movs	r0, #0
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80077dc:	d01c      	beq.n	8007818 <__gethex+0x3c0>
 80077de:	3201      	adds	r2, #1
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	2f02      	cmp	r7, #2
 80077e4:	f105 0314 	add.w	r3, r5, #20
 80077e8:	d138      	bne.n	800785c <__gethex+0x404>
 80077ea:	f8d8 2000 	ldr.w	r2, [r8]
 80077ee:	3a01      	subs	r2, #1
 80077f0:	4296      	cmp	r6, r2
 80077f2:	d10a      	bne.n	800780a <__gethex+0x3b2>
 80077f4:	1171      	asrs	r1, r6, #5
 80077f6:	2201      	movs	r2, #1
 80077f8:	f006 061f 	and.w	r6, r6, #31
 80077fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007800:	fa02 f606 	lsl.w	r6, r2, r6
 8007804:	421e      	tst	r6, r3
 8007806:	bf18      	it	ne
 8007808:	4617      	movne	r7, r2
 800780a:	f047 0720 	orr.w	r7, r7, #32
 800780e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007810:	601d      	str	r5, [r3, #0]
 8007812:	9b06      	ldr	r3, [sp, #24]
 8007814:	601c      	str	r4, [r3, #0]
 8007816:	e6a7      	b.n	8007568 <__gethex+0x110>
 8007818:	f843 0b04 	str.w	r0, [r3], #4
 800781c:	4299      	cmp	r1, r3
 800781e:	d8da      	bhi.n	80077d6 <__gethex+0x37e>
 8007820:	68ab      	ldr	r3, [r5, #8]
 8007822:	4599      	cmp	r9, r3
 8007824:	db12      	blt.n	800784c <__gethex+0x3f4>
 8007826:	6869      	ldr	r1, [r5, #4]
 8007828:	9802      	ldr	r0, [sp, #8]
 800782a:	3101      	adds	r1, #1
 800782c:	f000 f909 	bl	8007a42 <_Balloc>
 8007830:	692a      	ldr	r2, [r5, #16]
 8007832:	3202      	adds	r2, #2
 8007834:	f105 010c 	add.w	r1, r5, #12
 8007838:	4683      	mov	fp, r0
 800783a:	0092      	lsls	r2, r2, #2
 800783c:	300c      	adds	r0, #12
 800783e:	f000 f8f5 	bl	8007a2c <memcpy>
 8007842:	4629      	mov	r1, r5
 8007844:	9802      	ldr	r0, [sp, #8]
 8007846:	f000 f930 	bl	8007aaa <_Bfree>
 800784a:	465d      	mov	r5, fp
 800784c:	692b      	ldr	r3, [r5, #16]
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007854:	612a      	str	r2, [r5, #16]
 8007856:	2201      	movs	r2, #1
 8007858:	615a      	str	r2, [r3, #20]
 800785a:	e7c2      	b.n	80077e2 <__gethex+0x38a>
 800785c:	692a      	ldr	r2, [r5, #16]
 800785e:	4591      	cmp	r9, r2
 8007860:	da0b      	bge.n	800787a <__gethex+0x422>
 8007862:	2101      	movs	r1, #1
 8007864:	4628      	mov	r0, r5
 8007866:	f7ff fdad 	bl	80073c4 <rshift>
 800786a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800786e:	3401      	adds	r4, #1
 8007870:	429c      	cmp	r4, r3
 8007872:	f73f aedc 	bgt.w	800762e <__gethex+0x1d6>
 8007876:	2701      	movs	r7, #1
 8007878:	e7c7      	b.n	800780a <__gethex+0x3b2>
 800787a:	f016 061f 	ands.w	r6, r6, #31
 800787e:	d0fa      	beq.n	8007876 <__gethex+0x41e>
 8007880:	449a      	add	sl, r3
 8007882:	f1c6 0620 	rsb	r6, r6, #32
 8007886:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800788a:	f000 f99e 	bl	8007bca <__hi0bits>
 800788e:	42b0      	cmp	r0, r6
 8007890:	dbe7      	blt.n	8007862 <__gethex+0x40a>
 8007892:	e7f0      	b.n	8007876 <__gethex+0x41e>

08007894 <L_shift>:
 8007894:	f1c2 0208 	rsb	r2, r2, #8
 8007898:	0092      	lsls	r2, r2, #2
 800789a:	b570      	push	{r4, r5, r6, lr}
 800789c:	f1c2 0620 	rsb	r6, r2, #32
 80078a0:	6843      	ldr	r3, [r0, #4]
 80078a2:	6804      	ldr	r4, [r0, #0]
 80078a4:	fa03 f506 	lsl.w	r5, r3, r6
 80078a8:	432c      	orrs	r4, r5
 80078aa:	40d3      	lsrs	r3, r2
 80078ac:	6004      	str	r4, [r0, #0]
 80078ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80078b2:	4288      	cmp	r0, r1
 80078b4:	d3f4      	bcc.n	80078a0 <L_shift+0xc>
 80078b6:	bd70      	pop	{r4, r5, r6, pc}

080078b8 <__match>:
 80078b8:	b530      	push	{r4, r5, lr}
 80078ba:	6803      	ldr	r3, [r0, #0]
 80078bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078c0:	3301      	adds	r3, #1
 80078c2:	b914      	cbnz	r4, 80078ca <__match+0x12>
 80078c4:	6003      	str	r3, [r0, #0]
 80078c6:	2001      	movs	r0, #1
 80078c8:	bd30      	pop	{r4, r5, pc}
 80078ca:	781a      	ldrb	r2, [r3, #0]
 80078cc:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80078d0:	2d19      	cmp	r5, #25
 80078d2:	bf98      	it	ls
 80078d4:	3220      	addls	r2, #32
 80078d6:	42a2      	cmp	r2, r4
 80078d8:	d0f0      	beq.n	80078bc <__match+0x4>
 80078da:	2000      	movs	r0, #0
 80078dc:	bd30      	pop	{r4, r5, pc}

080078de <__hexnan>:
 80078de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e2:	680b      	ldr	r3, [r1, #0]
 80078e4:	6801      	ldr	r1, [r0, #0]
 80078e6:	115f      	asrs	r7, r3, #5
 80078e8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80078ec:	f013 031f 	ands.w	r3, r3, #31
 80078f0:	b087      	sub	sp, #28
 80078f2:	bf18      	it	ne
 80078f4:	3704      	addne	r7, #4
 80078f6:	2500      	movs	r5, #0
 80078f8:	1f3e      	subs	r6, r7, #4
 80078fa:	4682      	mov	sl, r0
 80078fc:	4690      	mov	r8, r2
 80078fe:	9302      	str	r3, [sp, #8]
 8007900:	f847 5c04 	str.w	r5, [r7, #-4]
 8007904:	46b1      	mov	r9, r6
 8007906:	4634      	mov	r4, r6
 8007908:	9501      	str	r5, [sp, #4]
 800790a:	46ab      	mov	fp, r5
 800790c:	784a      	ldrb	r2, [r1, #1]
 800790e:	1c4b      	adds	r3, r1, #1
 8007910:	9303      	str	r3, [sp, #12]
 8007912:	b342      	cbz	r2, 8007966 <__hexnan+0x88>
 8007914:	4610      	mov	r0, r2
 8007916:	9105      	str	r1, [sp, #20]
 8007918:	9204      	str	r2, [sp, #16]
 800791a:	f7ff fd88 	bl	800742e <__hexdig_fun>
 800791e:	2800      	cmp	r0, #0
 8007920:	d143      	bne.n	80079aa <__hexnan+0xcc>
 8007922:	9a04      	ldr	r2, [sp, #16]
 8007924:	9905      	ldr	r1, [sp, #20]
 8007926:	2a20      	cmp	r2, #32
 8007928:	d818      	bhi.n	800795c <__hexnan+0x7e>
 800792a:	9b01      	ldr	r3, [sp, #4]
 800792c:	459b      	cmp	fp, r3
 800792e:	dd13      	ble.n	8007958 <__hexnan+0x7a>
 8007930:	454c      	cmp	r4, r9
 8007932:	d206      	bcs.n	8007942 <__hexnan+0x64>
 8007934:	2d07      	cmp	r5, #7
 8007936:	dc04      	bgt.n	8007942 <__hexnan+0x64>
 8007938:	462a      	mov	r2, r5
 800793a:	4649      	mov	r1, r9
 800793c:	4620      	mov	r0, r4
 800793e:	f7ff ffa9 	bl	8007894 <L_shift>
 8007942:	4544      	cmp	r4, r8
 8007944:	d944      	bls.n	80079d0 <__hexnan+0xf2>
 8007946:	2300      	movs	r3, #0
 8007948:	f1a4 0904 	sub.w	r9, r4, #4
 800794c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007950:	f8cd b004 	str.w	fp, [sp, #4]
 8007954:	464c      	mov	r4, r9
 8007956:	461d      	mov	r5, r3
 8007958:	9903      	ldr	r1, [sp, #12]
 800795a:	e7d7      	b.n	800790c <__hexnan+0x2e>
 800795c:	2a29      	cmp	r2, #41	; 0x29
 800795e:	d14a      	bne.n	80079f6 <__hexnan+0x118>
 8007960:	3102      	adds	r1, #2
 8007962:	f8ca 1000 	str.w	r1, [sl]
 8007966:	f1bb 0f00 	cmp.w	fp, #0
 800796a:	d044      	beq.n	80079f6 <__hexnan+0x118>
 800796c:	454c      	cmp	r4, r9
 800796e:	d206      	bcs.n	800797e <__hexnan+0xa0>
 8007970:	2d07      	cmp	r5, #7
 8007972:	dc04      	bgt.n	800797e <__hexnan+0xa0>
 8007974:	462a      	mov	r2, r5
 8007976:	4649      	mov	r1, r9
 8007978:	4620      	mov	r0, r4
 800797a:	f7ff ff8b 	bl	8007894 <L_shift>
 800797e:	4544      	cmp	r4, r8
 8007980:	d928      	bls.n	80079d4 <__hexnan+0xf6>
 8007982:	4643      	mov	r3, r8
 8007984:	f854 2b04 	ldr.w	r2, [r4], #4
 8007988:	f843 2b04 	str.w	r2, [r3], #4
 800798c:	42a6      	cmp	r6, r4
 800798e:	d2f9      	bcs.n	8007984 <__hexnan+0xa6>
 8007990:	2200      	movs	r2, #0
 8007992:	f843 2b04 	str.w	r2, [r3], #4
 8007996:	429e      	cmp	r6, r3
 8007998:	d2fb      	bcs.n	8007992 <__hexnan+0xb4>
 800799a:	6833      	ldr	r3, [r6, #0]
 800799c:	b91b      	cbnz	r3, 80079a6 <__hexnan+0xc8>
 800799e:	4546      	cmp	r6, r8
 80079a0:	d127      	bne.n	80079f2 <__hexnan+0x114>
 80079a2:	2301      	movs	r3, #1
 80079a4:	6033      	str	r3, [r6, #0]
 80079a6:	2005      	movs	r0, #5
 80079a8:	e026      	b.n	80079f8 <__hexnan+0x11a>
 80079aa:	3501      	adds	r5, #1
 80079ac:	2d08      	cmp	r5, #8
 80079ae:	f10b 0b01 	add.w	fp, fp, #1
 80079b2:	dd06      	ble.n	80079c2 <__hexnan+0xe4>
 80079b4:	4544      	cmp	r4, r8
 80079b6:	d9cf      	bls.n	8007958 <__hexnan+0x7a>
 80079b8:	2300      	movs	r3, #0
 80079ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80079be:	2501      	movs	r5, #1
 80079c0:	3c04      	subs	r4, #4
 80079c2:	6822      	ldr	r2, [r4, #0]
 80079c4:	f000 000f 	and.w	r0, r0, #15
 80079c8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80079cc:	6020      	str	r0, [r4, #0]
 80079ce:	e7c3      	b.n	8007958 <__hexnan+0x7a>
 80079d0:	2508      	movs	r5, #8
 80079d2:	e7c1      	b.n	8007958 <__hexnan+0x7a>
 80079d4:	9b02      	ldr	r3, [sp, #8]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0df      	beq.n	800799a <__hexnan+0xbc>
 80079da:	f04f 32ff 	mov.w	r2, #4294967295
 80079de:	f1c3 0320 	rsb	r3, r3, #32
 80079e2:	fa22 f303 	lsr.w	r3, r2, r3
 80079e6:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80079ea:	401a      	ands	r2, r3
 80079ec:	f847 2c04 	str.w	r2, [r7, #-4]
 80079f0:	e7d3      	b.n	800799a <__hexnan+0xbc>
 80079f2:	3e04      	subs	r6, #4
 80079f4:	e7d1      	b.n	800799a <__hexnan+0xbc>
 80079f6:	2004      	movs	r0, #4
 80079f8:	b007      	add	sp, #28
 80079fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079fe <__locale_ctype_ptr_l>:
 80079fe:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007a02:	4770      	bx	lr

08007a04 <__localeconv_l>:
 8007a04:	30f0      	adds	r0, #240	; 0xf0
 8007a06:	4770      	bx	lr

08007a08 <__ascii_mbtowc>:
 8007a08:	b082      	sub	sp, #8
 8007a0a:	b901      	cbnz	r1, 8007a0e <__ascii_mbtowc+0x6>
 8007a0c:	a901      	add	r1, sp, #4
 8007a0e:	b142      	cbz	r2, 8007a22 <__ascii_mbtowc+0x1a>
 8007a10:	b14b      	cbz	r3, 8007a26 <__ascii_mbtowc+0x1e>
 8007a12:	7813      	ldrb	r3, [r2, #0]
 8007a14:	600b      	str	r3, [r1, #0]
 8007a16:	7812      	ldrb	r2, [r2, #0]
 8007a18:	1c10      	adds	r0, r2, #0
 8007a1a:	bf18      	it	ne
 8007a1c:	2001      	movne	r0, #1
 8007a1e:	b002      	add	sp, #8
 8007a20:	4770      	bx	lr
 8007a22:	4610      	mov	r0, r2
 8007a24:	e7fb      	b.n	8007a1e <__ascii_mbtowc+0x16>
 8007a26:	f06f 0001 	mvn.w	r0, #1
 8007a2a:	e7f8      	b.n	8007a1e <__ascii_mbtowc+0x16>

08007a2c <memcpy>:
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	1e43      	subs	r3, r0, #1
 8007a30:	440a      	add	r2, r1
 8007a32:	4291      	cmp	r1, r2
 8007a34:	d100      	bne.n	8007a38 <memcpy+0xc>
 8007a36:	bd10      	pop	{r4, pc}
 8007a38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a40:	e7f7      	b.n	8007a32 <memcpy+0x6>

08007a42 <_Balloc>:
 8007a42:	b570      	push	{r4, r5, r6, lr}
 8007a44:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a46:	4604      	mov	r4, r0
 8007a48:	460e      	mov	r6, r1
 8007a4a:	b93d      	cbnz	r5, 8007a5c <_Balloc+0x1a>
 8007a4c:	2010      	movs	r0, #16
 8007a4e:	f000 fc81 	bl	8008354 <malloc>
 8007a52:	6260      	str	r0, [r4, #36]	; 0x24
 8007a54:	6045      	str	r5, [r0, #4]
 8007a56:	6085      	str	r5, [r0, #8]
 8007a58:	6005      	str	r5, [r0, #0]
 8007a5a:	60c5      	str	r5, [r0, #12]
 8007a5c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007a5e:	68eb      	ldr	r3, [r5, #12]
 8007a60:	b183      	cbz	r3, 8007a84 <_Balloc+0x42>
 8007a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007a6a:	b9b8      	cbnz	r0, 8007a9c <_Balloc+0x5a>
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	fa01 f506 	lsl.w	r5, r1, r6
 8007a72:	1d6a      	adds	r2, r5, #5
 8007a74:	0092      	lsls	r2, r2, #2
 8007a76:	4620      	mov	r0, r4
 8007a78:	f000 fbd0 	bl	800821c <_calloc_r>
 8007a7c:	b160      	cbz	r0, 8007a98 <_Balloc+0x56>
 8007a7e:	6046      	str	r6, [r0, #4]
 8007a80:	6085      	str	r5, [r0, #8]
 8007a82:	e00e      	b.n	8007aa2 <_Balloc+0x60>
 8007a84:	2221      	movs	r2, #33	; 0x21
 8007a86:	2104      	movs	r1, #4
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 fbc7 	bl	800821c <_calloc_r>
 8007a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a90:	60e8      	str	r0, [r5, #12]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e4      	bne.n	8007a62 <_Balloc+0x20>
 8007a98:	2000      	movs	r0, #0
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
 8007a9c:	6802      	ldr	r2, [r0, #0]
 8007a9e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	6103      	str	r3, [r0, #16]
 8007aa6:	60c3      	str	r3, [r0, #12]
 8007aa8:	bd70      	pop	{r4, r5, r6, pc}

08007aaa <_Bfree>:
 8007aaa:	b570      	push	{r4, r5, r6, lr}
 8007aac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007aae:	4606      	mov	r6, r0
 8007ab0:	460d      	mov	r5, r1
 8007ab2:	b93c      	cbnz	r4, 8007ac4 <_Bfree+0x1a>
 8007ab4:	2010      	movs	r0, #16
 8007ab6:	f000 fc4d 	bl	8008354 <malloc>
 8007aba:	6270      	str	r0, [r6, #36]	; 0x24
 8007abc:	6044      	str	r4, [r0, #4]
 8007abe:	6084      	str	r4, [r0, #8]
 8007ac0:	6004      	str	r4, [r0, #0]
 8007ac2:	60c4      	str	r4, [r0, #12]
 8007ac4:	b13d      	cbz	r5, 8007ad6 <_Bfree+0x2c>
 8007ac6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007ac8:	686a      	ldr	r2, [r5, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ad0:	6029      	str	r1, [r5, #0]
 8007ad2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}

08007ad8 <__multadd>:
 8007ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007adc:	690d      	ldr	r5, [r1, #16]
 8007ade:	461f      	mov	r7, r3
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	f101 0e14 	add.w	lr, r1, #20
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f8de 0000 	ldr.w	r0, [lr]
 8007aee:	b281      	uxth	r1, r0
 8007af0:	fb02 7101 	mla	r1, r2, r1, r7
 8007af4:	0c0f      	lsrs	r7, r1, #16
 8007af6:	0c00      	lsrs	r0, r0, #16
 8007af8:	fb02 7000 	mla	r0, r2, r0, r7
 8007afc:	b289      	uxth	r1, r1
 8007afe:	3301      	adds	r3, #1
 8007b00:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007b04:	429d      	cmp	r5, r3
 8007b06:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007b0a:	f84e 1b04 	str.w	r1, [lr], #4
 8007b0e:	dcec      	bgt.n	8007aea <__multadd+0x12>
 8007b10:	b1d7      	cbz	r7, 8007b48 <__multadd+0x70>
 8007b12:	68a3      	ldr	r3, [r4, #8]
 8007b14:	429d      	cmp	r5, r3
 8007b16:	db12      	blt.n	8007b3e <__multadd+0x66>
 8007b18:	6861      	ldr	r1, [r4, #4]
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	3101      	adds	r1, #1
 8007b1e:	f7ff ff90 	bl	8007a42 <_Balloc>
 8007b22:	6922      	ldr	r2, [r4, #16]
 8007b24:	3202      	adds	r2, #2
 8007b26:	f104 010c 	add.w	r1, r4, #12
 8007b2a:	4680      	mov	r8, r0
 8007b2c:	0092      	lsls	r2, r2, #2
 8007b2e:	300c      	adds	r0, #12
 8007b30:	f7ff ff7c 	bl	8007a2c <memcpy>
 8007b34:	4621      	mov	r1, r4
 8007b36:	4630      	mov	r0, r6
 8007b38:	f7ff ffb7 	bl	8007aaa <_Bfree>
 8007b3c:	4644      	mov	r4, r8
 8007b3e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b42:	3501      	adds	r5, #1
 8007b44:	615f      	str	r7, [r3, #20]
 8007b46:	6125      	str	r5, [r4, #16]
 8007b48:	4620      	mov	r0, r4
 8007b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007b4e <__s2b>:
 8007b4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b52:	460c      	mov	r4, r1
 8007b54:	4615      	mov	r5, r2
 8007b56:	461f      	mov	r7, r3
 8007b58:	2209      	movs	r2, #9
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b62:	2100      	movs	r1, #0
 8007b64:	2201      	movs	r2, #1
 8007b66:	429a      	cmp	r2, r3
 8007b68:	db20      	blt.n	8007bac <__s2b+0x5e>
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f7ff ff69 	bl	8007a42 <_Balloc>
 8007b70:	9b08      	ldr	r3, [sp, #32]
 8007b72:	6143      	str	r3, [r0, #20]
 8007b74:	2d09      	cmp	r5, #9
 8007b76:	f04f 0301 	mov.w	r3, #1
 8007b7a:	6103      	str	r3, [r0, #16]
 8007b7c:	dd19      	ble.n	8007bb2 <__s2b+0x64>
 8007b7e:	f104 0909 	add.w	r9, r4, #9
 8007b82:	46c8      	mov	r8, r9
 8007b84:	442c      	add	r4, r5
 8007b86:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007b8a:	4601      	mov	r1, r0
 8007b8c:	3b30      	subs	r3, #48	; 0x30
 8007b8e:	220a      	movs	r2, #10
 8007b90:	4630      	mov	r0, r6
 8007b92:	f7ff ffa1 	bl	8007ad8 <__multadd>
 8007b96:	45a0      	cmp	r8, r4
 8007b98:	d1f5      	bne.n	8007b86 <__s2b+0x38>
 8007b9a:	f1a5 0408 	sub.w	r4, r5, #8
 8007b9e:	444c      	add	r4, r9
 8007ba0:	1b2d      	subs	r5, r5, r4
 8007ba2:	1963      	adds	r3, r4, r5
 8007ba4:	42bb      	cmp	r3, r7
 8007ba6:	db07      	blt.n	8007bb8 <__s2b+0x6a>
 8007ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bac:	0052      	lsls	r2, r2, #1
 8007bae:	3101      	adds	r1, #1
 8007bb0:	e7d9      	b.n	8007b66 <__s2b+0x18>
 8007bb2:	340a      	adds	r4, #10
 8007bb4:	2509      	movs	r5, #9
 8007bb6:	e7f3      	b.n	8007ba0 <__s2b+0x52>
 8007bb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007bbc:	4601      	mov	r1, r0
 8007bbe:	3b30      	subs	r3, #48	; 0x30
 8007bc0:	220a      	movs	r2, #10
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	f7ff ff88 	bl	8007ad8 <__multadd>
 8007bc8:	e7eb      	b.n	8007ba2 <__s2b+0x54>

08007bca <__hi0bits>:
 8007bca:	0c02      	lsrs	r2, r0, #16
 8007bcc:	0412      	lsls	r2, r2, #16
 8007bce:	4603      	mov	r3, r0
 8007bd0:	b9b2      	cbnz	r2, 8007c00 <__hi0bits+0x36>
 8007bd2:	0403      	lsls	r3, r0, #16
 8007bd4:	2010      	movs	r0, #16
 8007bd6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007bda:	bf04      	itt	eq
 8007bdc:	021b      	lsleq	r3, r3, #8
 8007bde:	3008      	addeq	r0, #8
 8007be0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007be4:	bf04      	itt	eq
 8007be6:	011b      	lsleq	r3, r3, #4
 8007be8:	3004      	addeq	r0, #4
 8007bea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007bee:	bf04      	itt	eq
 8007bf0:	009b      	lsleq	r3, r3, #2
 8007bf2:	3002      	addeq	r0, #2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	db06      	blt.n	8007c06 <__hi0bits+0x3c>
 8007bf8:	005b      	lsls	r3, r3, #1
 8007bfa:	d503      	bpl.n	8007c04 <__hi0bits+0x3a>
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	4770      	bx	lr
 8007c00:	2000      	movs	r0, #0
 8007c02:	e7e8      	b.n	8007bd6 <__hi0bits+0xc>
 8007c04:	2020      	movs	r0, #32
 8007c06:	4770      	bx	lr

08007c08 <__lo0bits>:
 8007c08:	6803      	ldr	r3, [r0, #0]
 8007c0a:	f013 0207 	ands.w	r2, r3, #7
 8007c0e:	4601      	mov	r1, r0
 8007c10:	d00b      	beq.n	8007c2a <__lo0bits+0x22>
 8007c12:	07da      	lsls	r2, r3, #31
 8007c14:	d423      	bmi.n	8007c5e <__lo0bits+0x56>
 8007c16:	0798      	lsls	r0, r3, #30
 8007c18:	bf49      	itett	mi
 8007c1a:	085b      	lsrmi	r3, r3, #1
 8007c1c:	089b      	lsrpl	r3, r3, #2
 8007c1e:	2001      	movmi	r0, #1
 8007c20:	600b      	strmi	r3, [r1, #0]
 8007c22:	bf5c      	itt	pl
 8007c24:	600b      	strpl	r3, [r1, #0]
 8007c26:	2002      	movpl	r0, #2
 8007c28:	4770      	bx	lr
 8007c2a:	b298      	uxth	r0, r3
 8007c2c:	b9a8      	cbnz	r0, 8007c5a <__lo0bits+0x52>
 8007c2e:	0c1b      	lsrs	r3, r3, #16
 8007c30:	2010      	movs	r0, #16
 8007c32:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c36:	bf04      	itt	eq
 8007c38:	0a1b      	lsreq	r3, r3, #8
 8007c3a:	3008      	addeq	r0, #8
 8007c3c:	071a      	lsls	r2, r3, #28
 8007c3e:	bf04      	itt	eq
 8007c40:	091b      	lsreq	r3, r3, #4
 8007c42:	3004      	addeq	r0, #4
 8007c44:	079a      	lsls	r2, r3, #30
 8007c46:	bf04      	itt	eq
 8007c48:	089b      	lsreq	r3, r3, #2
 8007c4a:	3002      	addeq	r0, #2
 8007c4c:	07da      	lsls	r2, r3, #31
 8007c4e:	d402      	bmi.n	8007c56 <__lo0bits+0x4e>
 8007c50:	085b      	lsrs	r3, r3, #1
 8007c52:	d006      	beq.n	8007c62 <__lo0bits+0x5a>
 8007c54:	3001      	adds	r0, #1
 8007c56:	600b      	str	r3, [r1, #0]
 8007c58:	4770      	bx	lr
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	e7e9      	b.n	8007c32 <__lo0bits+0x2a>
 8007c5e:	2000      	movs	r0, #0
 8007c60:	4770      	bx	lr
 8007c62:	2020      	movs	r0, #32
 8007c64:	4770      	bx	lr

08007c66 <__i2b>:
 8007c66:	b510      	push	{r4, lr}
 8007c68:	460c      	mov	r4, r1
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	f7ff fee9 	bl	8007a42 <_Balloc>
 8007c70:	2201      	movs	r2, #1
 8007c72:	6144      	str	r4, [r0, #20]
 8007c74:	6102      	str	r2, [r0, #16]
 8007c76:	bd10      	pop	{r4, pc}

08007c78 <__multiply>:
 8007c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7c:	4614      	mov	r4, r2
 8007c7e:	690a      	ldr	r2, [r1, #16]
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	bfb8      	it	lt
 8007c86:	460b      	movlt	r3, r1
 8007c88:	4689      	mov	r9, r1
 8007c8a:	bfbc      	itt	lt
 8007c8c:	46a1      	movlt	r9, r4
 8007c8e:	461c      	movlt	r4, r3
 8007c90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007c98:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007c9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007ca0:	eb07 060a 	add.w	r6, r7, sl
 8007ca4:	429e      	cmp	r6, r3
 8007ca6:	bfc8      	it	gt
 8007ca8:	3101      	addgt	r1, #1
 8007caa:	f7ff feca 	bl	8007a42 <_Balloc>
 8007cae:	f100 0514 	add.w	r5, r0, #20
 8007cb2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007cb6:	462b      	mov	r3, r5
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4543      	cmp	r3, r8
 8007cbc:	d316      	bcc.n	8007cec <__multiply+0x74>
 8007cbe:	f104 0214 	add.w	r2, r4, #20
 8007cc2:	f109 0114 	add.w	r1, r9, #20
 8007cc6:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8007cca:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007cce:	9301      	str	r3, [sp, #4]
 8007cd0:	9c01      	ldr	r4, [sp, #4]
 8007cd2:	4294      	cmp	r4, r2
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	d80c      	bhi.n	8007cf2 <__multiply+0x7a>
 8007cd8:	2e00      	cmp	r6, #0
 8007cda:	dd03      	ble.n	8007ce4 <__multiply+0x6c>
 8007cdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d054      	beq.n	8007d8e <__multiply+0x116>
 8007ce4:	6106      	str	r6, [r0, #16]
 8007ce6:	b003      	add	sp, #12
 8007ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cec:	f843 2b04 	str.w	r2, [r3], #4
 8007cf0:	e7e3      	b.n	8007cba <__multiply+0x42>
 8007cf2:	f8b3 a000 	ldrh.w	sl, [r3]
 8007cf6:	3204      	adds	r2, #4
 8007cf8:	f1ba 0f00 	cmp.w	sl, #0
 8007cfc:	d020      	beq.n	8007d40 <__multiply+0xc8>
 8007cfe:	46ae      	mov	lr, r5
 8007d00:	4689      	mov	r9, r1
 8007d02:	f04f 0c00 	mov.w	ip, #0
 8007d06:	f859 4b04 	ldr.w	r4, [r9], #4
 8007d0a:	f8be b000 	ldrh.w	fp, [lr]
 8007d0e:	b2a3      	uxth	r3, r4
 8007d10:	fb0a b303 	mla	r3, sl, r3, fp
 8007d14:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007d18:	f8de 4000 	ldr.w	r4, [lr]
 8007d1c:	4463      	add	r3, ip
 8007d1e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007d22:	fb0a c40b 	mla	r4, sl, fp, ip
 8007d26:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007d30:	454f      	cmp	r7, r9
 8007d32:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007d36:	f84e 3b04 	str.w	r3, [lr], #4
 8007d3a:	d8e4      	bhi.n	8007d06 <__multiply+0x8e>
 8007d3c:	f8ce c000 	str.w	ip, [lr]
 8007d40:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8007d44:	f1b9 0f00 	cmp.w	r9, #0
 8007d48:	d01f      	beq.n	8007d8a <__multiply+0x112>
 8007d4a:	682b      	ldr	r3, [r5, #0]
 8007d4c:	46ae      	mov	lr, r5
 8007d4e:	468c      	mov	ip, r1
 8007d50:	f04f 0a00 	mov.w	sl, #0
 8007d54:	f8bc 4000 	ldrh.w	r4, [ip]
 8007d58:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007d5c:	fb09 b404 	mla	r4, r9, r4, fp
 8007d60:	44a2      	add	sl, r4
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8007d68:	f84e 3b04 	str.w	r3, [lr], #4
 8007d6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d70:	f8be 4000 	ldrh.w	r4, [lr]
 8007d74:	0c1b      	lsrs	r3, r3, #16
 8007d76:	fb09 4303 	mla	r3, r9, r3, r4
 8007d7a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8007d7e:	4567      	cmp	r7, ip
 8007d80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d84:	d8e6      	bhi.n	8007d54 <__multiply+0xdc>
 8007d86:	f8ce 3000 	str.w	r3, [lr]
 8007d8a:	3504      	adds	r5, #4
 8007d8c:	e7a0      	b.n	8007cd0 <__multiply+0x58>
 8007d8e:	3e01      	subs	r6, #1
 8007d90:	e7a2      	b.n	8007cd8 <__multiply+0x60>
	...

08007d94 <__pow5mult>:
 8007d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d98:	4615      	mov	r5, r2
 8007d9a:	f012 0203 	ands.w	r2, r2, #3
 8007d9e:	4606      	mov	r6, r0
 8007da0:	460f      	mov	r7, r1
 8007da2:	d007      	beq.n	8007db4 <__pow5mult+0x20>
 8007da4:	3a01      	subs	r2, #1
 8007da6:	4c21      	ldr	r4, [pc, #132]	; (8007e2c <__pow5mult+0x98>)
 8007da8:	2300      	movs	r3, #0
 8007daa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dae:	f7ff fe93 	bl	8007ad8 <__multadd>
 8007db2:	4607      	mov	r7, r0
 8007db4:	10ad      	asrs	r5, r5, #2
 8007db6:	d035      	beq.n	8007e24 <__pow5mult+0x90>
 8007db8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007dba:	b93c      	cbnz	r4, 8007dcc <__pow5mult+0x38>
 8007dbc:	2010      	movs	r0, #16
 8007dbe:	f000 fac9 	bl	8008354 <malloc>
 8007dc2:	6270      	str	r0, [r6, #36]	; 0x24
 8007dc4:	6044      	str	r4, [r0, #4]
 8007dc6:	6084      	str	r4, [r0, #8]
 8007dc8:	6004      	str	r4, [r0, #0]
 8007dca:	60c4      	str	r4, [r0, #12]
 8007dcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007dd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dd4:	b94c      	cbnz	r4, 8007dea <__pow5mult+0x56>
 8007dd6:	f240 2171 	movw	r1, #625	; 0x271
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f7ff ff43 	bl	8007c66 <__i2b>
 8007de0:	2300      	movs	r3, #0
 8007de2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007de6:	4604      	mov	r4, r0
 8007de8:	6003      	str	r3, [r0, #0]
 8007dea:	f04f 0800 	mov.w	r8, #0
 8007dee:	07eb      	lsls	r3, r5, #31
 8007df0:	d50a      	bpl.n	8007e08 <__pow5mult+0x74>
 8007df2:	4639      	mov	r1, r7
 8007df4:	4622      	mov	r2, r4
 8007df6:	4630      	mov	r0, r6
 8007df8:	f7ff ff3e 	bl	8007c78 <__multiply>
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	4681      	mov	r9, r0
 8007e00:	4630      	mov	r0, r6
 8007e02:	f7ff fe52 	bl	8007aaa <_Bfree>
 8007e06:	464f      	mov	r7, r9
 8007e08:	106d      	asrs	r5, r5, #1
 8007e0a:	d00b      	beq.n	8007e24 <__pow5mult+0x90>
 8007e0c:	6820      	ldr	r0, [r4, #0]
 8007e0e:	b938      	cbnz	r0, 8007e20 <__pow5mult+0x8c>
 8007e10:	4622      	mov	r2, r4
 8007e12:	4621      	mov	r1, r4
 8007e14:	4630      	mov	r0, r6
 8007e16:	f7ff ff2f 	bl	8007c78 <__multiply>
 8007e1a:	6020      	str	r0, [r4, #0]
 8007e1c:	f8c0 8000 	str.w	r8, [r0]
 8007e20:	4604      	mov	r4, r0
 8007e22:	e7e4      	b.n	8007dee <__pow5mult+0x5a>
 8007e24:	4638      	mov	r0, r7
 8007e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e2a:	bf00      	nop
 8007e2c:	08009780 	.word	0x08009780

08007e30 <__lshift>:
 8007e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e34:	460c      	mov	r4, r1
 8007e36:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	6849      	ldr	r1, [r1, #4]
 8007e3e:	eb0a 0903 	add.w	r9, sl, r3
 8007e42:	68a3      	ldr	r3, [r4, #8]
 8007e44:	4607      	mov	r7, r0
 8007e46:	4616      	mov	r6, r2
 8007e48:	f109 0501 	add.w	r5, r9, #1
 8007e4c:	42ab      	cmp	r3, r5
 8007e4e:	db31      	blt.n	8007eb4 <__lshift+0x84>
 8007e50:	4638      	mov	r0, r7
 8007e52:	f7ff fdf6 	bl	8007a42 <_Balloc>
 8007e56:	2200      	movs	r2, #0
 8007e58:	4680      	mov	r8, r0
 8007e5a:	f100 0314 	add.w	r3, r0, #20
 8007e5e:	4611      	mov	r1, r2
 8007e60:	4552      	cmp	r2, sl
 8007e62:	db2a      	blt.n	8007eba <__lshift+0x8a>
 8007e64:	6920      	ldr	r0, [r4, #16]
 8007e66:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e6a:	f104 0114 	add.w	r1, r4, #20
 8007e6e:	f016 021f 	ands.w	r2, r6, #31
 8007e72:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007e76:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007e7a:	d022      	beq.n	8007ec2 <__lshift+0x92>
 8007e7c:	f1c2 0c20 	rsb	ip, r2, #32
 8007e80:	2000      	movs	r0, #0
 8007e82:	680e      	ldr	r6, [r1, #0]
 8007e84:	4096      	lsls	r6, r2
 8007e86:	4330      	orrs	r0, r6
 8007e88:	f843 0b04 	str.w	r0, [r3], #4
 8007e8c:	f851 0b04 	ldr.w	r0, [r1], #4
 8007e90:	458e      	cmp	lr, r1
 8007e92:	fa20 f00c 	lsr.w	r0, r0, ip
 8007e96:	d8f4      	bhi.n	8007e82 <__lshift+0x52>
 8007e98:	6018      	str	r0, [r3, #0]
 8007e9a:	b108      	cbz	r0, 8007ea0 <__lshift+0x70>
 8007e9c:	f109 0502 	add.w	r5, r9, #2
 8007ea0:	3d01      	subs	r5, #1
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	f8c8 5010 	str.w	r5, [r8, #16]
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	f7ff fdfe 	bl	8007aaa <_Bfree>
 8007eae:	4640      	mov	r0, r8
 8007eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb4:	3101      	adds	r1, #1
 8007eb6:	005b      	lsls	r3, r3, #1
 8007eb8:	e7c8      	b.n	8007e4c <__lshift+0x1c>
 8007eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007ebe:	3201      	adds	r2, #1
 8007ec0:	e7ce      	b.n	8007e60 <__lshift+0x30>
 8007ec2:	3b04      	subs	r3, #4
 8007ec4:	f851 2b04 	ldr.w	r2, [r1], #4
 8007ec8:	f843 2f04 	str.w	r2, [r3, #4]!
 8007ecc:	458e      	cmp	lr, r1
 8007ece:	d8f9      	bhi.n	8007ec4 <__lshift+0x94>
 8007ed0:	e7e6      	b.n	8007ea0 <__lshift+0x70>

08007ed2 <__mcmp>:
 8007ed2:	6903      	ldr	r3, [r0, #16]
 8007ed4:	690a      	ldr	r2, [r1, #16]
 8007ed6:	1a9b      	subs	r3, r3, r2
 8007ed8:	b530      	push	{r4, r5, lr}
 8007eda:	d10c      	bne.n	8007ef6 <__mcmp+0x24>
 8007edc:	0092      	lsls	r2, r2, #2
 8007ede:	3014      	adds	r0, #20
 8007ee0:	3114      	adds	r1, #20
 8007ee2:	1884      	adds	r4, r0, r2
 8007ee4:	4411      	add	r1, r2
 8007ee6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007eea:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007eee:	4295      	cmp	r5, r2
 8007ef0:	d003      	beq.n	8007efa <__mcmp+0x28>
 8007ef2:	d305      	bcc.n	8007f00 <__mcmp+0x2e>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	bd30      	pop	{r4, r5, pc}
 8007efa:	42a0      	cmp	r0, r4
 8007efc:	d3f3      	bcc.n	8007ee6 <__mcmp+0x14>
 8007efe:	e7fa      	b.n	8007ef6 <__mcmp+0x24>
 8007f00:	f04f 33ff 	mov.w	r3, #4294967295
 8007f04:	e7f7      	b.n	8007ef6 <__mcmp+0x24>

08007f06 <__mdiff>:
 8007f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f0a:	460d      	mov	r5, r1
 8007f0c:	4607      	mov	r7, r0
 8007f0e:	4611      	mov	r1, r2
 8007f10:	4628      	mov	r0, r5
 8007f12:	4614      	mov	r4, r2
 8007f14:	f7ff ffdd 	bl	8007ed2 <__mcmp>
 8007f18:	1e06      	subs	r6, r0, #0
 8007f1a:	d108      	bne.n	8007f2e <__mdiff+0x28>
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	4638      	mov	r0, r7
 8007f20:	f7ff fd8f 	bl	8007a42 <_Balloc>
 8007f24:	2301      	movs	r3, #1
 8007f26:	6103      	str	r3, [r0, #16]
 8007f28:	6146      	str	r6, [r0, #20]
 8007f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2e:	bfa4      	itt	ge
 8007f30:	4623      	movge	r3, r4
 8007f32:	462c      	movge	r4, r5
 8007f34:	4638      	mov	r0, r7
 8007f36:	6861      	ldr	r1, [r4, #4]
 8007f38:	bfa6      	itte	ge
 8007f3a:	461d      	movge	r5, r3
 8007f3c:	2600      	movge	r6, #0
 8007f3e:	2601      	movlt	r6, #1
 8007f40:	f7ff fd7f 	bl	8007a42 <_Balloc>
 8007f44:	692b      	ldr	r3, [r5, #16]
 8007f46:	60c6      	str	r6, [r0, #12]
 8007f48:	6926      	ldr	r6, [r4, #16]
 8007f4a:	f105 0914 	add.w	r9, r5, #20
 8007f4e:	f104 0214 	add.w	r2, r4, #20
 8007f52:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007f56:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007f5a:	f100 0514 	add.w	r5, r0, #20
 8007f5e:	f04f 0c00 	mov.w	ip, #0
 8007f62:	f852 ab04 	ldr.w	sl, [r2], #4
 8007f66:	f859 4b04 	ldr.w	r4, [r9], #4
 8007f6a:	fa1c f18a 	uxtah	r1, ip, sl
 8007f6e:	b2a3      	uxth	r3, r4
 8007f70:	1ac9      	subs	r1, r1, r3
 8007f72:	0c23      	lsrs	r3, r4, #16
 8007f74:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007f78:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007f7c:	b289      	uxth	r1, r1
 8007f7e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007f82:	45c8      	cmp	r8, r9
 8007f84:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007f88:	4696      	mov	lr, r2
 8007f8a:	f845 3b04 	str.w	r3, [r5], #4
 8007f8e:	d8e8      	bhi.n	8007f62 <__mdiff+0x5c>
 8007f90:	45be      	cmp	lr, r7
 8007f92:	d305      	bcc.n	8007fa0 <__mdiff+0x9a>
 8007f94:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007f98:	b18b      	cbz	r3, 8007fbe <__mdiff+0xb8>
 8007f9a:	6106      	str	r6, [r0, #16]
 8007f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa0:	f85e 1b04 	ldr.w	r1, [lr], #4
 8007fa4:	fa1c f381 	uxtah	r3, ip, r1
 8007fa8:	141a      	asrs	r2, r3, #16
 8007faa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007fb8:	f845 3b04 	str.w	r3, [r5], #4
 8007fbc:	e7e8      	b.n	8007f90 <__mdiff+0x8a>
 8007fbe:	3e01      	subs	r6, #1
 8007fc0:	e7e8      	b.n	8007f94 <__mdiff+0x8e>
	...

08007fc4 <__ulp>:
 8007fc4:	4b12      	ldr	r3, [pc, #72]	; (8008010 <__ulp+0x4c>)
 8007fc6:	ee10 2a90 	vmov	r2, s1
 8007fca:	401a      	ands	r2, r3
 8007fcc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dd04      	ble.n	8007fde <__ulp+0x1a>
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	ec41 0b10 	vmov	d0, r0, r1
 8007fdc:	4770      	bx	lr
 8007fde:	425b      	negs	r3, r3
 8007fe0:	151b      	asrs	r3, r3, #20
 8007fe2:	2b13      	cmp	r3, #19
 8007fe4:	f04f 0000 	mov.w	r0, #0
 8007fe8:	f04f 0100 	mov.w	r1, #0
 8007fec:	dc04      	bgt.n	8007ff8 <__ulp+0x34>
 8007fee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007ff2:	fa42 f103 	asr.w	r1, r2, r3
 8007ff6:	e7ef      	b.n	8007fd8 <__ulp+0x14>
 8007ff8:	3b14      	subs	r3, #20
 8007ffa:	2b1e      	cmp	r3, #30
 8007ffc:	f04f 0201 	mov.w	r2, #1
 8008000:	bfda      	itte	le
 8008002:	f1c3 031f 	rsble	r3, r3, #31
 8008006:	fa02 f303 	lslle.w	r3, r2, r3
 800800a:	4613      	movgt	r3, r2
 800800c:	4618      	mov	r0, r3
 800800e:	e7e3      	b.n	8007fd8 <__ulp+0x14>
 8008010:	7ff00000 	.word	0x7ff00000

08008014 <__b2d>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	6905      	ldr	r5, [r0, #16]
 8008018:	f100 0714 	add.w	r7, r0, #20
 800801c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008020:	1f2e      	subs	r6, r5, #4
 8008022:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008026:	4620      	mov	r0, r4
 8008028:	f7ff fdcf 	bl	8007bca <__hi0bits>
 800802c:	f1c0 0320 	rsb	r3, r0, #32
 8008030:	280a      	cmp	r0, #10
 8008032:	600b      	str	r3, [r1, #0]
 8008034:	f8df e074 	ldr.w	lr, [pc, #116]	; 80080ac <__b2d+0x98>
 8008038:	dc14      	bgt.n	8008064 <__b2d+0x50>
 800803a:	f1c0 0c0b 	rsb	ip, r0, #11
 800803e:	fa24 f10c 	lsr.w	r1, r4, ip
 8008042:	42b7      	cmp	r7, r6
 8008044:	ea41 030e 	orr.w	r3, r1, lr
 8008048:	bf34      	ite	cc
 800804a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800804e:	2100      	movcs	r1, #0
 8008050:	3015      	adds	r0, #21
 8008052:	fa04 f000 	lsl.w	r0, r4, r0
 8008056:	fa21 f10c 	lsr.w	r1, r1, ip
 800805a:	ea40 0201 	orr.w	r2, r0, r1
 800805e:	ec43 2b10 	vmov	d0, r2, r3
 8008062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008064:	42b7      	cmp	r7, r6
 8008066:	bf3a      	itte	cc
 8008068:	f1a5 0608 	subcc.w	r6, r5, #8
 800806c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008070:	2100      	movcs	r1, #0
 8008072:	380b      	subs	r0, #11
 8008074:	d015      	beq.n	80080a2 <__b2d+0x8e>
 8008076:	4084      	lsls	r4, r0
 8008078:	f1c0 0520 	rsb	r5, r0, #32
 800807c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008080:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008084:	42be      	cmp	r6, r7
 8008086:	fa21 fe05 	lsr.w	lr, r1, r5
 800808a:	ea44 030e 	orr.w	r3, r4, lr
 800808e:	bf8c      	ite	hi
 8008090:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008094:	2400      	movls	r4, #0
 8008096:	fa01 f000 	lsl.w	r0, r1, r0
 800809a:	40ec      	lsrs	r4, r5
 800809c:	ea40 0204 	orr.w	r2, r0, r4
 80080a0:	e7dd      	b.n	800805e <__b2d+0x4a>
 80080a2:	ea44 030e 	orr.w	r3, r4, lr
 80080a6:	460a      	mov	r2, r1
 80080a8:	e7d9      	b.n	800805e <__b2d+0x4a>
 80080aa:	bf00      	nop
 80080ac:	3ff00000 	.word	0x3ff00000

080080b0 <__d2b>:
 80080b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080b4:	460e      	mov	r6, r1
 80080b6:	2101      	movs	r1, #1
 80080b8:	ec59 8b10 	vmov	r8, r9, d0
 80080bc:	4615      	mov	r5, r2
 80080be:	f7ff fcc0 	bl	8007a42 <_Balloc>
 80080c2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80080c6:	4607      	mov	r7, r0
 80080c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080cc:	bb34      	cbnz	r4, 800811c <__d2b+0x6c>
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	f1b8 0f00 	cmp.w	r8, #0
 80080d4:	d027      	beq.n	8008126 <__d2b+0x76>
 80080d6:	a802      	add	r0, sp, #8
 80080d8:	f840 8d08 	str.w	r8, [r0, #-8]!
 80080dc:	f7ff fd94 	bl	8007c08 <__lo0bits>
 80080e0:	9900      	ldr	r1, [sp, #0]
 80080e2:	b1f0      	cbz	r0, 8008122 <__d2b+0x72>
 80080e4:	9a01      	ldr	r2, [sp, #4]
 80080e6:	f1c0 0320 	rsb	r3, r0, #32
 80080ea:	fa02 f303 	lsl.w	r3, r2, r3
 80080ee:	430b      	orrs	r3, r1
 80080f0:	40c2      	lsrs	r2, r0
 80080f2:	617b      	str	r3, [r7, #20]
 80080f4:	9201      	str	r2, [sp, #4]
 80080f6:	9b01      	ldr	r3, [sp, #4]
 80080f8:	61bb      	str	r3, [r7, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	bf14      	ite	ne
 80080fe:	2102      	movne	r1, #2
 8008100:	2101      	moveq	r1, #1
 8008102:	6139      	str	r1, [r7, #16]
 8008104:	b1c4      	cbz	r4, 8008138 <__d2b+0x88>
 8008106:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800810a:	4404      	add	r4, r0
 800810c:	6034      	str	r4, [r6, #0]
 800810e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008112:	6028      	str	r0, [r5, #0]
 8008114:	4638      	mov	r0, r7
 8008116:	b003      	add	sp, #12
 8008118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800811c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008120:	e7d5      	b.n	80080ce <__d2b+0x1e>
 8008122:	6179      	str	r1, [r7, #20]
 8008124:	e7e7      	b.n	80080f6 <__d2b+0x46>
 8008126:	a801      	add	r0, sp, #4
 8008128:	f7ff fd6e 	bl	8007c08 <__lo0bits>
 800812c:	9b01      	ldr	r3, [sp, #4]
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	2101      	movs	r1, #1
 8008132:	6139      	str	r1, [r7, #16]
 8008134:	3020      	adds	r0, #32
 8008136:	e7e5      	b.n	8008104 <__d2b+0x54>
 8008138:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800813c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008140:	6030      	str	r0, [r6, #0]
 8008142:	6918      	ldr	r0, [r3, #16]
 8008144:	f7ff fd41 	bl	8007bca <__hi0bits>
 8008148:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800814c:	e7e1      	b.n	8008112 <__d2b+0x62>

0800814e <__ratio>:
 800814e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008152:	4688      	mov	r8, r1
 8008154:	4669      	mov	r1, sp
 8008156:	4681      	mov	r9, r0
 8008158:	f7ff ff5c 	bl	8008014 <__b2d>
 800815c:	a901      	add	r1, sp, #4
 800815e:	4640      	mov	r0, r8
 8008160:	ec55 4b10 	vmov	r4, r5, d0
 8008164:	f7ff ff56 	bl	8008014 <__b2d>
 8008168:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800816c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008170:	1a9a      	subs	r2, r3, r2
 8008172:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8008176:	1acb      	subs	r3, r1, r3
 8008178:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800817c:	ec57 6b10 	vmov	r6, r7, d0
 8008180:	2b00      	cmp	r3, #0
 8008182:	bfd6      	itet	le
 8008184:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008188:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 800818c:	eb07 5703 	addle.w	r7, r7, r3, lsl #20
 8008190:	4632      	mov	r2, r6
 8008192:	463b      	mov	r3, r7
 8008194:	4620      	mov	r0, r4
 8008196:	4629      	mov	r1, r5
 8008198:	f7f8 fb00 	bl	800079c <__aeabi_ddiv>
 800819c:	ec41 0b10 	vmov	d0, r0, r1
 80081a0:	b003      	add	sp, #12
 80081a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080081a6 <__copybits>:
 80081a6:	3901      	subs	r1, #1
 80081a8:	b510      	push	{r4, lr}
 80081aa:	1149      	asrs	r1, r1, #5
 80081ac:	6914      	ldr	r4, [r2, #16]
 80081ae:	3101      	adds	r1, #1
 80081b0:	f102 0314 	add.w	r3, r2, #20
 80081b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80081b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80081bc:	42a3      	cmp	r3, r4
 80081be:	4602      	mov	r2, r0
 80081c0:	d303      	bcc.n	80081ca <__copybits+0x24>
 80081c2:	2300      	movs	r3, #0
 80081c4:	428a      	cmp	r2, r1
 80081c6:	d305      	bcc.n	80081d4 <__copybits+0x2e>
 80081c8:	bd10      	pop	{r4, pc}
 80081ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ce:	f840 2b04 	str.w	r2, [r0], #4
 80081d2:	e7f3      	b.n	80081bc <__copybits+0x16>
 80081d4:	f842 3b04 	str.w	r3, [r2], #4
 80081d8:	e7f4      	b.n	80081c4 <__copybits+0x1e>

080081da <__any_on>:
 80081da:	f100 0214 	add.w	r2, r0, #20
 80081de:	6900      	ldr	r0, [r0, #16]
 80081e0:	114b      	asrs	r3, r1, #5
 80081e2:	4298      	cmp	r0, r3
 80081e4:	b510      	push	{r4, lr}
 80081e6:	db11      	blt.n	800820c <__any_on+0x32>
 80081e8:	dd0a      	ble.n	8008200 <__any_on+0x26>
 80081ea:	f011 011f 	ands.w	r1, r1, #31
 80081ee:	d007      	beq.n	8008200 <__any_on+0x26>
 80081f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80081f4:	fa24 f001 	lsr.w	r0, r4, r1
 80081f8:	fa00 f101 	lsl.w	r1, r0, r1
 80081fc:	428c      	cmp	r4, r1
 80081fe:	d10b      	bne.n	8008218 <__any_on+0x3e>
 8008200:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008204:	4293      	cmp	r3, r2
 8008206:	d803      	bhi.n	8008210 <__any_on+0x36>
 8008208:	2000      	movs	r0, #0
 800820a:	bd10      	pop	{r4, pc}
 800820c:	4603      	mov	r3, r0
 800820e:	e7f7      	b.n	8008200 <__any_on+0x26>
 8008210:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008214:	2900      	cmp	r1, #0
 8008216:	d0f5      	beq.n	8008204 <__any_on+0x2a>
 8008218:	2001      	movs	r0, #1
 800821a:	bd10      	pop	{r4, pc}

0800821c <_calloc_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	fb02 f401 	mul.w	r4, r2, r1
 8008222:	4621      	mov	r1, r4
 8008224:	f000 f808 	bl	8008238 <_malloc_r>
 8008228:	4605      	mov	r5, r0
 800822a:	b118      	cbz	r0, 8008234 <_calloc_r+0x18>
 800822c:	4622      	mov	r2, r4
 800822e:	2100      	movs	r1, #0
 8008230:	f7fe f9d0 	bl	80065d4 <memset>
 8008234:	4628      	mov	r0, r5
 8008236:	bd38      	pop	{r3, r4, r5, pc}

08008238 <_malloc_r>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	1ccd      	adds	r5, r1, #3
 800823c:	f025 0503 	bic.w	r5, r5, #3
 8008240:	3508      	adds	r5, #8
 8008242:	2d0c      	cmp	r5, #12
 8008244:	bf38      	it	cc
 8008246:	250c      	movcc	r5, #12
 8008248:	2d00      	cmp	r5, #0
 800824a:	4606      	mov	r6, r0
 800824c:	db01      	blt.n	8008252 <_malloc_r+0x1a>
 800824e:	42a9      	cmp	r1, r5
 8008250:	d903      	bls.n	800825a <_malloc_r+0x22>
 8008252:	230c      	movs	r3, #12
 8008254:	6033      	str	r3, [r6, #0]
 8008256:	2000      	movs	r0, #0
 8008258:	bd70      	pop	{r4, r5, r6, pc}
 800825a:	f000 f883 	bl	8008364 <__malloc_lock>
 800825e:	4a23      	ldr	r2, [pc, #140]	; (80082ec <_malloc_r+0xb4>)
 8008260:	6814      	ldr	r4, [r2, #0]
 8008262:	4621      	mov	r1, r4
 8008264:	b991      	cbnz	r1, 800828c <_malloc_r+0x54>
 8008266:	4c22      	ldr	r4, [pc, #136]	; (80082f0 <_malloc_r+0xb8>)
 8008268:	6823      	ldr	r3, [r4, #0]
 800826a:	b91b      	cbnz	r3, 8008274 <_malloc_r+0x3c>
 800826c:	4630      	mov	r0, r6
 800826e:	f000 f841 	bl	80082f4 <_sbrk_r>
 8008272:	6020      	str	r0, [r4, #0]
 8008274:	4629      	mov	r1, r5
 8008276:	4630      	mov	r0, r6
 8008278:	f000 f83c 	bl	80082f4 <_sbrk_r>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d126      	bne.n	80082ce <_malloc_r+0x96>
 8008280:	230c      	movs	r3, #12
 8008282:	6033      	str	r3, [r6, #0]
 8008284:	4630      	mov	r0, r6
 8008286:	f000 f86e 	bl	8008366 <__malloc_unlock>
 800828a:	e7e4      	b.n	8008256 <_malloc_r+0x1e>
 800828c:	680b      	ldr	r3, [r1, #0]
 800828e:	1b5b      	subs	r3, r3, r5
 8008290:	d41a      	bmi.n	80082c8 <_malloc_r+0x90>
 8008292:	2b0b      	cmp	r3, #11
 8008294:	d90f      	bls.n	80082b6 <_malloc_r+0x7e>
 8008296:	600b      	str	r3, [r1, #0]
 8008298:	50cd      	str	r5, [r1, r3]
 800829a:	18cc      	adds	r4, r1, r3
 800829c:	4630      	mov	r0, r6
 800829e:	f000 f862 	bl	8008366 <__malloc_unlock>
 80082a2:	f104 000b 	add.w	r0, r4, #11
 80082a6:	1d23      	adds	r3, r4, #4
 80082a8:	f020 0007 	bic.w	r0, r0, #7
 80082ac:	1ac3      	subs	r3, r0, r3
 80082ae:	d01b      	beq.n	80082e8 <_malloc_r+0xb0>
 80082b0:	425a      	negs	r2, r3
 80082b2:	50e2      	str	r2, [r4, r3]
 80082b4:	bd70      	pop	{r4, r5, r6, pc}
 80082b6:	428c      	cmp	r4, r1
 80082b8:	bf0d      	iteet	eq
 80082ba:	6863      	ldreq	r3, [r4, #4]
 80082bc:	684b      	ldrne	r3, [r1, #4]
 80082be:	6063      	strne	r3, [r4, #4]
 80082c0:	6013      	streq	r3, [r2, #0]
 80082c2:	bf18      	it	ne
 80082c4:	460c      	movne	r4, r1
 80082c6:	e7e9      	b.n	800829c <_malloc_r+0x64>
 80082c8:	460c      	mov	r4, r1
 80082ca:	6849      	ldr	r1, [r1, #4]
 80082cc:	e7ca      	b.n	8008264 <_malloc_r+0x2c>
 80082ce:	1cc4      	adds	r4, r0, #3
 80082d0:	f024 0403 	bic.w	r4, r4, #3
 80082d4:	42a0      	cmp	r0, r4
 80082d6:	d005      	beq.n	80082e4 <_malloc_r+0xac>
 80082d8:	1a21      	subs	r1, r4, r0
 80082da:	4630      	mov	r0, r6
 80082dc:	f000 f80a 	bl	80082f4 <_sbrk_r>
 80082e0:	3001      	adds	r0, #1
 80082e2:	d0cd      	beq.n	8008280 <_malloc_r+0x48>
 80082e4:	6025      	str	r5, [r4, #0]
 80082e6:	e7d9      	b.n	800829c <_malloc_r+0x64>
 80082e8:	bd70      	pop	{r4, r5, r6, pc}
 80082ea:	bf00      	nop
 80082ec:	2000037c 	.word	0x2000037c
 80082f0:	20000380 	.word	0x20000380

080082f4 <_sbrk_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4c06      	ldr	r4, [pc, #24]	; (8008310 <_sbrk_r+0x1c>)
 80082f8:	2300      	movs	r3, #0
 80082fa:	4605      	mov	r5, r0
 80082fc:	4608      	mov	r0, r1
 80082fe:	6023      	str	r3, [r4, #0]
 8008300:	f7fe f8c0 	bl	8006484 <_sbrk>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_sbrk_r+0x1a>
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	b103      	cbz	r3, 800830e <_sbrk_r+0x1a>
 800830c:	602b      	str	r3, [r5, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	20000658 	.word	0x20000658

08008314 <strncmp>:
 8008314:	b510      	push	{r4, lr}
 8008316:	b16a      	cbz	r2, 8008334 <strncmp+0x20>
 8008318:	3901      	subs	r1, #1
 800831a:	1884      	adds	r4, r0, r2
 800831c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008320:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008324:	4293      	cmp	r3, r2
 8008326:	d103      	bne.n	8008330 <strncmp+0x1c>
 8008328:	42a0      	cmp	r0, r4
 800832a:	d001      	beq.n	8008330 <strncmp+0x1c>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1f5      	bne.n	800831c <strncmp+0x8>
 8008330:	1a98      	subs	r0, r3, r2
 8008332:	bd10      	pop	{r4, pc}
 8008334:	4610      	mov	r0, r2
 8008336:	bd10      	pop	{r4, pc}

08008338 <__ascii_wctomb>:
 8008338:	b149      	cbz	r1, 800834e <__ascii_wctomb+0x16>
 800833a:	2aff      	cmp	r2, #255	; 0xff
 800833c:	bf85      	ittet	hi
 800833e:	238a      	movhi	r3, #138	; 0x8a
 8008340:	6003      	strhi	r3, [r0, #0]
 8008342:	700a      	strbls	r2, [r1, #0]
 8008344:	f04f 30ff 	movhi.w	r0, #4294967295
 8008348:	bf98      	it	ls
 800834a:	2001      	movls	r0, #1
 800834c:	4770      	bx	lr
 800834e:	4608      	mov	r0, r1
 8008350:	4770      	bx	lr
	...

08008354 <malloc>:
 8008354:	4b02      	ldr	r3, [pc, #8]	; (8008360 <malloc+0xc>)
 8008356:	4601      	mov	r1, r0
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	f7ff bf6d 	b.w	8008238 <_malloc_r>
 800835e:	bf00      	nop
 8008360:	20000070 	.word	0x20000070

08008364 <__malloc_lock>:
 8008364:	4770      	bx	lr

08008366 <__malloc_unlock>:
 8008366:	4770      	bx	lr

08008368 <floor>:
 8008368:	ec51 0b10 	vmov	r0, r1, d0
 800836c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008370:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008374:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008378:	2e13      	cmp	r6, #19
 800837a:	ee10 8a10 	vmov	r8, s0
 800837e:	460c      	mov	r4, r1
 8008380:	ee10 5a10 	vmov	r5, s0
 8008384:	dc35      	bgt.n	80083f2 <floor+0x8a>
 8008386:	2e00      	cmp	r6, #0
 8008388:	da17      	bge.n	80083ba <floor+0x52>
 800838a:	a335      	add	r3, pc, #212	; (adr r3, 8008460 <floor+0xf8>)
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f7f7 ff28 	bl	80001e4 <__adddf3>
 8008394:	2200      	movs	r2, #0
 8008396:	2300      	movs	r3, #0
 8008398:	f7f8 fb66 	bl	8000a68 <__aeabi_dcmpgt>
 800839c:	b150      	cbz	r0, 80083b4 <floor+0x4c>
 800839e:	2c00      	cmp	r4, #0
 80083a0:	da5a      	bge.n	8008458 <floor+0xf0>
 80083a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80083a6:	ea53 0308 	orrs.w	r3, r3, r8
 80083aa:	4b2f      	ldr	r3, [pc, #188]	; (8008468 <floor+0x100>)
 80083ac:	f04f 0500 	mov.w	r5, #0
 80083b0:	bf18      	it	ne
 80083b2:	461c      	movne	r4, r3
 80083b4:	4621      	mov	r1, r4
 80083b6:	4628      	mov	r0, r5
 80083b8:	e025      	b.n	8008406 <floor+0x9e>
 80083ba:	4f2c      	ldr	r7, [pc, #176]	; (800846c <floor+0x104>)
 80083bc:	4137      	asrs	r7, r6
 80083be:	ea01 0307 	and.w	r3, r1, r7
 80083c2:	4303      	orrs	r3, r0
 80083c4:	d01f      	beq.n	8008406 <floor+0x9e>
 80083c6:	a326      	add	r3, pc, #152	; (adr r3, 8008460 <floor+0xf8>)
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f7f7 ff0a 	bl	80001e4 <__adddf3>
 80083d0:	2200      	movs	r2, #0
 80083d2:	2300      	movs	r3, #0
 80083d4:	f7f8 fb48 	bl	8000a68 <__aeabi_dcmpgt>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d0eb      	beq.n	80083b4 <floor+0x4c>
 80083dc:	2c00      	cmp	r4, #0
 80083de:	bfbe      	ittt	lt
 80083e0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80083e4:	fa43 f606 	asrlt.w	r6, r3, r6
 80083e8:	19a4      	addlt	r4, r4, r6
 80083ea:	ea24 0407 	bic.w	r4, r4, r7
 80083ee:	2500      	movs	r5, #0
 80083f0:	e7e0      	b.n	80083b4 <floor+0x4c>
 80083f2:	2e33      	cmp	r6, #51	; 0x33
 80083f4:	dd0b      	ble.n	800840e <floor+0xa6>
 80083f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80083fa:	d104      	bne.n	8008406 <floor+0x9e>
 80083fc:	ee10 2a10 	vmov	r2, s0
 8008400:	460b      	mov	r3, r1
 8008402:	f7f7 feef 	bl	80001e4 <__adddf3>
 8008406:	ec41 0b10 	vmov	d0, r0, r1
 800840a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800840e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008412:	f04f 33ff 	mov.w	r3, #4294967295
 8008416:	fa23 f707 	lsr.w	r7, r3, r7
 800841a:	4238      	tst	r0, r7
 800841c:	d0f3      	beq.n	8008406 <floor+0x9e>
 800841e:	a310      	add	r3, pc, #64	; (adr r3, 8008460 <floor+0xf8>)
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f7f7 fede 	bl	80001e4 <__adddf3>
 8008428:	2200      	movs	r2, #0
 800842a:	2300      	movs	r3, #0
 800842c:	f7f8 fb1c 	bl	8000a68 <__aeabi_dcmpgt>
 8008430:	2800      	cmp	r0, #0
 8008432:	d0bf      	beq.n	80083b4 <floor+0x4c>
 8008434:	2c00      	cmp	r4, #0
 8008436:	da02      	bge.n	800843e <floor+0xd6>
 8008438:	2e14      	cmp	r6, #20
 800843a:	d103      	bne.n	8008444 <floor+0xdc>
 800843c:	3401      	adds	r4, #1
 800843e:	ea25 0507 	bic.w	r5, r5, r7
 8008442:	e7b7      	b.n	80083b4 <floor+0x4c>
 8008444:	2301      	movs	r3, #1
 8008446:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800844a:	fa03 f606 	lsl.w	r6, r3, r6
 800844e:	4435      	add	r5, r6
 8008450:	45a8      	cmp	r8, r5
 8008452:	bf88      	it	hi
 8008454:	18e4      	addhi	r4, r4, r3
 8008456:	e7f2      	b.n	800843e <floor+0xd6>
 8008458:	2500      	movs	r5, #0
 800845a:	462c      	mov	r4, r5
 800845c:	e7aa      	b.n	80083b4 <floor+0x4c>
 800845e:	bf00      	nop
 8008460:	8800759c 	.word	0x8800759c
 8008464:	7e37e43c 	.word	0x7e37e43c
 8008468:	bff00000 	.word	0xbff00000
 800846c:	000fffff 	.word	0x000fffff

08008470 <round>:
 8008470:	ec51 0b10 	vmov	r0, r1, d0
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800847a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800847e:	2c13      	cmp	r4, #19
 8008480:	460b      	mov	r3, r1
 8008482:	460f      	mov	r7, r1
 8008484:	dc17      	bgt.n	80084b6 <round+0x46>
 8008486:	2c00      	cmp	r4, #0
 8008488:	da09      	bge.n	800849e <round+0x2e>
 800848a:	3401      	adds	r4, #1
 800848c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008490:	d103      	bne.n	800849a <round+0x2a>
 8008492:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008496:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800849a:	2100      	movs	r1, #0
 800849c:	e028      	b.n	80084f0 <round+0x80>
 800849e:	4a16      	ldr	r2, [pc, #88]	; (80084f8 <round+0x88>)
 80084a0:	4122      	asrs	r2, r4
 80084a2:	4211      	tst	r1, r2
 80084a4:	d100      	bne.n	80084a8 <round+0x38>
 80084a6:	b180      	cbz	r0, 80084ca <round+0x5a>
 80084a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80084ac:	4123      	asrs	r3, r4
 80084ae:	443b      	add	r3, r7
 80084b0:	ea23 0302 	bic.w	r3, r3, r2
 80084b4:	e7f1      	b.n	800849a <round+0x2a>
 80084b6:	2c33      	cmp	r4, #51	; 0x33
 80084b8:	dd0a      	ble.n	80084d0 <round+0x60>
 80084ba:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80084be:	d104      	bne.n	80084ca <round+0x5a>
 80084c0:	ee10 2a10 	vmov	r2, s0
 80084c4:	460b      	mov	r3, r1
 80084c6:	f7f7 fe8d 	bl	80001e4 <__adddf3>
 80084ca:	ec41 0b10 	vmov	d0, r0, r1
 80084ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d0:	f2a5 4213 	subw	r2, r5, #1043	; 0x413
 80084d4:	f04f 35ff 	mov.w	r5, #4294967295
 80084d8:	40d5      	lsrs	r5, r2
 80084da:	4228      	tst	r0, r5
 80084dc:	d0f5      	beq.n	80084ca <round+0x5a>
 80084de:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80084e2:	2201      	movs	r2, #1
 80084e4:	40a2      	lsls	r2, r4
 80084e6:	1812      	adds	r2, r2, r0
 80084e8:	bf28      	it	cs
 80084ea:	3301      	addcs	r3, #1
 80084ec:	ea22 0105 	bic.w	r1, r2, r5
 80084f0:	4608      	mov	r0, r1
 80084f2:	4619      	mov	r1, r3
 80084f4:	e7e9      	b.n	80084ca <round+0x5a>
 80084f6:	bf00      	nop
 80084f8:	000fffff 	.word	0x000fffff

080084fc <pow>:
 80084fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	ed2d 8b04 	vpush	{d8-d9}
 8008504:	b08d      	sub	sp, #52	; 0x34
 8008506:	ec57 6b10 	vmov	r6, r7, d0
 800850a:	ec55 4b11 	vmov	r4, r5, d1
 800850e:	f000 f96f 	bl	80087f0 <__ieee754_pow>
 8008512:	4bae      	ldr	r3, [pc, #696]	; (80087cc <pow+0x2d0>)
 8008514:	eeb0 8a40 	vmov.f32	s16, s0
 8008518:	eef0 8a60 	vmov.f32	s17, s1
 800851c:	f993 9000 	ldrsb.w	r9, [r3]
 8008520:	f1b9 3fff 	cmp.w	r9, #4294967295
 8008524:	4698      	mov	r8, r3
 8008526:	d05f      	beq.n	80085e8 <pow+0xec>
 8008528:	4622      	mov	r2, r4
 800852a:	462b      	mov	r3, r5
 800852c:	4620      	mov	r0, r4
 800852e:	4629      	mov	r1, r5
 8008530:	f7f8 faa4 	bl	8000a7c <__aeabi_dcmpun>
 8008534:	4683      	mov	fp, r0
 8008536:	2800      	cmp	r0, #0
 8008538:	d156      	bne.n	80085e8 <pow+0xec>
 800853a:	4632      	mov	r2, r6
 800853c:	463b      	mov	r3, r7
 800853e:	4630      	mov	r0, r6
 8008540:	4639      	mov	r1, r7
 8008542:	f7f8 fa9b 	bl	8000a7c <__aeabi_dcmpun>
 8008546:	9001      	str	r0, [sp, #4]
 8008548:	b1e8      	cbz	r0, 8008586 <pow+0x8a>
 800854a:	2200      	movs	r2, #0
 800854c:	2300      	movs	r3, #0
 800854e:	4620      	mov	r0, r4
 8008550:	4629      	mov	r1, r5
 8008552:	f7f8 fa61 	bl	8000a18 <__aeabi_dcmpeq>
 8008556:	2800      	cmp	r0, #0
 8008558:	d046      	beq.n	80085e8 <pow+0xec>
 800855a:	2301      	movs	r3, #1
 800855c:	9302      	str	r3, [sp, #8]
 800855e:	4b9c      	ldr	r3, [pc, #624]	; (80087d0 <pow+0x2d4>)
 8008560:	9303      	str	r3, [sp, #12]
 8008562:	4b9c      	ldr	r3, [pc, #624]	; (80087d4 <pow+0x2d8>)
 8008564:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008568:	2200      	movs	r2, #0
 800856a:	f1b9 0f02 	cmp.w	r9, #2
 800856e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008572:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008576:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800857a:	d033      	beq.n	80085e4 <pow+0xe8>
 800857c:	a802      	add	r0, sp, #8
 800857e:	f000 ff08 	bl	8009392 <matherr>
 8008582:	bb48      	cbnz	r0, 80085d8 <pow+0xdc>
 8008584:	e05e      	b.n	8008644 <pow+0x148>
 8008586:	f04f 0a00 	mov.w	sl, #0
 800858a:	f04f 0b00 	mov.w	fp, #0
 800858e:	4652      	mov	r2, sl
 8008590:	465b      	mov	r3, fp
 8008592:	4630      	mov	r0, r6
 8008594:	4639      	mov	r1, r7
 8008596:	f7f8 fa3f 	bl	8000a18 <__aeabi_dcmpeq>
 800859a:	ec4b ab19 	vmov	d9, sl, fp
 800859e:	2800      	cmp	r0, #0
 80085a0:	d055      	beq.n	800864e <pow+0x152>
 80085a2:	4652      	mov	r2, sl
 80085a4:	465b      	mov	r3, fp
 80085a6:	4620      	mov	r0, r4
 80085a8:	4629      	mov	r1, r5
 80085aa:	f7f8 fa35 	bl	8000a18 <__aeabi_dcmpeq>
 80085ae:	4680      	mov	r8, r0
 80085b0:	b318      	cbz	r0, 80085fa <pow+0xfe>
 80085b2:	2301      	movs	r3, #1
 80085b4:	9302      	str	r3, [sp, #8]
 80085b6:	4b86      	ldr	r3, [pc, #536]	; (80087d0 <pow+0x2d4>)
 80085b8:	9303      	str	r3, [sp, #12]
 80085ba:	9b01      	ldr	r3, [sp, #4]
 80085bc:	930a      	str	r3, [sp, #40]	; 0x28
 80085be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80085c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80085c6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80085ca:	f1b9 0f00 	cmp.w	r9, #0
 80085ce:	d0d5      	beq.n	800857c <pow+0x80>
 80085d0:	4b80      	ldr	r3, [pc, #512]	; (80087d4 <pow+0x2d8>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80085d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085da:	b11b      	cbz	r3, 80085e4 <pow+0xe8>
 80085dc:	f7fd ffd0 	bl	8006580 <__errno>
 80085e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e2:	6003      	str	r3, [r0, #0]
 80085e4:	ed9d 8b08 	vldr	d8, [sp, #32]
 80085e8:	eeb0 0a48 	vmov.f32	s0, s16
 80085ec:	eef0 0a68 	vmov.f32	s1, s17
 80085f0:	b00d      	add	sp, #52	; 0x34
 80085f2:	ecbd 8b04 	vpop	{d8-d9}
 80085f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fa:	ec45 4b10 	vmov	d0, r4, r5
 80085fe:	f000 fec0 	bl	8009382 <finite>
 8008602:	2800      	cmp	r0, #0
 8008604:	d0f0      	beq.n	80085e8 <pow+0xec>
 8008606:	4652      	mov	r2, sl
 8008608:	465b      	mov	r3, fp
 800860a:	4620      	mov	r0, r4
 800860c:	4629      	mov	r1, r5
 800860e:	f7f8 fa0d 	bl	8000a2c <__aeabi_dcmplt>
 8008612:	2800      	cmp	r0, #0
 8008614:	d0e8      	beq.n	80085e8 <pow+0xec>
 8008616:	2301      	movs	r3, #1
 8008618:	9302      	str	r3, [sp, #8]
 800861a:	4b6d      	ldr	r3, [pc, #436]	; (80087d0 <pow+0x2d4>)
 800861c:	9303      	str	r3, [sp, #12]
 800861e:	4b6b      	ldr	r3, [pc, #428]	; (80087cc <pow+0x2d0>)
 8008620:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008624:	f993 3000 	ldrsb.w	r3, [r3]
 8008628:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800862c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008630:	b913      	cbnz	r3, 8008638 <pow+0x13c>
 8008632:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008636:	e7a1      	b.n	800857c <pow+0x80>
 8008638:	4967      	ldr	r1, [pc, #412]	; (80087d8 <pow+0x2dc>)
 800863a:	2000      	movs	r0, #0
 800863c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008640:	2b02      	cmp	r3, #2
 8008642:	d19b      	bne.n	800857c <pow+0x80>
 8008644:	f7fd ff9c 	bl	8006580 <__errno>
 8008648:	2321      	movs	r3, #33	; 0x21
 800864a:	6003      	str	r3, [r0, #0]
 800864c:	e7c4      	b.n	80085d8 <pow+0xdc>
 800864e:	eeb0 0a48 	vmov.f32	s0, s16
 8008652:	eef0 0a68 	vmov.f32	s1, s17
 8008656:	f000 fe94 	bl	8009382 <finite>
 800865a:	9001      	str	r0, [sp, #4]
 800865c:	2800      	cmp	r0, #0
 800865e:	f040 808a 	bne.w	8008776 <pow+0x27a>
 8008662:	ec47 6b10 	vmov	d0, r6, r7
 8008666:	f000 fe8c 	bl	8009382 <finite>
 800866a:	2800      	cmp	r0, #0
 800866c:	f000 8083 	beq.w	8008776 <pow+0x27a>
 8008670:	ec45 4b10 	vmov	d0, r4, r5
 8008674:	f000 fe85 	bl	8009382 <finite>
 8008678:	2800      	cmp	r0, #0
 800867a:	d07c      	beq.n	8008776 <pow+0x27a>
 800867c:	ec53 2b18 	vmov	r2, r3, d8
 8008680:	ee18 0a10 	vmov	r0, s16
 8008684:	4619      	mov	r1, r3
 8008686:	f7f8 f9f9 	bl	8000a7c <__aeabi_dcmpun>
 800868a:	f998 9000 	ldrsb.w	r9, [r8]
 800868e:	4b50      	ldr	r3, [pc, #320]	; (80087d0 <pow+0x2d4>)
 8008690:	b1b0      	cbz	r0, 80086c0 <pow+0x1c4>
 8008692:	2201      	movs	r2, #1
 8008694:	9303      	str	r3, [sp, #12]
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	9202      	str	r2, [sp, #8]
 800869a:	930a      	str	r3, [sp, #40]	; 0x28
 800869c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80086a0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80086a4:	f1b9 0f00 	cmp.w	r9, #0
 80086a8:	d0c3      	beq.n	8008632 <pow+0x136>
 80086aa:	4652      	mov	r2, sl
 80086ac:	465b      	mov	r3, fp
 80086ae:	4650      	mov	r0, sl
 80086b0:	4659      	mov	r1, fp
 80086b2:	f7f8 f873 	bl	800079c <__aeabi_ddiv>
 80086b6:	f1b9 0f02 	cmp.w	r9, #2
 80086ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086be:	e7c0      	b.n	8008642 <pow+0x146>
 80086c0:	2203      	movs	r2, #3
 80086c2:	9202      	str	r2, [sp, #8]
 80086c4:	9303      	str	r3, [sp, #12]
 80086c6:	900a      	str	r0, [sp, #40]	; 0x28
 80086c8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80086cc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80086d0:	f1b9 0f00 	cmp.w	r9, #0
 80086d4:	d12c      	bne.n	8008730 <pow+0x234>
 80086d6:	4b41      	ldr	r3, [pc, #260]	; (80087dc <pow+0x2e0>)
 80086d8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80086dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80086e0:	4630      	mov	r0, r6
 80086e2:	4652      	mov	r2, sl
 80086e4:	465b      	mov	r3, fp
 80086e6:	4639      	mov	r1, r7
 80086e8:	f7f8 f9a0 	bl	8000a2c <__aeabi_dcmplt>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d066      	beq.n	80087be <pow+0x2c2>
 80086f0:	2200      	movs	r2, #0
 80086f2:	4b3b      	ldr	r3, [pc, #236]	; (80087e0 <pow+0x2e4>)
 80086f4:	4620      	mov	r0, r4
 80086f6:	4629      	mov	r1, r5
 80086f8:	f7f7 ff26 	bl	8000548 <__aeabi_dmul>
 80086fc:	4604      	mov	r4, r0
 80086fe:	460d      	mov	r5, r1
 8008700:	ec45 4b10 	vmov	d0, r4, r5
 8008704:	f000 fe50 	bl	80093a8 <rint>
 8008708:	4620      	mov	r0, r4
 800870a:	ec53 2b10 	vmov	r2, r3, d0
 800870e:	4629      	mov	r1, r5
 8008710:	f7f8 f982 	bl	8000a18 <__aeabi_dcmpeq>
 8008714:	b920      	cbnz	r0, 8008720 <pow+0x224>
 8008716:	4b33      	ldr	r3, [pc, #204]	; (80087e4 <pow+0x2e8>)
 8008718:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800871c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008720:	f998 3000 	ldrsb.w	r3, [r8]
 8008724:	2b02      	cmp	r3, #2
 8008726:	d14a      	bne.n	80087be <pow+0x2c2>
 8008728:	f7fd ff2a 	bl	8006580 <__errno>
 800872c:	2322      	movs	r3, #34	; 0x22
 800872e:	e78c      	b.n	800864a <pow+0x14e>
 8008730:	4b2d      	ldr	r3, [pc, #180]	; (80087e8 <pow+0x2ec>)
 8008732:	2200      	movs	r2, #0
 8008734:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008738:	4630      	mov	r0, r6
 800873a:	4652      	mov	r2, sl
 800873c:	465b      	mov	r3, fp
 800873e:	4639      	mov	r1, r7
 8008740:	f7f8 f974 	bl	8000a2c <__aeabi_dcmplt>
 8008744:	2800      	cmp	r0, #0
 8008746:	d0eb      	beq.n	8008720 <pow+0x224>
 8008748:	2200      	movs	r2, #0
 800874a:	4b25      	ldr	r3, [pc, #148]	; (80087e0 <pow+0x2e4>)
 800874c:	4620      	mov	r0, r4
 800874e:	4629      	mov	r1, r5
 8008750:	f7f7 fefa 	bl	8000548 <__aeabi_dmul>
 8008754:	4604      	mov	r4, r0
 8008756:	460d      	mov	r5, r1
 8008758:	ec45 4b10 	vmov	d0, r4, r5
 800875c:	f000 fe24 	bl	80093a8 <rint>
 8008760:	4620      	mov	r0, r4
 8008762:	ec53 2b10 	vmov	r2, r3, d0
 8008766:	4629      	mov	r1, r5
 8008768:	f7f8 f956 	bl	8000a18 <__aeabi_dcmpeq>
 800876c:	2800      	cmp	r0, #0
 800876e:	d1d7      	bne.n	8008720 <pow+0x224>
 8008770:	2200      	movs	r2, #0
 8008772:	4b19      	ldr	r3, [pc, #100]	; (80087d8 <pow+0x2dc>)
 8008774:	e7d2      	b.n	800871c <pow+0x220>
 8008776:	2200      	movs	r2, #0
 8008778:	2300      	movs	r3, #0
 800877a:	ec51 0b18 	vmov	r0, r1, d8
 800877e:	f7f8 f94b 	bl	8000a18 <__aeabi_dcmpeq>
 8008782:	2800      	cmp	r0, #0
 8008784:	f43f af30 	beq.w	80085e8 <pow+0xec>
 8008788:	ec47 6b10 	vmov	d0, r6, r7
 800878c:	f000 fdf9 	bl	8009382 <finite>
 8008790:	2800      	cmp	r0, #0
 8008792:	f43f af29 	beq.w	80085e8 <pow+0xec>
 8008796:	ec45 4b10 	vmov	d0, r4, r5
 800879a:	f000 fdf2 	bl	8009382 <finite>
 800879e:	2800      	cmp	r0, #0
 80087a0:	f43f af22 	beq.w	80085e8 <pow+0xec>
 80087a4:	2304      	movs	r3, #4
 80087a6:	9302      	str	r3, [sp, #8]
 80087a8:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <pow+0x2d4>)
 80087aa:	9303      	str	r3, [sp, #12]
 80087ac:	2300      	movs	r3, #0
 80087ae:	930a      	str	r3, [sp, #40]	; 0x28
 80087b0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80087b4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80087b8:	ed8d 9b08 	vstr	d9, [sp, #32]
 80087bc:	e7b0      	b.n	8008720 <pow+0x224>
 80087be:	a802      	add	r0, sp, #8
 80087c0:	f000 fde7 	bl	8009392 <matherr>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	f47f af07 	bne.w	80085d8 <pow+0xdc>
 80087ca:	e7ad      	b.n	8008728 <pow+0x22c>
 80087cc:	20000240 	.word	0x20000240
 80087d0:	0800988d 	.word	0x0800988d
 80087d4:	3ff00000 	.word	0x3ff00000
 80087d8:	fff00000 	.word	0xfff00000
 80087dc:	47efffff 	.word	0x47efffff
 80087e0:	3fe00000 	.word	0x3fe00000
 80087e4:	c7efffff 	.word	0xc7efffff
 80087e8:	7ff00000 	.word	0x7ff00000
 80087ec:	00000000 	.word	0x00000000

080087f0 <__ieee754_pow>:
 80087f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f4:	b091      	sub	sp, #68	; 0x44
 80087f6:	ed8d 1b00 	vstr	d1, [sp]
 80087fa:	e89d 0204 	ldmia.w	sp, {r2, r9}
 80087fe:	ec57 6b10 	vmov	r6, r7, d0
 8008802:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008806:	ea58 0302 	orrs.w	r3, r8, r2
 800880a:	ee10 aa10 	vmov	sl, s0
 800880e:	463d      	mov	r5, r7
 8008810:	f000 84bd 	beq.w	800918e <__ieee754_pow+0x99e>
 8008814:	4b78      	ldr	r3, [pc, #480]	; (80089f8 <__ieee754_pow+0x208>)
 8008816:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800881a:	429c      	cmp	r4, r3
 800881c:	dc09      	bgt.n	8008832 <__ieee754_pow+0x42>
 800881e:	d103      	bne.n	8008828 <__ieee754_pow+0x38>
 8008820:	b93e      	cbnz	r6, 8008832 <__ieee754_pow+0x42>
 8008822:	45a0      	cmp	r8, r4
 8008824:	dc0d      	bgt.n	8008842 <__ieee754_pow+0x52>
 8008826:	e001      	b.n	800882c <__ieee754_pow+0x3c>
 8008828:	4598      	cmp	r8, r3
 800882a:	dc02      	bgt.n	8008832 <__ieee754_pow+0x42>
 800882c:	4598      	cmp	r8, r3
 800882e:	d10e      	bne.n	800884e <__ieee754_pow+0x5e>
 8008830:	b16a      	cbz	r2, 800884e <__ieee754_pow+0x5e>
 8008832:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008836:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800883a:	ea54 030a 	orrs.w	r3, r4, sl
 800883e:	f000 84a6 	beq.w	800918e <__ieee754_pow+0x99e>
 8008842:	486e      	ldr	r0, [pc, #440]	; (80089fc <__ieee754_pow+0x20c>)
 8008844:	b011      	add	sp, #68	; 0x44
 8008846:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884a:	f000 bda5 	b.w	8009398 <nan>
 800884e:	2d00      	cmp	r5, #0
 8008850:	da53      	bge.n	80088fa <__ieee754_pow+0x10a>
 8008852:	4b6b      	ldr	r3, [pc, #428]	; (8008a00 <__ieee754_pow+0x210>)
 8008854:	4598      	cmp	r8, r3
 8008856:	dc4d      	bgt.n	80088f4 <__ieee754_pow+0x104>
 8008858:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800885c:	4598      	cmp	r8, r3
 800885e:	dd4c      	ble.n	80088fa <__ieee754_pow+0x10a>
 8008860:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008864:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008868:	2b14      	cmp	r3, #20
 800886a:	dd26      	ble.n	80088ba <__ieee754_pow+0xca>
 800886c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008870:	fa22 f103 	lsr.w	r1, r2, r3
 8008874:	fa01 f303 	lsl.w	r3, r1, r3
 8008878:	429a      	cmp	r2, r3
 800887a:	d13e      	bne.n	80088fa <__ieee754_pow+0x10a>
 800887c:	f001 0101 	and.w	r1, r1, #1
 8008880:	f1c1 0b02 	rsb	fp, r1, #2
 8008884:	2a00      	cmp	r2, #0
 8008886:	d15b      	bne.n	8008940 <__ieee754_pow+0x150>
 8008888:	4b5b      	ldr	r3, [pc, #364]	; (80089f8 <__ieee754_pow+0x208>)
 800888a:	4598      	cmp	r8, r3
 800888c:	d124      	bne.n	80088d8 <__ieee754_pow+0xe8>
 800888e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008892:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008896:	ea53 030a 	orrs.w	r3, r3, sl
 800889a:	f000 8478 	beq.w	800918e <__ieee754_pow+0x99e>
 800889e:	4b59      	ldr	r3, [pc, #356]	; (8008a04 <__ieee754_pow+0x214>)
 80088a0:	429c      	cmp	r4, r3
 80088a2:	dd2d      	ble.n	8008900 <__ieee754_pow+0x110>
 80088a4:	f1b9 0f00 	cmp.w	r9, #0
 80088a8:	f280 8475 	bge.w	8009196 <__ieee754_pow+0x9a6>
 80088ac:	2000      	movs	r0, #0
 80088ae:	2100      	movs	r1, #0
 80088b0:	ec41 0b10 	vmov	d0, r0, r1
 80088b4:	b011      	add	sp, #68	; 0x44
 80088b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ba:	2a00      	cmp	r2, #0
 80088bc:	d13e      	bne.n	800893c <__ieee754_pow+0x14c>
 80088be:	f1c3 0314 	rsb	r3, r3, #20
 80088c2:	fa48 f103 	asr.w	r1, r8, r3
 80088c6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ca:	4598      	cmp	r8, r3
 80088cc:	f040 846b 	bne.w	80091a6 <__ieee754_pow+0x9b6>
 80088d0:	f001 0101 	and.w	r1, r1, #1
 80088d4:	f1c1 0b02 	rsb	fp, r1, #2
 80088d8:	4b4b      	ldr	r3, [pc, #300]	; (8008a08 <__ieee754_pow+0x218>)
 80088da:	4598      	cmp	r8, r3
 80088dc:	d118      	bne.n	8008910 <__ieee754_pow+0x120>
 80088de:	f1b9 0f00 	cmp.w	r9, #0
 80088e2:	f280 845c 	bge.w	800919e <__ieee754_pow+0x9ae>
 80088e6:	4948      	ldr	r1, [pc, #288]	; (8008a08 <__ieee754_pow+0x218>)
 80088e8:	4632      	mov	r2, r6
 80088ea:	463b      	mov	r3, r7
 80088ec:	2000      	movs	r0, #0
 80088ee:	f7f7 ff55 	bl	800079c <__aeabi_ddiv>
 80088f2:	e7dd      	b.n	80088b0 <__ieee754_pow+0xc0>
 80088f4:	f04f 0b02 	mov.w	fp, #2
 80088f8:	e7c4      	b.n	8008884 <__ieee754_pow+0x94>
 80088fa:	f04f 0b00 	mov.w	fp, #0
 80088fe:	e7c1      	b.n	8008884 <__ieee754_pow+0x94>
 8008900:	f1b9 0f00 	cmp.w	r9, #0
 8008904:	dad2      	bge.n	80088ac <__ieee754_pow+0xbc>
 8008906:	e89d 0009 	ldmia.w	sp, {r0, r3}
 800890a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800890e:	e7cf      	b.n	80088b0 <__ieee754_pow+0xc0>
 8008910:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008914:	d106      	bne.n	8008924 <__ieee754_pow+0x134>
 8008916:	4632      	mov	r2, r6
 8008918:	463b      	mov	r3, r7
 800891a:	4610      	mov	r0, r2
 800891c:	4619      	mov	r1, r3
 800891e:	f7f7 fe13 	bl	8000548 <__aeabi_dmul>
 8008922:	e7c5      	b.n	80088b0 <__ieee754_pow+0xc0>
 8008924:	4b39      	ldr	r3, [pc, #228]	; (8008a0c <__ieee754_pow+0x21c>)
 8008926:	4599      	cmp	r9, r3
 8008928:	d10a      	bne.n	8008940 <__ieee754_pow+0x150>
 800892a:	2d00      	cmp	r5, #0
 800892c:	db08      	blt.n	8008940 <__ieee754_pow+0x150>
 800892e:	ec47 6b10 	vmov	d0, r6, r7
 8008932:	b011      	add	sp, #68	; 0x44
 8008934:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008938:	f000 bc6c 	b.w	8009214 <__ieee754_sqrt>
 800893c:	f04f 0b00 	mov.w	fp, #0
 8008940:	ec47 6b10 	vmov	d0, r6, r7
 8008944:	f000 fd16 	bl	8009374 <fabs>
 8008948:	ec51 0b10 	vmov	r0, r1, d0
 800894c:	f1ba 0f00 	cmp.w	sl, #0
 8008950:	d127      	bne.n	80089a2 <__ieee754_pow+0x1b2>
 8008952:	b124      	cbz	r4, 800895e <__ieee754_pow+0x16e>
 8008954:	4b2c      	ldr	r3, [pc, #176]	; (8008a08 <__ieee754_pow+0x218>)
 8008956:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800895a:	429a      	cmp	r2, r3
 800895c:	d121      	bne.n	80089a2 <__ieee754_pow+0x1b2>
 800895e:	f1b9 0f00 	cmp.w	r9, #0
 8008962:	da05      	bge.n	8008970 <__ieee754_pow+0x180>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	2000      	movs	r0, #0
 800896a:	4927      	ldr	r1, [pc, #156]	; (8008a08 <__ieee754_pow+0x218>)
 800896c:	f7f7 ff16 	bl	800079c <__aeabi_ddiv>
 8008970:	2d00      	cmp	r5, #0
 8008972:	da9d      	bge.n	80088b0 <__ieee754_pow+0xc0>
 8008974:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008978:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800897c:	ea54 030b 	orrs.w	r3, r4, fp
 8008980:	d108      	bne.n	8008994 <__ieee754_pow+0x1a4>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4610      	mov	r0, r2
 8008988:	4619      	mov	r1, r3
 800898a:	f7f7 fc29 	bl	80001e0 <__aeabi_dsub>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	e7ac      	b.n	80088ee <__ieee754_pow+0xfe>
 8008994:	f1bb 0f01 	cmp.w	fp, #1
 8008998:	d18a      	bne.n	80088b0 <__ieee754_pow+0xc0>
 800899a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800899e:	4619      	mov	r1, r3
 80089a0:	e786      	b.n	80088b0 <__ieee754_pow+0xc0>
 80089a2:	0fed      	lsrs	r5, r5, #31
 80089a4:	1e6b      	subs	r3, r5, #1
 80089a6:	930d      	str	r3, [sp, #52]	; 0x34
 80089a8:	ea5b 0303 	orrs.w	r3, fp, r3
 80089ac:	d102      	bne.n	80089b4 <__ieee754_pow+0x1c4>
 80089ae:	4632      	mov	r2, r6
 80089b0:	463b      	mov	r3, r7
 80089b2:	e7e8      	b.n	8008986 <__ieee754_pow+0x196>
 80089b4:	4b16      	ldr	r3, [pc, #88]	; (8008a10 <__ieee754_pow+0x220>)
 80089b6:	4598      	cmp	r8, r3
 80089b8:	f340 80fe 	ble.w	8008bb8 <__ieee754_pow+0x3c8>
 80089bc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80089c0:	4598      	cmp	r8, r3
 80089c2:	dd0a      	ble.n	80089da <__ieee754_pow+0x1ea>
 80089c4:	4b0f      	ldr	r3, [pc, #60]	; (8008a04 <__ieee754_pow+0x214>)
 80089c6:	429c      	cmp	r4, r3
 80089c8:	dc0d      	bgt.n	80089e6 <__ieee754_pow+0x1f6>
 80089ca:	f1b9 0f00 	cmp.w	r9, #0
 80089ce:	f6bf af6d 	bge.w	80088ac <__ieee754_pow+0xbc>
 80089d2:	a307      	add	r3, pc, #28	; (adr r3, 80089f0 <__ieee754_pow+0x200>)
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	e79f      	b.n	800891a <__ieee754_pow+0x12a>
 80089da:	4b0e      	ldr	r3, [pc, #56]	; (8008a14 <__ieee754_pow+0x224>)
 80089dc:	429c      	cmp	r4, r3
 80089de:	ddf4      	ble.n	80089ca <__ieee754_pow+0x1da>
 80089e0:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <__ieee754_pow+0x218>)
 80089e2:	429c      	cmp	r4, r3
 80089e4:	dd18      	ble.n	8008a18 <__ieee754_pow+0x228>
 80089e6:	f1b9 0f00 	cmp.w	r9, #0
 80089ea:	dcf2      	bgt.n	80089d2 <__ieee754_pow+0x1e2>
 80089ec:	e75e      	b.n	80088ac <__ieee754_pow+0xbc>
 80089ee:	bf00      	nop
 80089f0:	8800759c 	.word	0x8800759c
 80089f4:	7e37e43c 	.word	0x7e37e43c
 80089f8:	7ff00000 	.word	0x7ff00000
 80089fc:	08009689 	.word	0x08009689
 8008a00:	433fffff 	.word	0x433fffff
 8008a04:	3fefffff 	.word	0x3fefffff
 8008a08:	3ff00000 	.word	0x3ff00000
 8008a0c:	3fe00000 	.word	0x3fe00000
 8008a10:	41e00000 	.word	0x41e00000
 8008a14:	3feffffe 	.word	0x3feffffe
 8008a18:	2200      	movs	r2, #0
 8008a1a:	4b63      	ldr	r3, [pc, #396]	; (8008ba8 <__ieee754_pow+0x3b8>)
 8008a1c:	f7f7 fbe0 	bl	80001e0 <__aeabi_dsub>
 8008a20:	a355      	add	r3, pc, #340	; (adr r3, 8008b78 <__ieee754_pow+0x388>)
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	4604      	mov	r4, r0
 8008a28:	460d      	mov	r5, r1
 8008a2a:	f7f7 fd8d 	bl	8000548 <__aeabi_dmul>
 8008a2e:	a354      	add	r3, pc, #336	; (adr r3, 8008b80 <__ieee754_pow+0x390>)
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	4606      	mov	r6, r0
 8008a36:	460f      	mov	r7, r1
 8008a38:	4620      	mov	r0, r4
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	f7f7 fd84 	bl	8000548 <__aeabi_dmul>
 8008a40:	2200      	movs	r2, #0
 8008a42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a46:	4b59      	ldr	r3, [pc, #356]	; (8008bac <__ieee754_pow+0x3bc>)
 8008a48:	4620      	mov	r0, r4
 8008a4a:	4629      	mov	r1, r5
 8008a4c:	f7f7 fd7c 	bl	8000548 <__aeabi_dmul>
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	a14c      	add	r1, pc, #304	; (adr r1, 8008b88 <__ieee754_pow+0x398>)
 8008a56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a5a:	f7f7 fbc1 	bl	80001e0 <__aeabi_dsub>
 8008a5e:	4622      	mov	r2, r4
 8008a60:	462b      	mov	r3, r5
 8008a62:	f7f7 fd71 	bl	8000548 <__aeabi_dmul>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	4950      	ldr	r1, [pc, #320]	; (8008bb0 <__ieee754_pow+0x3c0>)
 8008a6e:	f7f7 fbb7 	bl	80001e0 <__aeabi_dsub>
 8008a72:	4622      	mov	r2, r4
 8008a74:	462b      	mov	r3, r5
 8008a76:	4680      	mov	r8, r0
 8008a78:	4689      	mov	r9, r1
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	f7f7 fd63 	bl	8000548 <__aeabi_dmul>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	4640      	mov	r0, r8
 8008a88:	4649      	mov	r1, r9
 8008a8a:	f7f7 fd5d 	bl	8000548 <__aeabi_dmul>
 8008a8e:	a340      	add	r3, pc, #256	; (adr r3, 8008b90 <__ieee754_pow+0x3a0>)
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	f7f7 fd58 	bl	8000548 <__aeabi_dmul>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aa0:	f7f7 fb9e 	bl	80001e0 <__aeabi_dsub>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	460d      	mov	r5, r1
 8008aac:	4630      	mov	r0, r6
 8008aae:	4639      	mov	r1, r7
 8008ab0:	f7f7 fb98 	bl	80001e4 <__adddf3>
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008aba:	4632      	mov	r2, r6
 8008abc:	463b      	mov	r3, r7
 8008abe:	f7f7 fb8f 	bl	80001e0 <__aeabi_dsub>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	4629      	mov	r1, r5
 8008aca:	f7f7 fb89 	bl	80001e0 <__aeabi_dsub>
 8008ace:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ad0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	460f      	mov	r7, r1
 8008ada:	f040 81eb 	bne.w	8008eb4 <__ieee754_pow+0x6c4>
 8008ade:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008b98 <__ieee754_pow+0x3a8>
 8008ae2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008ae6:	2400      	movs	r4, #0
 8008ae8:	4622      	mov	r2, r4
 8008aea:	462b      	mov	r3, r5
 8008aec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008af0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008af4:	f7f7 fb74 	bl	80001e0 <__aeabi_dsub>
 8008af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008afc:	f7f7 fd24 	bl	8000548 <__aeabi_dmul>
 8008b00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b04:	4680      	mov	r8, r0
 8008b06:	4689      	mov	r9, r1
 8008b08:	4630      	mov	r0, r6
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	f7f7 fd1c 	bl	8000548 <__aeabi_dmul>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4640      	mov	r0, r8
 8008b16:	4649      	mov	r1, r9
 8008b18:	f7f7 fb64 	bl	80001e4 <__adddf3>
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	462b      	mov	r3, r5
 8008b20:	4680      	mov	r8, r0
 8008b22:	4689      	mov	r9, r1
 8008b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b28:	f7f7 fd0e 	bl	8000548 <__aeabi_dmul>
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4604      	mov	r4, r0
 8008b30:	460d      	mov	r5, r1
 8008b32:	4602      	mov	r2, r0
 8008b34:	4649      	mov	r1, r9
 8008b36:	4640      	mov	r0, r8
 8008b38:	e9cd 4500 	strd	r4, r5, [sp]
 8008b3c:	f7f7 fb52 	bl	80001e4 <__adddf3>
 8008b40:	4b1c      	ldr	r3, [pc, #112]	; (8008bb4 <__ieee754_pow+0x3c4>)
 8008b42:	4299      	cmp	r1, r3
 8008b44:	4606      	mov	r6, r0
 8008b46:	460f      	mov	r7, r1
 8008b48:	468b      	mov	fp, r1
 8008b4a:	f340 82f7 	ble.w	800913c <__ieee754_pow+0x94c>
 8008b4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008b52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008b56:	4303      	orrs	r3, r0
 8008b58:	f000 81ea 	beq.w	8008f30 <__ieee754_pow+0x740>
 8008b5c:	a310      	add	r3, pc, #64	; (adr r3, 8008ba0 <__ieee754_pow+0x3b0>)
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b66:	f7f7 fcef 	bl	8000548 <__aeabi_dmul>
 8008b6a:	a30d      	add	r3, pc, #52	; (adr r3, 8008ba0 <__ieee754_pow+0x3b0>)
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	e6d5      	b.n	800891e <__ieee754_pow+0x12e>
 8008b72:	bf00      	nop
 8008b74:	f3af 8000 	nop.w
 8008b78:	60000000 	.word	0x60000000
 8008b7c:	3ff71547 	.word	0x3ff71547
 8008b80:	f85ddf44 	.word	0xf85ddf44
 8008b84:	3e54ae0b 	.word	0x3e54ae0b
 8008b88:	55555555 	.word	0x55555555
 8008b8c:	3fd55555 	.word	0x3fd55555
 8008b90:	652b82fe 	.word	0x652b82fe
 8008b94:	3ff71547 	.word	0x3ff71547
 8008b98:	00000000 	.word	0x00000000
 8008b9c:	bff00000 	.word	0xbff00000
 8008ba0:	8800759c 	.word	0x8800759c
 8008ba4:	7e37e43c 	.word	0x7e37e43c
 8008ba8:	3ff00000 	.word	0x3ff00000
 8008bac:	3fd00000 	.word	0x3fd00000
 8008bb0:	3fe00000 	.word	0x3fe00000
 8008bb4:	408fffff 	.word	0x408fffff
 8008bb8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008bbc:	f04f 0200 	mov.w	r2, #0
 8008bc0:	da05      	bge.n	8008bce <__ieee754_pow+0x3de>
 8008bc2:	4bd3      	ldr	r3, [pc, #844]	; (8008f10 <__ieee754_pow+0x720>)
 8008bc4:	f7f7 fcc0 	bl	8000548 <__aeabi_dmul>
 8008bc8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008bcc:	460c      	mov	r4, r1
 8008bce:	1523      	asrs	r3, r4, #20
 8008bd0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008bd4:	4413      	add	r3, r2
 8008bd6:	9307      	str	r3, [sp, #28]
 8008bd8:	4bce      	ldr	r3, [pc, #824]	; (8008f14 <__ieee754_pow+0x724>)
 8008bda:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008bde:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008be2:	429c      	cmp	r4, r3
 8008be4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008be8:	dd08      	ble.n	8008bfc <__ieee754_pow+0x40c>
 8008bea:	4bcb      	ldr	r3, [pc, #812]	; (8008f18 <__ieee754_pow+0x728>)
 8008bec:	429c      	cmp	r4, r3
 8008bee:	f340 815e 	ble.w	8008eae <__ieee754_pow+0x6be>
 8008bf2:	9b07      	ldr	r3, [sp, #28]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	9307      	str	r3, [sp, #28]
 8008bf8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008bfc:	f04f 0a00 	mov.w	sl, #0
 8008c00:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008c04:	930c      	str	r3, [sp, #48]	; 0x30
 8008c06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c08:	4bc4      	ldr	r3, [pc, #784]	; (8008f1c <__ieee754_pow+0x72c>)
 8008c0a:	4413      	add	r3, r2
 8008c0c:	ed93 7b00 	vldr	d7, [r3]
 8008c10:	4629      	mov	r1, r5
 8008c12:	ec53 2b17 	vmov	r2, r3, d7
 8008c16:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008c1a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c1e:	f7f7 fadf 	bl	80001e0 <__aeabi_dsub>
 8008c22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c26:	4606      	mov	r6, r0
 8008c28:	460f      	mov	r7, r1
 8008c2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c2e:	f7f7 fad9 	bl	80001e4 <__adddf3>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	2000      	movs	r0, #0
 8008c38:	49b9      	ldr	r1, [pc, #740]	; (8008f20 <__ieee754_pow+0x730>)
 8008c3a:	f7f7 fdaf 	bl	800079c <__aeabi_ddiv>
 8008c3e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	4630      	mov	r0, r6
 8008c48:	4639      	mov	r1, r7
 8008c4a:	f7f7 fc7d 	bl	8000548 <__aeabi_dmul>
 8008c4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c52:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008c56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9302      	str	r3, [sp, #8]
 8008c5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008c62:	106d      	asrs	r5, r5, #1
 8008c64:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008c68:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008c72:	4640      	mov	r0, r8
 8008c74:	4649      	mov	r1, r9
 8008c76:	4614      	mov	r4, r2
 8008c78:	461d      	mov	r5, r3
 8008c7a:	f7f7 fc65 	bl	8000548 <__aeabi_dmul>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4630      	mov	r0, r6
 8008c84:	4639      	mov	r1, r7
 8008c86:	f7f7 faab 	bl	80001e0 <__aeabi_dsub>
 8008c8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c8e:	4606      	mov	r6, r0
 8008c90:	460f      	mov	r7, r1
 8008c92:	4620      	mov	r0, r4
 8008c94:	4629      	mov	r1, r5
 8008c96:	f7f7 faa3 	bl	80001e0 <__aeabi_dsub>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ca2:	f7f7 fa9d 	bl	80001e0 <__aeabi_dsub>
 8008ca6:	4642      	mov	r2, r8
 8008ca8:	464b      	mov	r3, r9
 8008caa:	f7f7 fc4d 	bl	8000548 <__aeabi_dmul>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	4639      	mov	r1, r7
 8008cb6:	f7f7 fa93 	bl	80001e0 <__aeabi_dsub>
 8008cba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008cbe:	f7f7 fc43 	bl	8000548 <__aeabi_dmul>
 8008cc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008cca:	4610      	mov	r0, r2
 8008ccc:	4619      	mov	r1, r3
 8008cce:	f7f7 fc3b 	bl	8000548 <__aeabi_dmul>
 8008cd2:	a37b      	add	r3, pc, #492	; (adr r3, 8008ec0 <__ieee754_pow+0x6d0>)
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	4604      	mov	r4, r0
 8008cda:	460d      	mov	r5, r1
 8008cdc:	f7f7 fc34 	bl	8000548 <__aeabi_dmul>
 8008ce0:	a379      	add	r3, pc, #484	; (adr r3, 8008ec8 <__ieee754_pow+0x6d8>)
 8008ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce6:	f7f7 fa7d 	bl	80001e4 <__adddf3>
 8008cea:	4622      	mov	r2, r4
 8008cec:	462b      	mov	r3, r5
 8008cee:	f7f7 fc2b 	bl	8000548 <__aeabi_dmul>
 8008cf2:	a377      	add	r3, pc, #476	; (adr r3, 8008ed0 <__ieee754_pow+0x6e0>)
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	f7f7 fa74 	bl	80001e4 <__adddf3>
 8008cfc:	4622      	mov	r2, r4
 8008cfe:	462b      	mov	r3, r5
 8008d00:	f7f7 fc22 	bl	8000548 <__aeabi_dmul>
 8008d04:	a374      	add	r3, pc, #464	; (adr r3, 8008ed8 <__ieee754_pow+0x6e8>)
 8008d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0a:	f7f7 fa6b 	bl	80001e4 <__adddf3>
 8008d0e:	4622      	mov	r2, r4
 8008d10:	462b      	mov	r3, r5
 8008d12:	f7f7 fc19 	bl	8000548 <__aeabi_dmul>
 8008d16:	a372      	add	r3, pc, #456	; (adr r3, 8008ee0 <__ieee754_pow+0x6f0>)
 8008d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1c:	f7f7 fa62 	bl	80001e4 <__adddf3>
 8008d20:	4622      	mov	r2, r4
 8008d22:	462b      	mov	r3, r5
 8008d24:	f7f7 fc10 	bl	8000548 <__aeabi_dmul>
 8008d28:	a36f      	add	r3, pc, #444	; (adr r3, 8008ee8 <__ieee754_pow+0x6f8>)
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	f7f7 fa59 	bl	80001e4 <__adddf3>
 8008d32:	4622      	mov	r2, r4
 8008d34:	4606      	mov	r6, r0
 8008d36:	460f      	mov	r7, r1
 8008d38:	462b      	mov	r3, r5
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	f7f7 fc03 	bl	8000548 <__aeabi_dmul>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4630      	mov	r0, r6
 8008d48:	4639      	mov	r1, r7
 8008d4a:	f7f7 fbfd 	bl	8000548 <__aeabi_dmul>
 8008d4e:	4642      	mov	r2, r8
 8008d50:	4604      	mov	r4, r0
 8008d52:	460d      	mov	r5, r1
 8008d54:	464b      	mov	r3, r9
 8008d56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d5a:	f7f7 fa43 	bl	80001e4 <__adddf3>
 8008d5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d62:	f7f7 fbf1 	bl	8000548 <__aeabi_dmul>
 8008d66:	4622      	mov	r2, r4
 8008d68:	462b      	mov	r3, r5
 8008d6a:	f7f7 fa3b 	bl	80001e4 <__adddf3>
 8008d6e:	4642      	mov	r2, r8
 8008d70:	4606      	mov	r6, r0
 8008d72:	460f      	mov	r7, r1
 8008d74:	464b      	mov	r3, r9
 8008d76:	4640      	mov	r0, r8
 8008d78:	4649      	mov	r1, r9
 8008d7a:	f7f7 fbe5 	bl	8000548 <__aeabi_dmul>
 8008d7e:	2200      	movs	r2, #0
 8008d80:	4b68      	ldr	r3, [pc, #416]	; (8008f24 <__ieee754_pow+0x734>)
 8008d82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d86:	f7f7 fa2d 	bl	80001e4 <__adddf3>
 8008d8a:	4632      	mov	r2, r6
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	f7f7 fa29 	bl	80001e4 <__adddf3>
 8008d92:	9802      	ldr	r0, [sp, #8]
 8008d94:	460d      	mov	r5, r1
 8008d96:	4604      	mov	r4, r0
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4640      	mov	r0, r8
 8008d9e:	4649      	mov	r1, r9
 8008da0:	f7f7 fbd2 	bl	8000548 <__aeabi_dmul>
 8008da4:	2200      	movs	r2, #0
 8008da6:	4680      	mov	r8, r0
 8008da8:	4689      	mov	r9, r1
 8008daa:	4b5e      	ldr	r3, [pc, #376]	; (8008f24 <__ieee754_pow+0x734>)
 8008dac:	4620      	mov	r0, r4
 8008dae:	4629      	mov	r1, r5
 8008db0:	f7f7 fa16 	bl	80001e0 <__aeabi_dsub>
 8008db4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008db8:	f7f7 fa12 	bl	80001e0 <__aeabi_dsub>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	4639      	mov	r1, r7
 8008dc4:	f7f7 fa0c 	bl	80001e0 <__aeabi_dsub>
 8008dc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dcc:	f7f7 fbbc 	bl	8000548 <__aeabi_dmul>
 8008dd0:	4622      	mov	r2, r4
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	460f      	mov	r7, r1
 8008dd6:	462b      	mov	r3, r5
 8008dd8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ddc:	f7f7 fbb4 	bl	8000548 <__aeabi_dmul>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4630      	mov	r0, r6
 8008de6:	4639      	mov	r1, r7
 8008de8:	f7f7 f9fc 	bl	80001e4 <__adddf3>
 8008dec:	4606      	mov	r6, r0
 8008dee:	460f      	mov	r7, r1
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	4640      	mov	r0, r8
 8008df6:	4649      	mov	r1, r9
 8008df8:	f7f7 f9f4 	bl	80001e4 <__adddf3>
 8008dfc:	9802      	ldr	r0, [sp, #8]
 8008dfe:	a33c      	add	r3, pc, #240	; (adr r3, 8008ef0 <__ieee754_pow+0x700>)
 8008e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e04:	4604      	mov	r4, r0
 8008e06:	460d      	mov	r5, r1
 8008e08:	f7f7 fb9e 	bl	8000548 <__aeabi_dmul>
 8008e0c:	4642      	mov	r2, r8
 8008e0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008e12:	464b      	mov	r3, r9
 8008e14:	4620      	mov	r0, r4
 8008e16:	4629      	mov	r1, r5
 8008e18:	f7f7 f9e2 	bl	80001e0 <__aeabi_dsub>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4630      	mov	r0, r6
 8008e22:	4639      	mov	r1, r7
 8008e24:	f7f7 f9dc 	bl	80001e0 <__aeabi_dsub>
 8008e28:	a333      	add	r3, pc, #204	; (adr r3, 8008ef8 <__ieee754_pow+0x708>)
 8008e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2e:	f7f7 fb8b 	bl	8000548 <__aeabi_dmul>
 8008e32:	a333      	add	r3, pc, #204	; (adr r3, 8008f00 <__ieee754_pow+0x710>)
 8008e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e38:	4606      	mov	r6, r0
 8008e3a:	460f      	mov	r7, r1
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	4629      	mov	r1, r5
 8008e40:	f7f7 fb82 	bl	8000548 <__aeabi_dmul>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4630      	mov	r0, r6
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	f7f7 f9ca 	bl	80001e4 <__adddf3>
 8008e50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e52:	4b35      	ldr	r3, [pc, #212]	; (8008f28 <__ieee754_pow+0x738>)
 8008e54:	4413      	add	r3, r2
 8008e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5a:	f7f7 f9c3 	bl	80001e4 <__adddf3>
 8008e5e:	4604      	mov	r4, r0
 8008e60:	9807      	ldr	r0, [sp, #28]
 8008e62:	460d      	mov	r5, r1
 8008e64:	f7f7 fb0a 	bl	800047c <__aeabi_i2d>
 8008e68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e6a:	4b30      	ldr	r3, [pc, #192]	; (8008f2c <__ieee754_pow+0x73c>)
 8008e6c:	4413      	add	r3, r2
 8008e6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e72:	4606      	mov	r6, r0
 8008e74:	460f      	mov	r7, r1
 8008e76:	4622      	mov	r2, r4
 8008e78:	462b      	mov	r3, r5
 8008e7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e7e:	f7f7 f9b1 	bl	80001e4 <__adddf3>
 8008e82:	4642      	mov	r2, r8
 8008e84:	464b      	mov	r3, r9
 8008e86:	f7f7 f9ad 	bl	80001e4 <__adddf3>
 8008e8a:	4632      	mov	r2, r6
 8008e8c:	463b      	mov	r3, r7
 8008e8e:	f7f7 f9a9 	bl	80001e4 <__adddf3>
 8008e92:	9802      	ldr	r0, [sp, #8]
 8008e94:	4632      	mov	r2, r6
 8008e96:	463b      	mov	r3, r7
 8008e98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e9c:	f7f7 f9a0 	bl	80001e0 <__aeabi_dsub>
 8008ea0:	4642      	mov	r2, r8
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	f7f7 f99c 	bl	80001e0 <__aeabi_dsub>
 8008ea8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008eac:	e607      	b.n	8008abe <__ieee754_pow+0x2ce>
 8008eae:	f04f 0a01 	mov.w	sl, #1
 8008eb2:	e6a5      	b.n	8008c00 <__ieee754_pow+0x410>
 8008eb4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008f08 <__ieee754_pow+0x718>
 8008eb8:	e613      	b.n	8008ae2 <__ieee754_pow+0x2f2>
 8008eba:	bf00      	nop
 8008ebc:	f3af 8000 	nop.w
 8008ec0:	4a454eef 	.word	0x4a454eef
 8008ec4:	3fca7e28 	.word	0x3fca7e28
 8008ec8:	93c9db65 	.word	0x93c9db65
 8008ecc:	3fcd864a 	.word	0x3fcd864a
 8008ed0:	a91d4101 	.word	0xa91d4101
 8008ed4:	3fd17460 	.word	0x3fd17460
 8008ed8:	518f264d 	.word	0x518f264d
 8008edc:	3fd55555 	.word	0x3fd55555
 8008ee0:	db6fabff 	.word	0xdb6fabff
 8008ee4:	3fdb6db6 	.word	0x3fdb6db6
 8008ee8:	33333303 	.word	0x33333303
 8008eec:	3fe33333 	.word	0x3fe33333
 8008ef0:	e0000000 	.word	0xe0000000
 8008ef4:	3feec709 	.word	0x3feec709
 8008ef8:	dc3a03fd 	.word	0xdc3a03fd
 8008efc:	3feec709 	.word	0x3feec709
 8008f00:	145b01f5 	.word	0x145b01f5
 8008f04:	be3e2fe0 	.word	0xbe3e2fe0
 8008f08:	00000000 	.word	0x00000000
 8008f0c:	3ff00000 	.word	0x3ff00000
 8008f10:	43400000 	.word	0x43400000
 8008f14:	0003988e 	.word	0x0003988e
 8008f18:	000bb679 	.word	0x000bb679
 8008f1c:	08009898 	.word	0x08009898
 8008f20:	3ff00000 	.word	0x3ff00000
 8008f24:	40080000 	.word	0x40080000
 8008f28:	080098b8 	.word	0x080098b8
 8008f2c:	080098a8 	.word	0x080098a8
 8008f30:	a3b6      	add	r3, pc, #728	; (adr r3, 800920c <__ieee754_pow+0xa1c>)
 8008f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f36:	4640      	mov	r0, r8
 8008f38:	4649      	mov	r1, r9
 8008f3a:	f7f7 f953 	bl	80001e4 <__adddf3>
 8008f3e:	4622      	mov	r2, r4
 8008f40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f44:	462b      	mov	r3, r5
 8008f46:	4630      	mov	r0, r6
 8008f48:	4639      	mov	r1, r7
 8008f4a:	f7f7 f949 	bl	80001e0 <__aeabi_dsub>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f56:	f7f7 fd87 	bl	8000a68 <__aeabi_dcmpgt>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	f47f adfe 	bne.w	8008b5c <__ieee754_pow+0x36c>
 8008f60:	4aa5      	ldr	r2, [pc, #660]	; (80091f8 <__ieee754_pow+0xa08>)
 8008f62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f66:	4293      	cmp	r3, r2
 8008f68:	f340 810c 	ble.w	8009184 <__ieee754_pow+0x994>
 8008f6c:	151b      	asrs	r3, r3, #20
 8008f6e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008f72:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008f76:	fa4a f303 	asr.w	r3, sl, r3
 8008f7a:	445b      	add	r3, fp
 8008f7c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008f80:	4e9e      	ldr	r6, [pc, #632]	; (80091fc <__ieee754_pow+0xa0c>)
 8008f82:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008f86:	4116      	asrs	r6, r2
 8008f88:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	ea23 0106 	bic.w	r1, r3, r6
 8008f92:	f1c2 0214 	rsb	r2, r2, #20
 8008f96:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008f9a:	fa4a fa02 	asr.w	sl, sl, r2
 8008f9e:	f1bb 0f00 	cmp.w	fp, #0
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	4629      	mov	r1, r5
 8008faa:	bfb8      	it	lt
 8008fac:	f1ca 0a00 	rsblt	sl, sl, #0
 8008fb0:	f7f7 f916 	bl	80001e0 <__aeabi_dsub>
 8008fb4:	e9cd 0100 	strd	r0, r1, [sp]
 8008fb8:	4642      	mov	r2, r8
 8008fba:	464b      	mov	r3, r9
 8008fbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fc0:	f7f7 f910 	bl	80001e4 <__adddf3>
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	a37a      	add	r3, pc, #488	; (adr r3, 80091b0 <__ieee754_pow+0x9c0>)
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	4604      	mov	r4, r0
 8008fce:	460d      	mov	r5, r1
 8008fd0:	f7f7 faba 	bl	8000548 <__aeabi_dmul>
 8008fd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fd8:	4606      	mov	r6, r0
 8008fda:	460f      	mov	r7, r1
 8008fdc:	4620      	mov	r0, r4
 8008fde:	4629      	mov	r1, r5
 8008fe0:	f7f7 f8fe 	bl	80001e0 <__aeabi_dsub>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4640      	mov	r0, r8
 8008fea:	4649      	mov	r1, r9
 8008fec:	f7f7 f8f8 	bl	80001e0 <__aeabi_dsub>
 8008ff0:	a371      	add	r3, pc, #452	; (adr r3, 80091b8 <__ieee754_pow+0x9c8>)
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	f7f7 faa7 	bl	8000548 <__aeabi_dmul>
 8008ffa:	a371      	add	r3, pc, #452	; (adr r3, 80091c0 <__ieee754_pow+0x9d0>)
 8008ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009000:	4680      	mov	r8, r0
 8009002:	4689      	mov	r9, r1
 8009004:	4620      	mov	r0, r4
 8009006:	4629      	mov	r1, r5
 8009008:	f7f7 fa9e 	bl	8000548 <__aeabi_dmul>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4640      	mov	r0, r8
 8009012:	4649      	mov	r1, r9
 8009014:	f7f7 f8e6 	bl	80001e4 <__adddf3>
 8009018:	4604      	mov	r4, r0
 800901a:	460d      	mov	r5, r1
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	4630      	mov	r0, r6
 8009022:	4639      	mov	r1, r7
 8009024:	f7f7 f8de 	bl	80001e4 <__adddf3>
 8009028:	4632      	mov	r2, r6
 800902a:	463b      	mov	r3, r7
 800902c:	4680      	mov	r8, r0
 800902e:	4689      	mov	r9, r1
 8009030:	f7f7 f8d6 	bl	80001e0 <__aeabi_dsub>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4620      	mov	r0, r4
 800903a:	4629      	mov	r1, r5
 800903c:	f7f7 f8d0 	bl	80001e0 <__aeabi_dsub>
 8009040:	4642      	mov	r2, r8
 8009042:	4606      	mov	r6, r0
 8009044:	460f      	mov	r7, r1
 8009046:	464b      	mov	r3, r9
 8009048:	4640      	mov	r0, r8
 800904a:	4649      	mov	r1, r9
 800904c:	f7f7 fa7c 	bl	8000548 <__aeabi_dmul>
 8009050:	a35d      	add	r3, pc, #372	; (adr r3, 80091c8 <__ieee754_pow+0x9d8>)
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	4604      	mov	r4, r0
 8009058:	460d      	mov	r5, r1
 800905a:	f7f7 fa75 	bl	8000548 <__aeabi_dmul>
 800905e:	a35c      	add	r3, pc, #368	; (adr r3, 80091d0 <__ieee754_pow+0x9e0>)
 8009060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009064:	f7f7 f8bc 	bl	80001e0 <__aeabi_dsub>
 8009068:	4622      	mov	r2, r4
 800906a:	462b      	mov	r3, r5
 800906c:	f7f7 fa6c 	bl	8000548 <__aeabi_dmul>
 8009070:	a359      	add	r3, pc, #356	; (adr r3, 80091d8 <__ieee754_pow+0x9e8>)
 8009072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009076:	f7f7 f8b5 	bl	80001e4 <__adddf3>
 800907a:	4622      	mov	r2, r4
 800907c:	462b      	mov	r3, r5
 800907e:	f7f7 fa63 	bl	8000548 <__aeabi_dmul>
 8009082:	a357      	add	r3, pc, #348	; (adr r3, 80091e0 <__ieee754_pow+0x9f0>)
 8009084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009088:	f7f7 f8aa 	bl	80001e0 <__aeabi_dsub>
 800908c:	4622      	mov	r2, r4
 800908e:	462b      	mov	r3, r5
 8009090:	f7f7 fa5a 	bl	8000548 <__aeabi_dmul>
 8009094:	a354      	add	r3, pc, #336	; (adr r3, 80091e8 <__ieee754_pow+0x9f8>)
 8009096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909a:	f7f7 f8a3 	bl	80001e4 <__adddf3>
 800909e:	4622      	mov	r2, r4
 80090a0:	462b      	mov	r3, r5
 80090a2:	f7f7 fa51 	bl	8000548 <__aeabi_dmul>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	4640      	mov	r0, r8
 80090ac:	4649      	mov	r1, r9
 80090ae:	f7f7 f897 	bl	80001e0 <__aeabi_dsub>
 80090b2:	4604      	mov	r4, r0
 80090b4:	460d      	mov	r5, r1
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4640      	mov	r0, r8
 80090bc:	4649      	mov	r1, r9
 80090be:	f7f7 fa43 	bl	8000548 <__aeabi_dmul>
 80090c2:	2200      	movs	r2, #0
 80090c4:	e9cd 0100 	strd	r0, r1, [sp]
 80090c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090cc:	4620      	mov	r0, r4
 80090ce:	4629      	mov	r1, r5
 80090d0:	f7f7 f886 	bl	80001e0 <__aeabi_dsub>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090dc:	f7f7 fb5e 	bl	800079c <__aeabi_ddiv>
 80090e0:	4632      	mov	r2, r6
 80090e2:	4604      	mov	r4, r0
 80090e4:	460d      	mov	r5, r1
 80090e6:	463b      	mov	r3, r7
 80090e8:	4640      	mov	r0, r8
 80090ea:	4649      	mov	r1, r9
 80090ec:	f7f7 fa2c 	bl	8000548 <__aeabi_dmul>
 80090f0:	4632      	mov	r2, r6
 80090f2:	463b      	mov	r3, r7
 80090f4:	f7f7 f876 	bl	80001e4 <__adddf3>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4620      	mov	r0, r4
 80090fe:	4629      	mov	r1, r5
 8009100:	f7f7 f86e 	bl	80001e0 <__aeabi_dsub>
 8009104:	4642      	mov	r2, r8
 8009106:	464b      	mov	r3, r9
 8009108:	f7f7 f86a 	bl	80001e0 <__aeabi_dsub>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	2000      	movs	r0, #0
 8009112:	493b      	ldr	r1, [pc, #236]	; (8009200 <__ieee754_pow+0xa10>)
 8009114:	f7f7 f864 	bl	80001e0 <__aeabi_dsub>
 8009118:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800911c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	da31      	bge.n	800918a <__ieee754_pow+0x99a>
 8009126:	4650      	mov	r0, sl
 8009128:	ec43 2b10 	vmov	d0, r2, r3
 800912c:	f000 f9c4 	bl	80094b8 <scalbn>
 8009130:	ec51 0b10 	vmov	r0, r1, d0
 8009134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009138:	f7ff bbf1 	b.w	800891e <__ieee754_pow+0x12e>
 800913c:	4b31      	ldr	r3, [pc, #196]	; (8009204 <__ieee754_pow+0xa14>)
 800913e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009142:	429e      	cmp	r6, r3
 8009144:	f77f af0c 	ble.w	8008f60 <__ieee754_pow+0x770>
 8009148:	4b2f      	ldr	r3, [pc, #188]	; (8009208 <__ieee754_pow+0xa18>)
 800914a:	440b      	add	r3, r1
 800914c:	4303      	orrs	r3, r0
 800914e:	d00b      	beq.n	8009168 <__ieee754_pow+0x978>
 8009150:	a327      	add	r3, pc, #156	; (adr r3, 80091f0 <__ieee754_pow+0xa00>)
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800915a:	f7f7 f9f5 	bl	8000548 <__aeabi_dmul>
 800915e:	a324      	add	r3, pc, #144	; (adr r3, 80091f0 <__ieee754_pow+0xa00>)
 8009160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009164:	f7ff bbdb 	b.w	800891e <__ieee754_pow+0x12e>
 8009168:	4622      	mov	r2, r4
 800916a:	462b      	mov	r3, r5
 800916c:	f7f7 f838 	bl	80001e0 <__aeabi_dsub>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4640      	mov	r0, r8
 8009176:	4649      	mov	r1, r9
 8009178:	f7f7 fc62 	bl	8000a40 <__aeabi_dcmple>
 800917c:	2800      	cmp	r0, #0
 800917e:	f43f aeef 	beq.w	8008f60 <__ieee754_pow+0x770>
 8009182:	e7e5      	b.n	8009150 <__ieee754_pow+0x960>
 8009184:	f04f 0a00 	mov.w	sl, #0
 8009188:	e716      	b.n	8008fb8 <__ieee754_pow+0x7c8>
 800918a:	4621      	mov	r1, r4
 800918c:	e7d2      	b.n	8009134 <__ieee754_pow+0x944>
 800918e:	2000      	movs	r0, #0
 8009190:	491b      	ldr	r1, [pc, #108]	; (8009200 <__ieee754_pow+0xa10>)
 8009192:	f7ff bb8d 	b.w	80088b0 <__ieee754_pow+0xc0>
 8009196:	e9dd 0100 	ldrd	r0, r1, [sp]
 800919a:	f7ff bb89 	b.w	80088b0 <__ieee754_pow+0xc0>
 800919e:	4630      	mov	r0, r6
 80091a0:	4639      	mov	r1, r7
 80091a2:	f7ff bb85 	b.w	80088b0 <__ieee754_pow+0xc0>
 80091a6:	4693      	mov	fp, r2
 80091a8:	f7ff bb96 	b.w	80088d8 <__ieee754_pow+0xe8>
 80091ac:	f3af 8000 	nop.w
 80091b0:	00000000 	.word	0x00000000
 80091b4:	3fe62e43 	.word	0x3fe62e43
 80091b8:	fefa39ef 	.word	0xfefa39ef
 80091bc:	3fe62e42 	.word	0x3fe62e42
 80091c0:	0ca86c39 	.word	0x0ca86c39
 80091c4:	be205c61 	.word	0xbe205c61
 80091c8:	72bea4d0 	.word	0x72bea4d0
 80091cc:	3e663769 	.word	0x3e663769
 80091d0:	c5d26bf1 	.word	0xc5d26bf1
 80091d4:	3ebbbd41 	.word	0x3ebbbd41
 80091d8:	af25de2c 	.word	0xaf25de2c
 80091dc:	3f11566a 	.word	0x3f11566a
 80091e0:	16bebd93 	.word	0x16bebd93
 80091e4:	3f66c16c 	.word	0x3f66c16c
 80091e8:	5555553e 	.word	0x5555553e
 80091ec:	3fc55555 	.word	0x3fc55555
 80091f0:	c2f8f359 	.word	0xc2f8f359
 80091f4:	01a56e1f 	.word	0x01a56e1f
 80091f8:	3fe00000 	.word	0x3fe00000
 80091fc:	000fffff 	.word	0x000fffff
 8009200:	3ff00000 	.word	0x3ff00000
 8009204:	4090cbff 	.word	0x4090cbff
 8009208:	3f6f3400 	.word	0x3f6f3400
 800920c:	652b82fe 	.word	0x652b82fe
 8009210:	3c971547 	.word	0x3c971547

08009214 <__ieee754_sqrt>:
 8009214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009218:	ec55 4b10 	vmov	r4, r5, d0
 800921c:	4e54      	ldr	r6, [pc, #336]	; (8009370 <__ieee754_sqrt+0x15c>)
 800921e:	43ae      	bics	r6, r5
 8009220:	ee10 0a10 	vmov	r0, s0
 8009224:	462b      	mov	r3, r5
 8009226:	462a      	mov	r2, r5
 8009228:	4621      	mov	r1, r4
 800922a:	d113      	bne.n	8009254 <__ieee754_sqrt+0x40>
 800922c:	ee10 2a10 	vmov	r2, s0
 8009230:	462b      	mov	r3, r5
 8009232:	ee10 0a10 	vmov	r0, s0
 8009236:	4629      	mov	r1, r5
 8009238:	f7f7 f986 	bl	8000548 <__aeabi_dmul>
 800923c:	4602      	mov	r2, r0
 800923e:	460b      	mov	r3, r1
 8009240:	4620      	mov	r0, r4
 8009242:	4629      	mov	r1, r5
 8009244:	f7f6 ffce 	bl	80001e4 <__adddf3>
 8009248:	4604      	mov	r4, r0
 800924a:	460d      	mov	r5, r1
 800924c:	ec45 4b10 	vmov	d0, r4, r5
 8009250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009254:	2d00      	cmp	r5, #0
 8009256:	dc10      	bgt.n	800927a <__ieee754_sqrt+0x66>
 8009258:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800925c:	4330      	orrs	r0, r6
 800925e:	d0f5      	beq.n	800924c <__ieee754_sqrt+0x38>
 8009260:	b15d      	cbz	r5, 800927a <__ieee754_sqrt+0x66>
 8009262:	ee10 2a10 	vmov	r2, s0
 8009266:	462b      	mov	r3, r5
 8009268:	4620      	mov	r0, r4
 800926a:	4629      	mov	r1, r5
 800926c:	f7f6 ffb8 	bl	80001e0 <__aeabi_dsub>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	f7f7 fa92 	bl	800079c <__aeabi_ddiv>
 8009278:	e7e6      	b.n	8009248 <__ieee754_sqrt+0x34>
 800927a:	151b      	asrs	r3, r3, #20
 800927c:	d10c      	bne.n	8009298 <__ieee754_sqrt+0x84>
 800927e:	2a00      	cmp	r2, #0
 8009280:	d06d      	beq.n	800935e <__ieee754_sqrt+0x14a>
 8009282:	2000      	movs	r0, #0
 8009284:	02d6      	lsls	r6, r2, #11
 8009286:	d56e      	bpl.n	8009366 <__ieee754_sqrt+0x152>
 8009288:	1e44      	subs	r4, r0, #1
 800928a:	1b1b      	subs	r3, r3, r4
 800928c:	f1c0 0420 	rsb	r4, r0, #32
 8009290:	fa21 f404 	lsr.w	r4, r1, r4
 8009294:	4322      	orrs	r2, r4
 8009296:	4081      	lsls	r1, r0
 8009298:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800929c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80092a0:	07dd      	lsls	r5, r3, #31
 80092a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80092a6:	bf42      	ittt	mi
 80092a8:	0052      	lslmi	r2, r2, #1
 80092aa:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80092ae:	0049      	lslmi	r1, r1, #1
 80092b0:	1058      	asrs	r0, r3, #1
 80092b2:	2500      	movs	r5, #0
 80092b4:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80092b8:	441a      	add	r2, r3
 80092ba:	0049      	lsls	r1, r1, #1
 80092bc:	2316      	movs	r3, #22
 80092be:	462c      	mov	r4, r5
 80092c0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80092c4:	19a7      	adds	r7, r4, r6
 80092c6:	4297      	cmp	r7, r2
 80092c8:	bfde      	ittt	le
 80092ca:	1bd2      	suble	r2, r2, r7
 80092cc:	19bc      	addle	r4, r7, r6
 80092ce:	19ad      	addle	r5, r5, r6
 80092d0:	0052      	lsls	r2, r2, #1
 80092d2:	3b01      	subs	r3, #1
 80092d4:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80092d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80092dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80092e0:	d1f0      	bne.n	80092c4 <__ieee754_sqrt+0xb0>
 80092e2:	f04f 0e20 	mov.w	lr, #32
 80092e6:	469c      	mov	ip, r3
 80092e8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80092ec:	42a2      	cmp	r2, r4
 80092ee:	eb06 070c 	add.w	r7, r6, ip
 80092f2:	dc02      	bgt.n	80092fa <__ieee754_sqrt+0xe6>
 80092f4:	d112      	bne.n	800931c <__ieee754_sqrt+0x108>
 80092f6:	428f      	cmp	r7, r1
 80092f8:	d810      	bhi.n	800931c <__ieee754_sqrt+0x108>
 80092fa:	2f00      	cmp	r7, #0
 80092fc:	eb07 0c06 	add.w	ip, r7, r6
 8009300:	da34      	bge.n	800936c <__ieee754_sqrt+0x158>
 8009302:	f1bc 0f00 	cmp.w	ip, #0
 8009306:	db31      	blt.n	800936c <__ieee754_sqrt+0x158>
 8009308:	f104 0801 	add.w	r8, r4, #1
 800930c:	1b12      	subs	r2, r2, r4
 800930e:	428f      	cmp	r7, r1
 8009310:	bf88      	it	hi
 8009312:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009316:	1bc9      	subs	r1, r1, r7
 8009318:	4433      	add	r3, r6
 800931a:	4644      	mov	r4, r8
 800931c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8009320:	f1be 0e01 	subs.w	lr, lr, #1
 8009324:	443a      	add	r2, r7
 8009326:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800932a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800932e:	d1dd      	bne.n	80092ec <__ieee754_sqrt+0xd8>
 8009330:	430a      	orrs	r2, r1
 8009332:	d006      	beq.n	8009342 <__ieee754_sqrt+0x12e>
 8009334:	1c5c      	adds	r4, r3, #1
 8009336:	bf13      	iteet	ne
 8009338:	3301      	addne	r3, #1
 800933a:	3501      	addeq	r5, #1
 800933c:	4673      	moveq	r3, lr
 800933e:	f023 0301 	bicne.w	r3, r3, #1
 8009342:	106a      	asrs	r2, r5, #1
 8009344:	085b      	lsrs	r3, r3, #1
 8009346:	07e9      	lsls	r1, r5, #31
 8009348:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800934c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009350:	bf48      	it	mi
 8009352:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009356:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800935a:	461c      	mov	r4, r3
 800935c:	e776      	b.n	800924c <__ieee754_sqrt+0x38>
 800935e:	0aca      	lsrs	r2, r1, #11
 8009360:	3b15      	subs	r3, #21
 8009362:	0549      	lsls	r1, r1, #21
 8009364:	e78b      	b.n	800927e <__ieee754_sqrt+0x6a>
 8009366:	0052      	lsls	r2, r2, #1
 8009368:	3001      	adds	r0, #1
 800936a:	e78b      	b.n	8009284 <__ieee754_sqrt+0x70>
 800936c:	46a0      	mov	r8, r4
 800936e:	e7cd      	b.n	800930c <__ieee754_sqrt+0xf8>
 8009370:	7ff00000 	.word	0x7ff00000

08009374 <fabs>:
 8009374:	ec53 2b10 	vmov	r2, r3, d0
 8009378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800937c:	ec43 2b10 	vmov	d0, r2, r3
 8009380:	4770      	bx	lr

08009382 <finite>:
 8009382:	ee10 3a90 	vmov	r3, s1
 8009386:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800938a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800938e:	0fc0      	lsrs	r0, r0, #31
 8009390:	4770      	bx	lr

08009392 <matherr>:
 8009392:	2000      	movs	r0, #0
 8009394:	4770      	bx	lr
	...

08009398 <nan>:
 8009398:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80093a0 <nan+0x8>
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	00000000 	.word	0x00000000
 80093a4:	7ff80000 	.word	0x7ff80000

080093a8 <rint>:
 80093a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093aa:	ec51 0b10 	vmov	r0, r1, d0
 80093ae:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80093b2:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 80093b6:	2e13      	cmp	r6, #19
 80093b8:	ee10 7a10 	vmov	r7, s0
 80093bc:	460b      	mov	r3, r1
 80093be:	4602      	mov	r2, r0
 80093c0:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80093c4:	dc58      	bgt.n	8009478 <rint+0xd0>
 80093c6:	2e00      	cmp	r6, #0
 80093c8:	da2b      	bge.n	8009422 <rint+0x7a>
 80093ca:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80093ce:	4302      	orrs	r2, r0
 80093d0:	d023      	beq.n	800941a <rint+0x72>
 80093d2:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80093d6:	4302      	orrs	r2, r0
 80093d8:	4251      	negs	r1, r2
 80093da:	4311      	orrs	r1, r2
 80093dc:	0b09      	lsrs	r1, r1, #12
 80093de:	0c5b      	lsrs	r3, r3, #17
 80093e0:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 80093e4:	045b      	lsls	r3, r3, #17
 80093e6:	ea41 0703 	orr.w	r7, r1, r3
 80093ea:	4b31      	ldr	r3, [pc, #196]	; (80094b0 <rint+0x108>)
 80093ec:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80093f0:	4639      	mov	r1, r7
 80093f2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80093f6:	ee10 0a10 	vmov	r0, s0
 80093fa:	4632      	mov	r2, r6
 80093fc:	463b      	mov	r3, r7
 80093fe:	f7f6 fef1 	bl	80001e4 <__adddf3>
 8009402:	e9cd 0100 	strd	r0, r1, [sp]
 8009406:	463b      	mov	r3, r7
 8009408:	4632      	mov	r2, r6
 800940a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800940e:	f7f6 fee7 	bl	80001e0 <__aeabi_dsub>
 8009412:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009416:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800941a:	ec41 0b10 	vmov	d0, r0, r1
 800941e:	b003      	add	sp, #12
 8009420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009422:	4c24      	ldr	r4, [pc, #144]	; (80094b4 <rint+0x10c>)
 8009424:	4134      	asrs	r4, r6
 8009426:	ea01 0704 	and.w	r7, r1, r4
 800942a:	4307      	orrs	r7, r0
 800942c:	d0f5      	beq.n	800941a <rint+0x72>
 800942e:	0861      	lsrs	r1, r4, #1
 8009430:	ea03 0001 	and.w	r0, r3, r1
 8009434:	4302      	orrs	r2, r0
 8009436:	d00b      	beq.n	8009450 <rint+0xa8>
 8009438:	ea23 0101 	bic.w	r1, r3, r1
 800943c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009440:	2e13      	cmp	r6, #19
 8009442:	fa43 f306 	asr.w	r3, r3, r6
 8009446:	bf0c      	ite	eq
 8009448:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800944c:	2200      	movne	r2, #0
 800944e:	430b      	orrs	r3, r1
 8009450:	4619      	mov	r1, r3
 8009452:	4b17      	ldr	r3, [pc, #92]	; (80094b0 <rint+0x108>)
 8009454:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009458:	e9d5 4500 	ldrd	r4, r5, [r5]
 800945c:	4610      	mov	r0, r2
 800945e:	462b      	mov	r3, r5
 8009460:	4622      	mov	r2, r4
 8009462:	f7f6 febf 	bl	80001e4 <__adddf3>
 8009466:	e9cd 0100 	strd	r0, r1, [sp]
 800946a:	4622      	mov	r2, r4
 800946c:	462b      	mov	r3, r5
 800946e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009472:	f7f6 feb5 	bl	80001e0 <__aeabi_dsub>
 8009476:	e7d0      	b.n	800941a <rint+0x72>
 8009478:	2e33      	cmp	r6, #51	; 0x33
 800947a:	dd08      	ble.n	800948e <rint+0xe6>
 800947c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009480:	d1cb      	bne.n	800941a <rint+0x72>
 8009482:	ee10 2a10 	vmov	r2, s0
 8009486:	460b      	mov	r3, r1
 8009488:	f7f6 feac 	bl	80001e4 <__adddf3>
 800948c:	e7c5      	b.n	800941a <rint+0x72>
 800948e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8009492:	f04f 34ff 	mov.w	r4, #4294967295
 8009496:	40f4      	lsrs	r4, r6
 8009498:	4220      	tst	r0, r4
 800949a:	d0be      	beq.n	800941a <rint+0x72>
 800949c:	0861      	lsrs	r1, r4, #1
 800949e:	420f      	tst	r7, r1
 80094a0:	bf1f      	itttt	ne
 80094a2:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80094a6:	ea27 0101 	bicne.w	r1, r7, r1
 80094aa:	4132      	asrne	r2, r6
 80094ac:	430a      	orrne	r2, r1
 80094ae:	e7cf      	b.n	8009450 <rint+0xa8>
 80094b0:	080098c8 	.word	0x080098c8
 80094b4:	000fffff 	.word	0x000fffff

080094b8 <scalbn>:
 80094b8:	b570      	push	{r4, r5, r6, lr}
 80094ba:	ec55 4b10 	vmov	r4, r5, d0
 80094be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80094c2:	4606      	mov	r6, r0
 80094c4:	462b      	mov	r3, r5
 80094c6:	b9b2      	cbnz	r2, 80094f6 <scalbn+0x3e>
 80094c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80094cc:	4323      	orrs	r3, r4
 80094ce:	d03c      	beq.n	800954a <scalbn+0x92>
 80094d0:	2200      	movs	r2, #0
 80094d2:	4b33      	ldr	r3, [pc, #204]	; (80095a0 <scalbn+0xe8>)
 80094d4:	4629      	mov	r1, r5
 80094d6:	ee10 0a10 	vmov	r0, s0
 80094da:	f7f7 f835 	bl	8000548 <__aeabi_dmul>
 80094de:	4a31      	ldr	r2, [pc, #196]	; (80095a4 <scalbn+0xec>)
 80094e0:	4296      	cmp	r6, r2
 80094e2:	4604      	mov	r4, r0
 80094e4:	460d      	mov	r5, r1
 80094e6:	460b      	mov	r3, r1
 80094e8:	da13      	bge.n	8009512 <scalbn+0x5a>
 80094ea:	a329      	add	r3, pc, #164	; (adr r3, 8009590 <scalbn+0xd8>)
 80094ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f0:	f7f7 f82a 	bl	8000548 <__aeabi_dmul>
 80094f4:	e00a      	b.n	800950c <scalbn+0x54>
 80094f6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80094fa:	428a      	cmp	r2, r1
 80094fc:	d10c      	bne.n	8009518 <scalbn+0x60>
 80094fe:	ee10 2a10 	vmov	r2, s0
 8009502:	462b      	mov	r3, r5
 8009504:	4620      	mov	r0, r4
 8009506:	4629      	mov	r1, r5
 8009508:	f7f6 fe6c 	bl	80001e4 <__adddf3>
 800950c:	4604      	mov	r4, r0
 800950e:	460d      	mov	r5, r1
 8009510:	e01b      	b.n	800954a <scalbn+0x92>
 8009512:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009516:	3a36      	subs	r2, #54	; 0x36
 8009518:	4432      	add	r2, r6
 800951a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800951e:	428a      	cmp	r2, r1
 8009520:	dd0b      	ble.n	800953a <scalbn+0x82>
 8009522:	ec45 4b11 	vmov	d1, r4, r5
 8009526:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8009598 <scalbn+0xe0>
 800952a:	f000 f83f 	bl	80095ac <copysign>
 800952e:	a31a      	add	r3, pc, #104	; (adr r3, 8009598 <scalbn+0xe0>)
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	ec51 0b10 	vmov	r0, r1, d0
 8009538:	e7da      	b.n	80094f0 <scalbn+0x38>
 800953a:	2a00      	cmp	r2, #0
 800953c:	dd08      	ble.n	8009550 <scalbn+0x98>
 800953e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009542:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009546:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800954a:	ec45 4b10 	vmov	d0, r4, r5
 800954e:	bd70      	pop	{r4, r5, r6, pc}
 8009550:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009554:	da0d      	bge.n	8009572 <scalbn+0xba>
 8009556:	f24c 3350 	movw	r3, #50000	; 0xc350
 800955a:	429e      	cmp	r6, r3
 800955c:	ec45 4b11 	vmov	d1, r4, r5
 8009560:	dce1      	bgt.n	8009526 <scalbn+0x6e>
 8009562:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8009590 <scalbn+0xd8>
 8009566:	f000 f821 	bl	80095ac <copysign>
 800956a:	a309      	add	r3, pc, #36	; (adr r3, 8009590 <scalbn+0xd8>)
 800956c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009570:	e7e0      	b.n	8009534 <scalbn+0x7c>
 8009572:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009576:	3236      	adds	r2, #54	; 0x36
 8009578:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800957c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009580:	4620      	mov	r0, r4
 8009582:	4629      	mov	r1, r5
 8009584:	2200      	movs	r2, #0
 8009586:	4b08      	ldr	r3, [pc, #32]	; (80095a8 <scalbn+0xf0>)
 8009588:	e7b2      	b.n	80094f0 <scalbn+0x38>
 800958a:	bf00      	nop
 800958c:	f3af 8000 	nop.w
 8009590:	c2f8f359 	.word	0xc2f8f359
 8009594:	01a56e1f 	.word	0x01a56e1f
 8009598:	8800759c 	.word	0x8800759c
 800959c:	7e37e43c 	.word	0x7e37e43c
 80095a0:	43500000 	.word	0x43500000
 80095a4:	ffff3cb0 	.word	0xffff3cb0
 80095a8:	3c900000 	.word	0x3c900000

080095ac <copysign>:
 80095ac:	ec53 2b10 	vmov	r2, r3, d0
 80095b0:	ee11 0a90 	vmov	r0, s3
 80095b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80095b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80095bc:	ea41 0300 	orr.w	r3, r1, r0
 80095c0:	ec43 2b10 	vmov	d0, r2, r3
 80095c4:	4770      	bx	lr
	...

080095c8 <_init>:
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	bf00      	nop
 80095cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ce:	bc08      	pop	{r3}
 80095d0:	469e      	mov	lr, r3
 80095d2:	4770      	bx	lr

080095d4 <_fini>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	bf00      	nop
 80095d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095da:	bc08      	pop	{r3}
 80095dc:	469e      	mov	lr, r3
 80095de:	4770      	bx	lr
